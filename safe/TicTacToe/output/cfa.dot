digraph CFA {
91 [shape="circle" label="N91\n269"]
164 [shape="circle" label="N164\n268"]
165 [shape="circle" label="N165\n267"]
166 [shape="circle" label="N166\n266"]
167 [shape="circle" label="N167\n265"]
168 [shape="circle" label="N168\n264"]
169 [shape="circle" label="N169\n263"]
170 [shape="circle" label="N170\n262"]
171 [shape="circle" label="N171\n261"]
172 [shape="circle" label="N172\n260"]
173 [shape="circle" label="N173\n259"]
174 [shape="circle" label="N174\n258"]
175 [shape="circle" label="N175\n257"]
176 [shape="circle" label="N176\n256"]
177 [shape="circle" label="N177\n255"]
178 [shape="circle" label="N178\n254"]
179 [shape="circle" label="N179\n253"]
180 [shape="circle" label="N180\n252"]
181 [shape="circle" label="N181\n251"]
182 [shape="circle" label="N182\n250"]
183 [shape="circle" label="N183\n249"]
184 [shape="circle" label="N184\n248"]
185 [shape="circle" label="N185\n247"]
186 [shape="circle" label="N186\n246"]
187 [shape="circle" label="N187\n245"]
188 [shape="circle" label="N188\n244"]
189 [shape="circle" label="N189\n243"]
190 [shape="circle" label="N190\n242"]
191 [shape="circle" label="N191\n241"]
192 [shape="circle" label="N192\n240"]
193 [shape="circle" label="N193\n239"]
194 [shape="circle" label="N194\n238"]
195 [shape="circle" label="N195\n237"]
196 [shape="circle" label="N196\n236"]
197 [shape="circle" label="N197\n235"]
198 [shape="circle" label="N198\n234"]
199 [shape="circle" label="N199\n233"]
200 [shape="circle" label="N200\n232"]
201 [shape="circle" label="N201\n231"]
202 [shape="circle" label="N202\n230"]
203 [shape="circle" label="N203\n229"]
204 [shape="circle" label="N204\n228"]
205 [shape="circle" label="N205\n227"]
206 [shape="circle" label="N206\n226"]
207 [shape="circle" label="N207\n225"]
208 [shape="circle" label="N208\n224"]
209 [shape="circle" label="N209\n223"]
210 [shape="circle" label="N210\n222"]
211 [shape="circle" label="N211\n221"]
212 [shape="circle" label="N212\n220"]
213 [shape="circle" label="N213\n219"]
214 [shape="circle" label="N214\n218"]
215 [shape="circle" label="N215\n217"]
216 [shape="circle" label="N216\n216"]
217 [shape="circle" label="N217\n215"]
218 [shape="circle" label="N218\n214"]
219 [shape="circle" label="N219\n213"]
220 [shape="circle" label="N220\n212"]
221 [shape="circle" label="N221\n211"]
222 [shape="circle" label="N222\n210"]
223 [shape="circle" label="N223\n209"]
224 [shape="circle" label="N224\n208"]
225 [shape="circle" label="N225\n207"]
226 [shape="circle" label="N226\n206"]
227 [shape="circle" label="N227\n205"]
228 [shape="circle" label="N228\n204"]
229 [shape="circle" label="N229\n203"]
230 [shape="circle" label="N230\n202"]
231 [shape="circle" label="N231\n201"]
232 [shape="circle" label="N232\n200"]
233 [shape="circle" label="N233\n199"]
234 [shape="circle" label="N234\n198"]
235 [shape="circle" label="N235\n197"]
236 [shape="circle" label="N236\n196"]
237 [shape="circle" label="N237\n195"]
238 [shape="circle" label="N238\n194"]
239 [shape="circle" label="N239\n193"]
240 [shape="circle" label="N240\n192"]
241 [shape="circle" label="N241\n191"]
242 [shape="circle" label="N242\n190"]
243 [shape="circle" label="N243\n189"]
244 [shape="circle" label="N244\n188"]
245 [shape="circle" label="N245\n187"]
246 [shape="circle" label="N246\n186"]
247 [shape="circle" label="N247\n185"]
248 [shape="circle" label="N248\n184"]
249 [shape="circle" label="N249\n183"]
250 [shape="circle" label="N250\n182"]
251 [shape="circle" label="N251\n181"]
252 [shape="circle" label="N252\n180"]
253 [shape="circle" label="N253\n179"]
254 [shape="circle" label="N254\n178"]
255 [shape="circle" label="N255\n177"]
256 [shape="circle" label="N256\n176"]
257 [shape="circle" label="N257\n175"]
258 [shape="circle" label="N258\n174"]
259 [shape="circle" label="N259\n173"]
260 [shape="circle" label="N260\n172"]
261 [shape="circle" label="N261\n171"]
262 [shape="circle" label="N262\n170"]
263 [shape="circle" label="N263\n169"]
264 [shape="circle" label="N264\n168"]
265 [shape="circle" label="N265\n167"]
266 [shape="circle" label="N266\n166"]
267 [shape="circle" label="N267\n165"]
268 [shape="circle" label="N268\n164"]
269 [shape="circle" label="N269\n163"]
270 [shape="circle" label="N270\n162"]
271 [shape="circle" label="N271\n161"]
272 [shape="circle" label="N272\n160"]
273 [shape="circle" label="N273\n159"]
274 [shape="circle" label="N274\n158"]
275 [shape="circle" label="N275\n157"]
276 [shape="circle" label="N276\n156"]
277 [shape="circle" label="N277\n155"]
278 [shape="circle" label="N278\n154"]
279 [shape="circle" label="N279\n153"]
280 [shape="circle" label="N280\n152"]
281 [shape="circle" label="N281\n151"]
282 [shape="circle" label="N282\n150"]
283 [shape="circle" label="N283\n149"]
284 [shape="circle" label="N284\n148"]
285 [shape="circle" label="N285\n147"]
286 [shape="circle" label="N286\n146"]
287 [shape="circle" label="N287\n145"]
288 [shape="circle" label="N288\n144"]
289 [shape="circle" label="N289\n143"]
290 [shape="circle" label="N290\n142"]
291 [shape="circle" label="N291\n141"]
292 [shape="circle" label="N292\n140"]
293 [shape="circle" label="N293\n139"]
294 [shape="circle" label="N294\n138"]
295 [shape="circle" label="N295\n137"]
296 [shape="circle" label="N296\n136"]
297 [shape="circle" label="N297\n135"]
298 [shape="circle" label="N298\n134"]
299 [shape="circle" label="N299\n133"]
300 [shape="circle" label="N300\n132"]
301 [shape="circle" label="N301\n131"]
302 [shape="circle" label="N302\n130"]
303 [shape="circle" label="N303\n129"]
304 [shape="circle" label="N304\n128"]
305 [shape="circle" label="N305\n127"]
306 [shape="circle" label="N306\n126"]
307 [shape="circle" label="N307\n125"]
308 [shape="circle" label="N308\n124"]
309 [shape="circle" label="N309\n123"]
310 [shape="circle" label="N310\n122"]
311 [shape="circle" label="N311\n121"]
312 [shape="circle" label="N312\n120"]
313 [shape="circle" label="N313\n119"]
314 [shape="circle" label="N314\n118"]
315 [shape="circle" label="N315\n117"]
316 [shape="circle" label="N316\n116"]
317 [shape="circle" label="N317\n115"]
318 [shape="circle" label="N318\n114"]
319 [shape="circle" label="N319\n113"]
320 [shape="circle" label="N320\n112"]
321 [shape="circle" label="N321\n111"]
322 [shape="circle" label="N322\n110"]
323 [shape="circle" label="N323\n109"]
324 [shape="circle" label="N324\n108"]
325 [shape="circle" label="N325\n107"]
326 [shape="circle" label="N326\n106"]
327 [shape="circle" label="N327\n105"]
328 [shape="circle" label="N328\n104"]
329 [shape="circle" label="N329\n103"]
330 [shape="circle" label="N330\n102"]
331 [shape="circle" label="N331\n101"]
332 [shape="circle" label="N332\n100"]
333 [shape="circle" label="N333\n99"]
334 [shape="circle" label="N334\n98"]
335 [shape="circle" label="N335\n97"]
336 [shape="circle" label="N336\n96"]
337 [shape="circle" label="N337\n95"]
338 [shape="circle" label="N338\n94"]
339 [shape="circle" label="N339\n93"]
340 [shape="circle" label="N340\n92"]
341 [shape="circle" label="N341\n91"]
342 [shape="circle" label="N342\n90"]
343 [shape="circle" label="N343\n89"]
344 [shape="circle" label="N344\n88"]
345 [shape="circle" label="N345\n87"]
346 [shape="circle" label="N346\n86"]
347 [shape="circle" label="N347\n85"]
348 [shape="circle" label="N348\n84"]
349 [shape="circle" label="N349\n83"]
350 [shape="circle" label="N350\n82"]
351 [shape="circle" label="N351\n81"]
352 [shape="circle" label="N352\n80"]
353 [shape="circle" label="N353\n79"]
354 [shape="circle" label="N354\n78"]
355 [shape="circle" label="N355\n77"]
356 [shape="circle" label="N356\n76"]
357 [shape="circle" label="N357\n75"]
358 [shape="circle" label="N358\n74"]
359 [shape="circle" label="N359\n73"]
360 [shape="circle" label="N360\n72"]
361 [shape="circle" label="N361\n71"]
92 [shape="circle" label="N92\n70"]
93 [shape="circle" label="N93\n69"]
94 [shape="circle" label="N94\n68"]
95 [shape="circle" label="N95\n67"]
96 [shape="circle" label="N96\n66"]
97 [shape="circle" label="N97\n65"]
1 [shape="circle" label="N1\n11"]
2 [shape="circle" label="N2\n10"]
3 [shape="circle" label="N3\n9"]
4 [shape="circle" label="N4\n8"]
5 [shape="doublecircle" label="N5\n7"]
8 [shape="circle" label="N8\n6"]
10 [shape="circle" label="N10\n5"]
11 [shape="circle" label="N11\n4"]
0 [shape="circle" label="N0\n3"]
98 [shape="circle" label="N98\n64"]
99 [shape="doublecircle" label="N99\n63"]
100 [shape="circle" label="N100\n62"]
102 [shape="circle" label="N102\n61"]
13 [shape="circle" label="N13\n77"]
14 [shape="circle" label="N14\n76"]
15 [shape="diamond" label="N15\n75"]
17 [shape="circle" label="N17\n74"]
18 [shape="circle" label="N18\n72"]
19 [shape="diamond" label="N19\n71"]
20 [shape="circle" label="N20\n62"]
29 [shape="diamond" label="N29\n61"]
33 [shape="diamond" label="N33\n56"]
30 [shape="diamond" label="N30\n51"]
32 [shape="circle" label="N32\n42"]
50 [shape="circle" label="N50\n40"]
51 [shape="circle" label="N51\n39"]
52 [shape="diamond" label="N52\n38"]
56 [shape="diamond" label="N56\n33"]
53 [shape="diamond" label="N53\n28"]
55 [shape="circle" label="N55\n19"]
73 [shape="circle" label="N73\n17"]
74 [shape="circle" label="N74\n16"]
75 [shape="diamond" label="N75\n15"]
77 [shape="circle" label="N77\n3"]
88 [shape="circle" label="N88\n2"]
89 [shape="circle" label="N89\n1"]
12 [shape="circle" label="N12\n0"]
103 [shape="circle" label="N103\n60"]
104 [shape="diamond" label="N104\n59"]
105 [shape="diamond" label="N105\n58"]
107 [shape="circle" label="N107\n57"]
108 [shape="circle" label="N108\n55"]
109 [shape="circle" label="N109\n54"]
110 [shape="diamond" label="N110\n53"]
113 [shape="circle" label="N113\n51"]
114 [shape="circle" label="N114\n49"]
115 [shape="circle" label="N115\n48"]
116 [shape="diamond" label="N116\n47"]
118 [shape="circle" label="N118\n42"]
122 [shape="circle" label="N122\n41"]
123 [shape="circle" label="N123\n40"]
124 [shape="diamond" label="N124\n39"]
126 [shape="circle" label="N126\n34"]
130 [shape="circle" label="N130\n33"]
131 [shape="circle" label="N131\n32"]
132 [shape="diamond" label="N132\n31"]
134 [shape="circle" label="N134\n26"]
138 [shape="circle" label="N138\n25"]
139 [shape="circle" label="N139\n24"]
140 [shape="diamond" label="N140\n23"]
142 [shape="circle" label="N142\n18"]
146 [shape="circle" label="N146\n17"]
147 [shape="circle" label="N147\n16"]
148 [shape="diamond" label="N148\n15"]
150 [shape="circle" label="N150\n10"]
154 [shape="circle" label="N154\n9"]
155 [shape="circle" label="N155\n8"]
156 [shape="diamond" label="N156\n7"]
158 [shape="circle" label="N158\n2"]
162 [shape="circle" label="N162\n1"]
163 [shape="circle" label="N163\n0"]
161 [shape="diamond" label="N161\n6"]
160 [shape="diamond" label="N160\n5"]
157 [shape="diamond" label="N157\n4"]
159 [shape="circle" label="N159\n3"]
153 [shape="diamond" label="N153\n14"]
152 [shape="diamond" label="N152\n13"]
149 [shape="diamond" label="N149\n12"]
151 [shape="circle" label="N151\n11"]
145 [shape="diamond" label="N145\n22"]
144 [shape="diamond" label="N144\n21"]
141 [shape="diamond" label="N141\n20"]
143 [shape="circle" label="N143\n19"]
137 [shape="diamond" label="N137\n30"]
136 [shape="diamond" label="N136\n29"]
133 [shape="diamond" label="N133\n28"]
135 [shape="circle" label="N135\n27"]
129 [shape="diamond" label="N129\n38"]
128 [shape="diamond" label="N128\n37"]
125 [shape="diamond" label="N125\n36"]
127 [shape="circle" label="N127\n35"]
121 [shape="diamond" label="N121\n46"]
120 [shape="diamond" label="N120\n45"]
117 [shape="diamond" label="N117\n44"]
119 [shape="circle" label="N119\n43"]
111 [shape="diamond" label="N111\n52"]
112 [shape="circle" label="N112\n50"]
106 [shape="circle" label="N106\n56"]
79 [shape="diamond" label="N79\n14"]
76 [shape="diamond" label="N76\n13"]
78 [shape="circle" label="N78\n4"]
87 [shape="diamond" label="N87\n12"]
86 [shape="diamond" label="N86\n11"]
85 [shape="diamond" label="N85\n10"]
84 [shape="diamond" label="N84\n9"]
83 [shape="diamond" label="N83\n8"]
82 [shape="diamond" label="N82\n7"]
81 [shape="diamond" label="N81\n6"]
80 [shape="diamond" label="N80\n5"]
65 [shape="diamond" label="N65\n27"]
68 [shape="diamond" label="N68\n25"]
67 [shape="diamond" label="N67\n23"]
66 [shape="diamond" label="N66\n21"]
72 [shape="diamond" label="N72\n20"]
54 [shape="circle" label="N54\n18"]
71 [shape="diamond" label="N71\n22"]
70 [shape="diamond" label="N70\n24"]
69 [shape="diamond" label="N69\n26"]
61 [shape="diamond" label="N61\n32"]
62 [shape="diamond" label="N62\n30"]
64 [shape="diamond" label="N64\n29"]
63 [shape="diamond" label="N63\n31"]
57 [shape="diamond" label="N57\n37"]
58 [shape="diamond" label="N58\n35"]
60 [shape="diamond" label="N60\n34"]
59 [shape="diamond" label="N59\n36"]
42 [shape="diamond" label="N42\n50"]
45 [shape="diamond" label="N45\n48"]
44 [shape="diamond" label="N44\n46"]
43 [shape="diamond" label="N43\n44"]
49 [shape="diamond" label="N49\n43"]
31 [shape="circle" label="N31\n41"]
48 [shape="diamond" label="N48\n45"]
47 [shape="diamond" label="N47\n47"]
46 [shape="diamond" label="N46\n49"]
38 [shape="diamond" label="N38\n55"]
39 [shape="diamond" label="N39\n53"]
41 [shape="diamond" label="N41\n52"]
40 [shape="diamond" label="N40\n54"]
34 [shape="diamond" label="N34\n60"]
35 [shape="diamond" label="N35\n58"]
37 [shape="diamond" label="N37\n57"]
36 [shape="diamond" label="N36\n59"]
22 [shape="diamond" label="N22\n70"]
21 [shape="circle" label="N21\n69"]
23 [shape="circle" label="N23\n68"]
24 [shape="diamond" label="N24\n67"]
26 [shape="circle" label="N26\n66"]
27 [shape="circle" label="N27\n64"]
28 [shape="circle" label="N28\n63"]
25 [shape="circle" label="N25\n65"]
16 [shape="circle" label="N16\n73"]
7 [shape="circle" label="N7\n2"]
9 [shape="circle" label="N9\n1"]
6 [shape="circle" label="N6\n0"]
node [shape="circle"]
subgraph cluster_initial {
label="initial()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="int i;"]
3 -> 4 [label="for"]
4 -> 5 [label="i = 0;"]
5 -> 7 [label="[i < 9]"]
5 -> 8 [label="[!(i < 9)]"]
8 -> 10 [label="smain.turn = X;"]
10 -> 11 [label="smain.move = 0;"]
11 -> 0 [label="default return"]
7 -> 9 [label="(smain.b)[i] = EMPTY;"]
9 -> 6 [label=""]
6 -> 5 [label="i = i + 1;"]}
subgraph cluster_main {
label="main()"
91 -> 164 [label="INIT GLOBAL VARS"]
164 -> 165 [label="typedef unsigned long int size_t;"]
165 -> 166 [label="typedef unsigned char __u_char;"]
166 -> 167 [label="typedef unsigned short int __u_short;"]
167 -> 168 [label="typedef unsigned int __u_int;"]
168 -> 169 [label="typedef unsigned long int __u_long;"]
169 -> 170 [label="typedef signed char __int8_t;"]
170 -> 171 [label="typedef unsigned char __uint8_t;"]
171 -> 172 [label="typedef signed short int __int16_t;"]
172 -> 173 [label="typedef unsigned short int __uint16_t;"]
173 -> 174 [label="typedef signed int __int32_t;"]
174 -> 175 [label="typedef unsigned int __uint32_t;"]
175 -> 176 [label="typedef signed long int __int64_t;"]
176 -> 177 [label="typedef unsigned long int __uint64_t;"]
177 -> 178 [label="typedef long int __quad_t;"]
178 -> 179 [label="typedef unsigned long int __u_quad_t;"]
179 -> 180 [label="typedef unsigned long int __dev_t;"]
180 -> 181 [label="typedef unsigned int __uid_t;"]
181 -> 182 [label="typedef unsigned int __gid_t;"]
182 -> 183 [label="typedef unsigned long int __ino_t;"]
183 -> 184 [label="typedef unsigned long int __ino64_t;"]
184 -> 185 [label="typedef unsigned int __mode_t;"]
185 -> 186 [label="typedef unsigned long int __nlink_t;"]
186 -> 187 [label="typedef long int __off_t;"]
187 -> 188 [label="typedef long int __off64_t;"]
188 -> 189 [label="typedef int __pid_t;"]
189 -> 190 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
190 -> 191 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
191 -> 192 [label="typedef long int __clock_t;"]
192 -> 193 [label="typedef unsigned long int __rlim_t;"]
193 -> 194 [label="typedef unsigned long int __rlim64_t;"]
194 -> 195 [label="typedef unsigned int __id_t;"]
195 -> 196 [label="typedef long int __time_t;"]
196 -> 197 [label="typedef unsigned int __useconds_t;"]
197 -> 198 [label="typedef long int __suseconds_t;"]
198 -> 199 [label="typedef int __daddr_t;"]
199 -> 200 [label="typedef int __key_t;"]
200 -> 201 [label="typedef int __clockid_t;"]
201 -> 202 [label="typedef void *__timer_t;"]
202 -> 203 [label="typedef long int __blksize_t;"]
203 -> 204 [label="typedef long int __blkcnt_t;"]
204 -> 205 [label="typedef long int __blkcnt64_t;"]
205 -> 206 [label="typedef unsigned long int __fsblkcnt_t;"]
206 -> 207 [label="typedef unsigned long int __fsblkcnt64_t;"]
207 -> 208 [label="typedef unsigned long int __fsfilcnt_t;"]
208 -> 209 [label="typedef unsigned long int __fsfilcnt64_t;"]
209 -> 210 [label="typedef long int __fsword_t;"]
210 -> 211 [label="typedef long int __ssize_t;"]
211 -> 212 [label="typedef long int __syscall_slong_t;"]
212 -> 213 [label="typedef unsigned long int __syscall_ulong_t;"]
213 -> 214 [label="typedef __off64_t __loff_t;"]
214 -> 215 [label="typedef __quad_t *__qaddr_t;"]
215 -> 216 [label="typedef char *__caddr_t;"]
216 -> 217 [label="typedef long int __intptr_t;"]
217 -> 218 [label="typedef unsigned int __socklen_t;"]
218 -> 219 [label="struct _IO_FILE ;"]
219 -> 220 [label="typedef struct _IO_FILE FILE;"]
220 -> 221 [label="typedef struct _IO_FILE __FILE;"]
221 -> 222 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
222 -> 223 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
223 -> 224 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
224 -> 225 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
225 -> 226 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
226 -> 227 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
227 -> 228 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
228 -> 229 [label="typedef __builtin_va_list __gnuc_va_list;"]
229 -> 230 [label="struct _IO_jump_t ;"]
230 -> 231 [label="typedef void _IO_lock_t;"]
231 -> 232 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
232 -> 233 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
233 -> 234 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
234 -> 235 [label="typedef struct _IO_FILE _IO_FILE;"]
235 -> 236 [label="struct _IO_FILE_plus ;"]
236 -> 237 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
237 -> 238 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
238 -> 239 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
239 -> 240 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
240 -> 241 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
241 -> 242 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
242 -> 243 [label="typedef int __io_close_fn(void *__cookie);"]
243 -> 244 [label="int __underflow(_IO_FILE *);"]
244 -> 245 [label="int __uflow(_IO_FILE *);"]
245 -> 246 [label="int __overflow(_IO_FILE *, int);"]
246 -> 247 [label="int _IO_getc(_IO_FILE *__fp);"]
247 -> 248 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
248 -> 249 [label="int _IO_feof(_IO_FILE *__fp);"]
249 -> 250 [label="int _IO_ferror(_IO_FILE *__fp);"]
250 -> 251 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
251 -> 252 [label="void _IO_flockfile(_IO_FILE *);"]
252 -> 253 [label="void _IO_funlockfile(_IO_FILE *);"]
253 -> 254 [label="int _IO_ftrylockfile(_IO_FILE *);"]
254 -> 255 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
255 -> 256 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
256 -> 257 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
257 -> 258 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
258 -> 259 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
259 -> 260 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
260 -> 261 [label="void _IO_free_backup_area(_IO_FILE *);"]
261 -> 262 [label="typedef __gnuc_va_list va_list;"]
262 -> 263 [label="typedef __off_t off_t;"]
263 -> 264 [label="typedef __ssize_t ssize_t;"]
264 -> 265 [label="typedef _G_fpos_t fpos_t;"]
265 -> 266 [label="extern struct _IO_FILE *stdin;"]
266 -> 267 [label="extern struct _IO_FILE *stdout;"]
267 -> 268 [label="extern struct _IO_FILE *stderr;"]
268 -> 269 [label="int remove(const char *__filename);"]
269 -> 270 [label="int rename(const char *__old, const char *__new);"]
270 -> 271 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
271 -> 272 [label="FILE * tmpfile();"]
272 -> 273 [label="char * tmpnam(char *__s);"]
273 -> 274 [label="char * tmpnam_r(char *__s);"]
274 -> 275 [label="char * tempnam(const char *__dir, const char *__pfx);"]
275 -> 276 [label="int fclose(FILE *__stream);"]
276 -> 277 [label="int fflush(FILE *__stream);"]
277 -> 278 [label="int fflush_unlocked(FILE *__stream);"]
278 -> 279 [label="FILE * fopen(const char *__filename, const char *__modes);"]
279 -> 280 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
280 -> 281 [label="FILE * fdopen(int __fd, const char *__modes);"]
281 -> 282 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
282 -> 283 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
283 -> 284 [label="void setbuf(FILE *__stream, char *__buf);"]
284 -> 285 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
285 -> 286 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
286 -> 287 [label="void setlinebuf(FILE *__stream);"]
287 -> 288 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
288 -> 289 [label="int printf(const char *__format, ...);"]
289 -> 290 [label="int sprintf(char *__s, const char *__format, ...);"]
290 -> 291 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
291 -> 292 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
292 -> 293 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
293 -> 294 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
294 -> 295 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
295 -> 296 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
296 -> 297 [label="int dprintf(int __fd, const char *__fmt, ...);"]
297 -> 298 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
298 -> 299 [label="int scanf(const char *__format, ...);"]
299 -> 300 [label="int sscanf(const char *__s, const char *__format, ...);"]
300 -> 301 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
301 -> 302 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
302 -> 303 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
303 -> 304 [label="int fgetc(FILE *__stream);"]
304 -> 305 [label="int getc(FILE *__stream);"]
305 -> 306 [label="int getchar();"]
306 -> 307 [label="int getc_unlocked(FILE *__stream);"]
307 -> 308 [label="int getchar_unlocked();"]
308 -> 309 [label="int fgetc_unlocked(FILE *__stream);"]
309 -> 310 [label="int fputc(int __c, FILE *__stream);"]
310 -> 311 [label="int putc(int __c, FILE *__stream);"]
311 -> 312 [label="int putchar(int __c);"]
312 -> 313 [label="int fputc_unlocked(int __c, FILE *__stream);"]
313 -> 314 [label="int putc_unlocked(int __c, FILE *__stream);"]
314 -> 315 [label="int putchar_unlocked(int __c);"]
315 -> 316 [label="int getw(FILE *__stream);"]
316 -> 317 [label="int putw(int __w, FILE *__stream);"]
317 -> 318 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
318 -> 319 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
319 -> 320 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
320 -> 321 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
321 -> 322 [label="int fputs(const char *__s, FILE *__stream);"]
322 -> 323 [label="int puts(const char *__s);"]
323 -> 324 [label="int ungetc(int __c, FILE *__stream);"]
324 -> 325 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
325 -> 326 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
326 -> 327 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
327 -> 328 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
328 -> 329 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
329 -> 330 [label="long int ftell(FILE *__stream);"]
330 -> 331 [label="void rewind(FILE *__stream);"]
331 -> 332 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
332 -> 333 [label="__off_t  ftello(FILE *__stream);"]
333 -> 334 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
334 -> 335 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
335 -> 336 [label="void clearerr(FILE *__stream);"]
336 -> 337 [label="int feof(FILE *__stream);"]
337 -> 338 [label="int ferror(FILE *__stream);"]
338 -> 339 [label="void clearerr_unlocked(FILE *__stream);"]
339 -> 340 [label="int feof_unlocked(FILE *__stream);"]
340 -> 341 [label="int ferror_unlocked(FILE *__stream);"]
341 -> 342 [label="void perror(const char *__s);"]
342 -> 343 [label="extern int sys_nerr;"]
343 -> 344 [label="extern const const char *sys_errlist[];"]
344 -> 345 [label="int fileno(FILE *__stream);"]
345 -> 346 [label="int fileno_unlocked(FILE *__stream);"]
346 -> 347 [label="FILE * popen(const char *__command, const char *__modes);"]
347 -> 348 [label="int pclose(FILE *__stream);"]
348 -> 349 [label="char * ctermid(char *__s);"]
349 -> 350 [label="void flockfile(FILE *__stream);"]
350 -> 351 [label="int ftrylockfile(FILE *__stream);"]
351 -> 352 [label="void funlockfile(FILE *__stream);"]
352 -> 353 [label="unsigned char nondet_uchar();"]
353 -> 354 [label="struct state_elements_main {   unsigned char b[9];   unsigned char turn;   unsigned char move; } ;"]
354 -> 355 [label="struct state_elements_main smain = {  };"]
355 -> 356 [label="int EMPTY = 0;"]
356 -> 357 [label="int X = 1;"]
357 -> 358 [label="int O = 2;"]
358 -> 359 [label="void initial();"]
359 -> 360 [label="void tictactoe(_Bool clock, unsigned char imove, _Bool *winX, _Bool *winO, _Bool *finished);"]
360 -> 361 [label="void main();"]
361 -> 92 [label="Function start dummy edge"]
92 -> 93 [label="_Bool clock;"]
93 -> 94 [label="unsigned char imove;"]
94 -> 95 [label="_Bool winX;"]
95 -> 96 [label="_Bool winO;"]
96 -> 97 [label="_Bool finished;"]
97 -> 98 [label="initial();" style="dotted" arrowhead="empty"]
98 -> 99 [label="while"]
99 -> 100 [label=""]
100 -> 102 [label="imove = nondet_uchar();"]
102 -> 103 [label="tictactoe(clock, imove, &winX, &winO, &finished);" style="dotted" arrowhead="empty"]
103 -> 104 [label="int __CPAchecker_TMP_0;"]
104 -> 106 [label="[(((smain.move) >> 3) & 1) == 0]"]
104 -> 105 [label="[!((((smain.move) >> 3) & 1) == 0)]"]
105 -> 106 [label="[((smain.move) & 3) == 0]"]
105 -> 107 [label="[!(((smain.move) & 3) == 0)]"]
107 -> 108 [label="__CPAchecker_TMP_0 = 0;"]
108 -> 109 [label="assert(__CPAchecker_TMP_0);"]
109 -> 110 [label="int __CPAchecker_TMP_1;"]
110 -> 111 [label="[winX == 1]"]
110 -> 113 [label="[!(winX == 1)]"]
113 -> 114 [label="__CPAchecker_TMP_1 = 0;"]
114 -> 115 [label="assert(0 == __CPAchecker_TMP_1);"]
115 -> 116 [label="int __CPAchecker_TMP_2;"]
116 -> 121 [label="[((smain.b)[0]) == X]"]
116 -> 118 [label="[!(((smain.b)[0]) == X)]"]
118 -> 122 [label="__CPAchecker_TMP_2 = 1;"]
122 -> 123 [label="assert(__CPAchecker_TMP_2);"]
123 -> 124 [label="int __CPAchecker_TMP_3;"]
124 -> 129 [label="[((smain.b)[0]) == O]"]
124 -> 126 [label="[!(((smain.b)[0]) == O)]"]
126 -> 130 [label="__CPAchecker_TMP_3 = 1;"]
130 -> 131 [label="assert(__CPAchecker_TMP_3);"]
131 -> 132 [label="int __CPAchecker_TMP_4;"]
132 -> 137 [label="[((smain.b)[3]) == X]"]
132 -> 134 [label="[!(((smain.b)[3]) == X)]"]
134 -> 138 [label="__CPAchecker_TMP_4 = 1;"]
138 -> 139 [label="assert(__CPAchecker_TMP_4);"]
139 -> 140 [label="int __CPAchecker_TMP_5;"]
140 -> 145 [label="[((smain.b)[3]) == O]"]
140 -> 142 [label="[!(((smain.b)[3]) == O)]"]
142 -> 146 [label="__CPAchecker_TMP_5 = 1;"]
146 -> 147 [label="assert(__CPAchecker_TMP_5);"]
147 -> 148 [label="int __CPAchecker_TMP_6;"]
148 -> 153 [label="[((smain.b)[6]) == X]"]
148 -> 150 [label="[!(((smain.b)[6]) == X)]"]
150 -> 154 [label="__CPAchecker_TMP_6 = 1;"]
154 -> 155 [label="assert(__CPAchecker_TMP_6);"]
155 -> 156 [label="int __CPAchecker_TMP_7;"]
156 -> 161 [label="[((smain.b)[6]) == O]"]
156 -> 158 [label="[!(((smain.b)[6]) == O)]"]
158 -> 162 [label="__CPAchecker_TMP_7 = 1;"]
162 -> 163 [label="assert(__CPAchecker_TMP_7);"]
163 -> 99 [label=""]
161 -> 160 [label="[((smain.b)[7]) == O]"]
161 -> 158 [label="[!(((smain.b)[7]) == O)]"]
160 -> 157 [label="[((smain.b)[8]) == O]"]
160 -> 158 [label="[!(((smain.b)[8]) == O)]"]
157 -> 158 [label="[winO == 1]"]
157 -> 159 [label="[!(winO == 1)]"]
159 -> 162 [label="__CPAchecker_TMP_7 = 0;"]
153 -> 152 [label="[((smain.b)[7]) == X]"]
153 -> 150 [label="[!(((smain.b)[7]) == X)]"]
152 -> 149 [label="[((smain.b)[8]) == X]"]
152 -> 150 [label="[!(((smain.b)[8]) == X)]"]
149 -> 150 [label="[winX == 1]"]
149 -> 151 [label="[!(winX == 1)]"]
151 -> 154 [label="__CPAchecker_TMP_6 = 0;"]
145 -> 144 [label="[((smain.b)[4]) == O]"]
145 -> 142 [label="[!(((smain.b)[4]) == O)]"]
144 -> 141 [label="[((smain.b)[5]) == O]"]
144 -> 142 [label="[!(((smain.b)[5]) == O)]"]
141 -> 142 [label="[winO == 1]"]
141 -> 143 [label="[!(winO == 1)]"]
143 -> 146 [label="__CPAchecker_TMP_5 = 0;"]
137 -> 136 [label="[((smain.b)[4]) == X]"]
137 -> 134 [label="[!(((smain.b)[4]) == X)]"]
136 -> 133 [label="[((smain.b)[5]) == X]"]
136 -> 134 [label="[!(((smain.b)[5]) == X)]"]
133 -> 134 [label="[winX == 1]"]
133 -> 135 [label="[!(winX == 1)]"]
135 -> 138 [label="__CPAchecker_TMP_4 = 0;"]
129 -> 128 [label="[((smain.b)[1]) == O]"]
129 -> 126 [label="[!(((smain.b)[1]) == O)]"]
128 -> 125 [label="[((smain.b)[2]) == O]"]
128 -> 126 [label="[!(((smain.b)[2]) == O)]"]
125 -> 126 [label="[winO == 1]"]
125 -> 127 [label="[!(winO == 1)]"]
127 -> 130 [label="__CPAchecker_TMP_3 = 0;"]
121 -> 120 [label="[((smain.b)[1]) == X]"]
121 -> 118 [label="[!(((smain.b)[1]) == X)]"]
120 -> 117 [label="[((smain.b)[2]) == X]"]
120 -> 118 [label="[!(((smain.b)[2]) == X)]"]
117 -> 118 [label="[winX == 1]"]
117 -> 119 [label="[!(winX == 1)]"]
119 -> 122 [label="__CPAchecker_TMP_2 = 0;"]
111 -> 112 [label="[winO == 1]"]
111 -> 113 [label="[!(winO == 1)]"]
112 -> 114 [label="__CPAchecker_TMP_1 = 1;"]
106 -> 108 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_tictactoe {
label="tictactoe()"
13 -> 14 [label="Function start dummy edge"]
14 -> 15 [label="int __CPAchecker_TMP_0;"]
15 -> 16 [label="[imove < 9]"]
15 -> 17 [label="[!(imove < 9)]"]
17 -> 18 [label="__CPAchecker_TMP_0 = 0;"]
18 -> 19 [label="smain.move = __CPAchecker_TMP_0;"]
19 -> 22 [label="[finished == 0]"]
19 -> 20 [label="[!(finished == 0)]"]
20 -> 29 [label="int __CPAchecker_TMP_2;"]
29 -> 34 [label="[((unsigned int)((smain.b)[0])) == X]"]
29 -> 33 [label="[!(((unsigned int)((smain.b)[0])) == X)]"]
33 -> 38 [label="[((unsigned int)((smain.b)[8])) == X]"]
33 -> 30 [label="[!(((unsigned int)((smain.b)[8])) == X)]"]
30 -> 42 [label="[((unsigned int)((smain.b)[4])) == X]"]
30 -> 32 [label="[!(((unsigned int)((smain.b)[4])) == X)]"]
32 -> 50 [label="__CPAchecker_TMP_2 = 0;"]
50 -> 51 [label="*winX = __CPAchecker_TMP_2;"]
51 -> 52 [label="int __CPAchecker_TMP_3;"]
52 -> 57 [label="[((unsigned int)((smain.b)[0])) == O]"]
52 -> 56 [label="[!(((unsigned int)((smain.b)[0])) == O)]"]
56 -> 61 [label="[((unsigned int)((smain.b)[8])) == O]"]
56 -> 53 [label="[!(((unsigned int)((smain.b)[8])) == O)]"]
53 -> 65 [label="[((unsigned int)((smain.b)[4])) == O]"]
53 -> 55 [label="[!(((unsigned int)((smain.b)[4])) == O)]"]
55 -> 73 [label="__CPAchecker_TMP_3 = 0;"]
73 -> 74 [label="*winO = __CPAchecker_TMP_3;"]
74 -> 75 [label="int __CPAchecker_TMP_4;"]
75 -> 79 [label="[(*winX) == 0]"]
75 -> 77 [label="[!((*winX) == 0)]"]
77 -> 88 [label="__CPAchecker_TMP_4 = 1;"]
88 -> 89 [label="*finished = __CPAchecker_TMP_4;"]
89 -> 12 [label="default return"]
79 -> 76 [label="[(*winO) == 0]"]
79 -> 77 [label="[!((*winO) == 0)]"]
76 -> 87 [label="[((unsigned int)((smain.b)[0])) != EMPTY]"]
76 -> 78 [label="[!(((unsigned int)((smain.b)[0])) != EMPTY)]"]
78 -> 88 [label="__CPAchecker_TMP_4 = 0;"]
87 -> 86 [label="[((unsigned int)((smain.b)[1])) != EMPTY]"]
87 -> 78 [label="[!(((unsigned int)((smain.b)[1])) != EMPTY)]"]
86 -> 85 [label="[((unsigned int)((smain.b)[2])) != EMPTY]"]
86 -> 78 [label="[!(((unsigned int)((smain.b)[2])) != EMPTY)]"]
85 -> 84 [label="[((unsigned int)((smain.b)[3])) != EMPTY]"]
85 -> 78 [label="[!(((unsigned int)((smain.b)[3])) != EMPTY)]"]
84 -> 83 [label="[((unsigned int)((smain.b)[4])) != EMPTY]"]
84 -> 78 [label="[!(((unsigned int)((smain.b)[4])) != EMPTY)]"]
83 -> 82 [label="[((unsigned int)((smain.b)[5])) != EMPTY]"]
83 -> 78 [label="[!(((unsigned int)((smain.b)[5])) != EMPTY)]"]
82 -> 81 [label="[((unsigned int)((smain.b)[6])) != EMPTY]"]
82 -> 78 [label="[!(((unsigned int)((smain.b)[6])) != EMPTY)]"]
81 -> 80 [label="[((unsigned int)((smain.b)[7])) != EMPTY]"]
81 -> 78 [label="[!(((unsigned int)((smain.b)[7])) != EMPTY)]"]
80 -> 77 [label="[((unsigned int)((smain.b)[8])) != EMPTY]"]
80 -> 78 [label="[!(((unsigned int)((smain.b)[8])) != EMPTY)]"]
65 -> 69 [label="[((unsigned int)((smain.b)[0])) == O]"]
65 -> 68 [label="[!(((unsigned int)((smain.b)[0])) == O)]"]
68 -> 70 [label="[((unsigned int)((smain.b)[2])) == O]"]
68 -> 67 [label="[!(((unsigned int)((smain.b)[2])) == O)]"]
67 -> 71 [label="[((unsigned int)((smain.b)[1])) == O]"]
67 -> 66 [label="[!(((unsigned int)((smain.b)[1])) == O)]"]
66 -> 72 [label="[((unsigned int)((smain.b)[3])) == O]"]
66 -> 55 [label="[!(((unsigned int)((smain.b)[3])) == O)]"]
72 -> 54 [label="[((unsigned int)((smain.b)[5])) == O]"]
72 -> 55 [label="[!(((unsigned int)((smain.b)[5])) == O)]"]
54 -> 73 [label="__CPAchecker_TMP_3 = 1;"]
71 -> 54 [label="[((unsigned int)((smain.b)[7])) == O]"]
71 -> 66 [label="[!(((unsigned int)((smain.b)[7])) == O)]"]
70 -> 54 [label="[((unsigned int)((smain.b)[6])) == O]"]
70 -> 67 [label="[!(((unsigned int)((smain.b)[6])) == O)]"]
69 -> 54 [label="[((unsigned int)((smain.b)[8])) == O]"]
69 -> 68 [label="[!(((unsigned int)((smain.b)[8])) == O)]"]
61 -> 63 [label="[((unsigned int)((smain.b)[7])) == O]"]
61 -> 62 [label="[!(((unsigned int)((smain.b)[7])) == O)]"]
62 -> 64 [label="[((unsigned int)((smain.b)[5])) == O]"]
62 -> 53 [label="[!(((unsigned int)((smain.b)[5])) == O)]"]
64 -> 54 [label="[((unsigned int)((smain.b)[2])) == O]"]
64 -> 53 [label="[!(((unsigned int)((smain.b)[2])) == O)]"]
63 -> 54 [label="[((unsigned int)((smain.b)[6])) == O]"]
63 -> 62 [label="[!(((unsigned int)((smain.b)[6])) == O)]"]
57 -> 59 [label="[((unsigned int)((smain.b)[1])) == O]"]
57 -> 58 [label="[!(((unsigned int)((smain.b)[1])) == O)]"]
58 -> 60 [label="[((unsigned int)((smain.b)[3])) == O]"]
58 -> 56 [label="[!(((unsigned int)((smain.b)[3])) == O)]"]
60 -> 54 [label="[((unsigned int)((smain.b)[6])) == O]"]
60 -> 56 [label="[!(((unsigned int)((smain.b)[6])) == O)]"]
59 -> 54 [label="[((unsigned int)((smain.b)[2])) == O]"]
59 -> 58 [label="[!(((unsigned int)((smain.b)[2])) == O)]"]
42 -> 46 [label="[((unsigned int)((smain.b)[0])) == X]"]
42 -> 45 [label="[!(((unsigned int)((smain.b)[0])) == X)]"]
45 -> 47 [label="[((unsigned int)((smain.b)[2])) == X]"]
45 -> 44 [label="[!(((unsigned int)((smain.b)[2])) == X)]"]
44 -> 48 [label="[((unsigned int)((smain.b)[1])) == X]"]
44 -> 43 [label="[!(((unsigned int)((smain.b)[1])) == X)]"]
43 -> 49 [label="[((unsigned int)((smain.b)[3])) == X]"]
43 -> 32 [label="[!(((unsigned int)((smain.b)[3])) == X)]"]
49 -> 31 [label="[((unsigned int)((smain.b)[5])) == X]"]
49 -> 32 [label="[!(((unsigned int)((smain.b)[5])) == X)]"]
31 -> 50 [label="__CPAchecker_TMP_2 = 1;"]
48 -> 31 [label="[((unsigned int)((smain.b)[7])) == X]"]
48 -> 43 [label="[!(((unsigned int)((smain.b)[7])) == X)]"]
47 -> 31 [label="[((unsigned int)((smain.b)[6])) == X]"]
47 -> 44 [label="[!(((unsigned int)((smain.b)[6])) == X)]"]
46 -> 31 [label="[((unsigned int)((smain.b)[8])) == X]"]
46 -> 45 [label="[!(((unsigned int)((smain.b)[8])) == X)]"]
38 -> 40 [label="[((unsigned int)((smain.b)[7])) == X]"]
38 -> 39 [label="[!(((unsigned int)((smain.b)[7])) == X)]"]
39 -> 41 [label="[((unsigned int)((smain.b)[5])) == X]"]
39 -> 30 [label="[!(((unsigned int)((smain.b)[5])) == X)]"]
41 -> 31 [label="[((unsigned int)((smain.b)[2])) == X]"]
41 -> 30 [label="[!(((unsigned int)((smain.b)[2])) == X)]"]
40 -> 31 [label="[((unsigned int)((smain.b)[6])) == X]"]
40 -> 39 [label="[!(((unsigned int)((smain.b)[6])) == X)]"]
34 -> 36 [label="[((unsigned int)((smain.b)[1])) == X]"]
34 -> 35 [label="[!(((unsigned int)((smain.b)[1])) == X)]"]
35 -> 37 [label="[((unsigned int)((smain.b)[3])) == X]"]
35 -> 33 [label="[!(((unsigned int)((smain.b)[3])) == X)]"]
37 -> 31 [label="[((unsigned int)((smain.b)[6])) == X]"]
37 -> 33 [label="[!(((unsigned int)((smain.b)[6])) == X)]"]
36 -> 31 [label="[((unsigned int)((smain.b)[2])) == X]"]
36 -> 35 [label="[!(((unsigned int)((smain.b)[2])) == X)]"]
22 -> 21 [label="[((smain.b)[smain.move]) == EMPTY]"]
22 -> 20 [label="[!(((smain.b)[smain.move]) == EMPTY)]"]
21 -> 23 [label="(smain.b)[smain.move] = smain.turn;"]
23 -> 24 [label="int __CPAchecker_TMP_1;"]
24 -> 25 [label="[((unsigned int)(smain.turn)) == X]"]
24 -> 26 [label="[!(((unsigned int)(smain.turn)) == X)]"]
26 -> 27 [label="__CPAchecker_TMP_1 = (unsigned char)X;"]
27 -> 28 [label="smain.turn = __CPAchecker_TMP_1;"]
28 -> 20 [label=""]
25 -> 27 [label="__CPAchecker_TMP_1 = (unsigned char)O;"]
16 -> 18 [label="__CPAchecker_TMP_0 = imove;"]}
97 -> 1 [label="initial()"]
0 -> 98 [label="Return edge from initial to main"]
102 -> 13 [label="tictactoe(clock, imove, &winX, &winO, &finished)"]
12 -> 103 [label="Return edge from tictactoe to main"]}