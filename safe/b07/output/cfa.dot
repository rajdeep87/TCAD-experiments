digraph CFA {
144 [shape="circle" label="N144\n220"]
160 [shape="circle" label="N160\n219"]
161 [shape="circle" label="N161\n218"]
162 [shape="circle" label="N162\n217"]
163 [shape="circle" label="N163\n216"]
164 [shape="circle" label="N164\n215"]
165 [shape="circle" label="N165\n214"]
166 [shape="circle" label="N166\n213"]
167 [shape="circle" label="N167\n212"]
168 [shape="circle" label="N168\n211"]
169 [shape="circle" label="N169\n210"]
170 [shape="circle" label="N170\n209"]
171 [shape="circle" label="N171\n208"]
172 [shape="circle" label="N172\n207"]
173 [shape="circle" label="N173\n206"]
174 [shape="circle" label="N174\n205"]
175 [shape="circle" label="N175\n204"]
176 [shape="circle" label="N176\n203"]
177 [shape="circle" label="N177\n202"]
178 [shape="circle" label="N178\n201"]
179 [shape="circle" label="N179\n200"]
180 [shape="circle" label="N180\n199"]
181 [shape="circle" label="N181\n198"]
182 [shape="circle" label="N182\n197"]
183 [shape="circle" label="N183\n196"]
184 [shape="circle" label="N184\n195"]
185 [shape="circle" label="N185\n194"]
186 [shape="circle" label="N186\n193"]
187 [shape="circle" label="N187\n192"]
188 [shape="circle" label="N188\n191"]
189 [shape="circle" label="N189\n190"]
190 [shape="circle" label="N190\n189"]
191 [shape="circle" label="N191\n188"]
192 [shape="circle" label="N192\n187"]
193 [shape="circle" label="N193\n186"]
194 [shape="circle" label="N194\n185"]
195 [shape="circle" label="N195\n184"]
196 [shape="circle" label="N196\n183"]
197 [shape="circle" label="N197\n182"]
198 [shape="circle" label="N198\n181"]
199 [shape="circle" label="N199\n180"]
200 [shape="circle" label="N200\n179"]
201 [shape="circle" label="N201\n178"]
202 [shape="circle" label="N202\n177"]
203 [shape="circle" label="N203\n176"]
204 [shape="circle" label="N204\n175"]
205 [shape="circle" label="N205\n174"]
206 [shape="circle" label="N206\n173"]
207 [shape="circle" label="N207\n172"]
208 [shape="circle" label="N208\n171"]
209 [shape="circle" label="N209\n170"]
210 [shape="circle" label="N210\n169"]
211 [shape="circle" label="N211\n168"]
212 [shape="circle" label="N212\n167"]
213 [shape="circle" label="N213\n166"]
214 [shape="circle" label="N214\n165"]
215 [shape="circle" label="N215\n164"]
216 [shape="circle" label="N216\n163"]
217 [shape="circle" label="N217\n162"]
218 [shape="circle" label="N218\n161"]
219 [shape="circle" label="N219\n160"]
220 [shape="circle" label="N220\n159"]
221 [shape="circle" label="N221\n158"]
222 [shape="circle" label="N222\n157"]
223 [shape="circle" label="N223\n156"]
224 [shape="circle" label="N224\n155"]
225 [shape="circle" label="N225\n154"]
226 [shape="circle" label="N226\n153"]
227 [shape="circle" label="N227\n152"]
228 [shape="circle" label="N228\n151"]
229 [shape="circle" label="N229\n150"]
230 [shape="circle" label="N230\n149"]
231 [shape="circle" label="N231\n148"]
232 [shape="circle" label="N232\n147"]
233 [shape="circle" label="N233\n146"]
234 [shape="circle" label="N234\n145"]
235 [shape="circle" label="N235\n144"]
236 [shape="circle" label="N236\n143"]
237 [shape="circle" label="N237\n142"]
238 [shape="circle" label="N238\n141"]
239 [shape="circle" label="N239\n140"]
240 [shape="circle" label="N240\n139"]
241 [shape="circle" label="N241\n138"]
242 [shape="circle" label="N242\n137"]
243 [shape="circle" label="N243\n136"]
244 [shape="circle" label="N244\n135"]
245 [shape="circle" label="N245\n134"]
246 [shape="circle" label="N246\n133"]
247 [shape="circle" label="N247\n132"]
248 [shape="circle" label="N248\n131"]
249 [shape="circle" label="N249\n130"]
250 [shape="circle" label="N250\n129"]
251 [shape="circle" label="N251\n128"]
252 [shape="circle" label="N252\n127"]
253 [shape="circle" label="N253\n126"]
254 [shape="circle" label="N254\n125"]
255 [shape="circle" label="N255\n124"]
256 [shape="circle" label="N256\n123"]
257 [shape="circle" label="N257\n122"]
258 [shape="circle" label="N258\n121"]
259 [shape="circle" label="N259\n120"]
260 [shape="circle" label="N260\n119"]
261 [shape="circle" label="N261\n118"]
262 [shape="circle" label="N262\n117"]
263 [shape="circle" label="N263\n116"]
264 [shape="circle" label="N264\n115"]
265 [shape="circle" label="N265\n114"]
266 [shape="circle" label="N266\n113"]
267 [shape="circle" label="N267\n112"]
268 [shape="circle" label="N268\n111"]
269 [shape="circle" label="N269\n110"]
270 [shape="circle" label="N270\n109"]
271 [shape="circle" label="N271\n108"]
272 [shape="circle" label="N272\n107"]
273 [shape="circle" label="N273\n106"]
274 [shape="circle" label="N274\n105"]
275 [shape="circle" label="N275\n104"]
276 [shape="circle" label="N276\n103"]
277 [shape="circle" label="N277\n102"]
278 [shape="circle" label="N278\n101"]
279 [shape="circle" label="N279\n100"]
280 [shape="circle" label="N280\n99"]
281 [shape="circle" label="N281\n98"]
282 [shape="circle" label="N282\n97"]
283 [shape="circle" label="N283\n96"]
284 [shape="circle" label="N284\n95"]
285 [shape="circle" label="N285\n94"]
286 [shape="circle" label="N286\n93"]
287 [shape="circle" label="N287\n92"]
288 [shape="circle" label="N288\n91"]
289 [shape="circle" label="N289\n90"]
290 [shape="circle" label="N290\n89"]
291 [shape="circle" label="N291\n88"]
292 [shape="circle" label="N292\n87"]
293 [shape="circle" label="N293\n86"]
294 [shape="circle" label="N294\n85"]
295 [shape="circle" label="N295\n84"]
296 [shape="circle" label="N296\n83"]
297 [shape="circle" label="N297\n82"]
298 [shape="circle" label="N298\n81"]
299 [shape="circle" label="N299\n80"]
300 [shape="circle" label="N300\n79"]
301 [shape="circle" label="N301\n78"]
302 [shape="circle" label="N302\n77"]
303 [shape="circle" label="N303\n76"]
304 [shape="circle" label="N304\n75"]
305 [shape="circle" label="N305\n74"]
306 [shape="circle" label="N306\n73"]
307 [shape="circle" label="N307\n72"]
308 [shape="circle" label="N308\n71"]
309 [shape="circle" label="N309\n70"]
310 [shape="circle" label="N310\n69"]
311 [shape="circle" label="N311\n68"]
312 [shape="circle" label="N312\n67"]
313 [shape="circle" label="N313\n66"]
314 [shape="circle" label="N314\n65"]
315 [shape="circle" label="N315\n64"]
316 [shape="circle" label="N316\n63"]
317 [shape="circle" label="N317\n62"]
318 [shape="circle" label="N318\n61"]
319 [shape="circle" label="N319\n60"]
320 [shape="circle" label="N320\n59"]
321 [shape="circle" label="N321\n58"]
322 [shape="circle" label="N322\n57"]
323 [shape="circle" label="N323\n56"]
324 [shape="circle" label="N324\n55"]
325 [shape="circle" label="N325\n54"]
326 [shape="circle" label="N326\n53"]
327 [shape="circle" label="N327\n52"]
328 [shape="circle" label="N328\n51"]
329 [shape="circle" label="N329\n50"]
330 [shape="circle" label="N330\n49"]
331 [shape="circle" label="N331\n48"]
332 [shape="circle" label="N332\n47"]
333 [shape="circle" label="N333\n46"]
334 [shape="circle" label="N334\n45"]
335 [shape="circle" label="N335\n44"]
336 [shape="circle" label="N336\n43"]
337 [shape="circle" label="N337\n42"]
338 [shape="circle" label="N338\n41"]
339 [shape="circle" label="N339\n40"]
340 [shape="circle" label="N340\n39"]
341 [shape="circle" label="N341\n38"]
342 [shape="circle" label="N342\n37"]
343 [shape="circle" label="N343\n36"]
344 [shape="circle" label="N344\n35"]
345 [shape="circle" label="N345\n34"]
346 [shape="circle" label="N346\n33"]
347 [shape="circle" label="N347\n32"]
348 [shape="circle" label="N348\n31"]
349 [shape="circle" label="N349\n30"]
350 [shape="circle" label="N350\n29"]
351 [shape="circle" label="N351\n28"]
352 [shape="circle" label="N352\n27"]
353 [shape="circle" label="N353\n26"]
354 [shape="circle" label="N354\n25"]
355 [shape="circle" label="N355\n24"]
356 [shape="circle" label="N356\n23"]
357 [shape="circle" label="N357\n22"]
358 [shape="circle" label="N358\n21"]
359 [shape="circle" label="N359\n20"]
360 [shape="circle" label="N360\n19"]
361 [shape="circle" label="N361\n18"]
362 [shape="circle" label="N362\n17"]
363 [shape="circle" label="N363\n16"]
364 [shape="circle" label="N364\n15"]
365 [shape="circle" label="N365\n14"]
145 [shape="circle" label="N145\n13"]
146 [shape="circle" label="N146\n12"]
147 [shape="circle" label="N147\n11"]
148 [shape="circle" label="N148\n10"]
67 [shape="circle" label="N67\n9"]
68 [shape="circle" label="N68\n8"]
69 [shape="circle" label="N69\n7"]
70 [shape="circle" label="N70\n6"]
71 [shape="circle" label="N71\n5"]
72 [shape="circle" label="N72\n4"]
73 [shape="circle" label="N73\n3"]
74 [shape="circle" label="N74\n2"]
75 [shape="circle" label="N75\n1"]
66 [shape="circle" label="N66\n0"]
149 [shape="circle" label="N149\n9"]
150 [shape="doublecircle" label="N150\n8"]
151 [shape="circle" label="N151\n7"]
153 [shape="circle" label="N153\n6"]
77 [shape="circle" label="N77\n34"]
78 [shape="circle" label="N78\n33"]
79 [shape="circle" label="N79\n32"]
1 [shape="circle" label="N1\n50"]
2 [shape="circle" label="N2\n49"]
3 [shape="diamond" label="N3\n48"]
6 [shape="diamond" label="N6\n47"]
10 [shape="diamond" label="N10\n46"]
14 [shape="diamond" label="N14\n45"]
18 [shape="diamond" label="N18\n44"]
22 [shape="diamond" label="N22\n43"]
26 [shape="diamond" label="N26\n42"]
30 [shape="diamond" label="N30\n41"]
34 [shape="diamond" label="N34\n40"]
38 [shape="diamond" label="N38\n39"]
42 [shape="diamond" label="N42\n38"]
46 [shape="diamond" label="N46\n37"]
50 [shape="diamond" label="N50\n36"]
54 [shape="diamond" label="N54\n35"]
58 [shape="diamond" label="N58\n34"]
62 [shape="circle" label="N62\n33"]
64 [shape="circle" label="N64\n32"]
4 [shape="circle" label="N4\n1"]
0 [shape="circle" label="N0\n0"]
80 [shape="circle" label="N80\n31"]
81 [shape="diamond" label="N81\n30"]
85 [shape="diamond" label="N85\n29"]
89 [shape="diamond" label="N89\n28"]
100 [shape="diamond" label="N100\n27"]
105 [shape="diamond" label="N105\n26"]
111 [shape="circle" label="N111\n25"]
82 [shape="circle" label="N82\n2"]
142 [shape="circle" label="N142\n1"]
76 [shape="circle" label="N76\n0"]
154 [shape="circle" label="N154\n5"]
155 [shape="diamond" label="N155\n4"]
157 [shape="circle" label="N157\n3"]
158 [shape="circle" label="N158\n1"]
159 [shape="circle" label="N159\n0"]
156 [shape="circle" label="N156\n2"]
110 [shape="circle" label="N110\n24"]
112 [shape="circle" label="N112\n23"]
113 [shape="circle" label="N113\n22"]
114 [shape="circle" label="N114\n21"]
104 [shape="circle" label="N104\n20"]
106 [shape="circle" label="N106\n19"]
107 [shape="circle" label="N107\n18"]
108 [shape="circle" label="N108\n17"]
99 [shape="circle" label="N99\n16"]
101 [shape="circle" label="N101\n15"]
102 [shape="circle" label="N102\n14"]
88 [shape="diamond" label="N88\n13"]
91 [shape="circle" label="N91\n12"]
93 [shape="circle" label="N93\n11"]
94 [shape="circle" label="N94\n10"]
95 [shape="circle" label="N95\n9"]
90 [shape="circle" label="N90\n5"]
92 [shape="circle" label="N92\n8"]
96 [shape="circle" label="N96\n7"]
97 [shape="circle" label="N97\n6"]
84 [shape="circle" label="N84\n4"]
86 [shape="circle" label="N86\n3"]
61 [shape="circle" label="N61\n31"]
63 [shape="circle" label="N63\n30"]
57 [shape="circle" label="N57\n29"]
59 [shape="circle" label="N59\n28"]
53 [shape="circle" label="N53\n27"]
55 [shape="circle" label="N55\n26"]
49 [shape="circle" label="N49\n25"]
51 [shape="circle" label="N51\n24"]
45 [shape="circle" label="N45\n23"]
47 [shape="circle" label="N47\n22"]
41 [shape="circle" label="N41\n21"]
43 [shape="circle" label="N43\n20"]
37 [shape="circle" label="N37\n19"]
39 [shape="circle" label="N39\n18"]
33 [shape="circle" label="N33\n17"]
35 [shape="circle" label="N35\n16"]
29 [shape="circle" label="N29\n15"]
31 [shape="circle" label="N31\n14"]
25 [shape="circle" label="N25\n13"]
27 [shape="circle" label="N27\n12"]
21 [shape="circle" label="N21\n11"]
23 [shape="circle" label="N23\n10"]
17 [shape="circle" label="N17\n9"]
19 [shape="circle" label="N19\n8"]
13 [shape="circle" label="N13\n7"]
15 [shape="circle" label="N15\n6"]
9 [shape="circle" label="N9\n5"]
11 [shape="circle" label="N11\n4"]
5 [shape="circle" label="N5\n3"]
7 [shape="circle" label="N7\n2"]
node [shape="circle"]
subgraph cluster_b07 {
label="b07()"
77 -> 78 [label="Function start dummy edge"]
78 -> 79 [label="unsigned char mem_mar;"]
79 -> 80 [label="mem_mar = mems(sb.mar);" style="dotted" arrowhead="empty"]
80 -> 81 [label="switch (sb.stato)"]
81 -> 84 [label="[(sb.stato) == S_RESET]"]
81 -> 85 [label="[!((sb.stato) == S_RESET)]"]
85 -> 88 [label="[(sb.stato) == S_START]"]
85 -> 89 [label="[!((sb.stato) == S_START)]"]
89 -> 99 [label="[(sb.stato) == S_LOAD_X]"]
89 -> 100 [label="[!((sb.stato) == S_LOAD_X)]"]
100 -> 104 [label="[(sb.stato) == S_UPDATE_MAR]"]
100 -> 105 [label="[!((sb.stato) == S_UPDATE_MAR)]"]
105 -> 110 [label="[(sb.stato) == S_LOAD_Y]"]
105 -> 111 [label="[!((sb.stato) == S_LOAD_Y)]"]
111 -> 82 [label=""]
82 -> 142 [label="*PUNTI_RETTA = sb.PUNTI_RETTA;"]
142 -> 76 [label="default return"]
110 -> 112 [label="sb.y = mem_mar & 127;"]
112 -> 113 [label="sb.x = ((0 | ((sb.x) & 127)) & 255) + ((0 | ((sb.t) & 127)) & 255);"]
113 -> 114 [label="sb.stato = S_CALC_RETTA;"]
114 -> 82 [label="break"]
104 -> 106 [label="sb.mar = (sb.mar) + 1;"]
106 -> 107 [label="sb.t = ((((sb.x) & 63) << 1) | 0) & 127;"]
107 -> 108 [label="sb.stato = S_LOAD_Y;"]
108 -> 82 [label="break"]
99 -> 101 [label="sb.x = mem_mar;"]
101 -> 102 [label="sb.stato = S_UPDATE_MAR;"]
102 -> 82 [label="break"]
88 -> 92 [label="[START == 0]"]
88 -> 91 [label="[!(START == 0)]"]
91 -> 93 [label="sb.cont = 0;"]
93 -> 94 [label="sb.mar = 0;"]
94 -> 95 [label="sb.stato = S_LOAD_X;"]
95 -> 90 [label=""]
90 -> 82 [label="break"]
92 -> 96 [label="sb.stato = S_START;"]
96 -> 97 [label="sb.PUNTI_RETTA = 0;"]
97 -> 90 [label=""]
84 -> 86 [label="sb.stato = S_START;"]
86 -> 82 [label="break"]}
subgraph cluster_initial {
label="initial()"
67 -> 68 [label="Function start dummy edge"]
68 -> 69 [label="sb.stato = S_RESET;"]
69 -> 70 [label="sb.PUNTI_RETTA = 0;"]
70 -> 71 [label="sb.cont = 0;"]
71 -> 72 [label="sb.mar = 0;"]
72 -> 73 [label="sb.x = 0;"]
73 -> 74 [label="sb.y = 0;"]
74 -> 75 [label="sb.t = 0;"]
75 -> 66 [label="default return"]}
subgraph cluster_main {
label="main()"
144 -> 160 [label="INIT GLOBAL VARS"]
160 -> 161 [label="typedef unsigned long int size_t;"]
161 -> 162 [label="typedef unsigned char __u_char;"]
162 -> 163 [label="typedef unsigned short int __u_short;"]
163 -> 164 [label="typedef unsigned int __u_int;"]
164 -> 165 [label="typedef unsigned long int __u_long;"]
165 -> 166 [label="typedef signed char __int8_t;"]
166 -> 167 [label="typedef unsigned char __uint8_t;"]
167 -> 168 [label="typedef signed short int __int16_t;"]
168 -> 169 [label="typedef unsigned short int __uint16_t;"]
169 -> 170 [label="typedef signed int __int32_t;"]
170 -> 171 [label="typedef unsigned int __uint32_t;"]
171 -> 172 [label="typedef signed long int __int64_t;"]
172 -> 173 [label="typedef unsigned long int __uint64_t;"]
173 -> 174 [label="typedef long int __quad_t;"]
174 -> 175 [label="typedef unsigned long int __u_quad_t;"]
175 -> 176 [label="typedef unsigned long int __dev_t;"]
176 -> 177 [label="typedef unsigned int __uid_t;"]
177 -> 178 [label="typedef unsigned int __gid_t;"]
178 -> 179 [label="typedef unsigned long int __ino_t;"]
179 -> 180 [label="typedef unsigned long int __ino64_t;"]
180 -> 181 [label="typedef unsigned int __mode_t;"]
181 -> 182 [label="typedef unsigned long int __nlink_t;"]
182 -> 183 [label="typedef long int __off_t;"]
183 -> 184 [label="typedef long int __off64_t;"]
184 -> 185 [label="typedef int __pid_t;"]
185 -> 186 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
186 -> 187 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
187 -> 188 [label="typedef long int __clock_t;"]
188 -> 189 [label="typedef unsigned long int __rlim_t;"]
189 -> 190 [label="typedef unsigned long int __rlim64_t;"]
190 -> 191 [label="typedef unsigned int __id_t;"]
191 -> 192 [label="typedef long int __time_t;"]
192 -> 193 [label="typedef unsigned int __useconds_t;"]
193 -> 194 [label="typedef long int __suseconds_t;"]
194 -> 195 [label="typedef int __daddr_t;"]
195 -> 196 [label="typedef int __key_t;"]
196 -> 197 [label="typedef int __clockid_t;"]
197 -> 198 [label="typedef void *__timer_t;"]
198 -> 199 [label="typedef long int __blksize_t;"]
199 -> 200 [label="typedef long int __blkcnt_t;"]
200 -> 201 [label="typedef long int __blkcnt64_t;"]
201 -> 202 [label="typedef unsigned long int __fsblkcnt_t;"]
202 -> 203 [label="typedef unsigned long int __fsblkcnt64_t;"]
203 -> 204 [label="typedef unsigned long int __fsfilcnt_t;"]
204 -> 205 [label="typedef unsigned long int __fsfilcnt64_t;"]
205 -> 206 [label="typedef long int __fsword_t;"]
206 -> 207 [label="typedef long int __ssize_t;"]
207 -> 208 [label="typedef long int __syscall_slong_t;"]
208 -> 209 [label="typedef unsigned long int __syscall_ulong_t;"]
209 -> 210 [label="typedef __off64_t __loff_t;"]
210 -> 211 [label="typedef __quad_t *__qaddr_t;"]
211 -> 212 [label="typedef char *__caddr_t;"]
212 -> 213 [label="typedef long int __intptr_t;"]
213 -> 214 [label="typedef unsigned int __socklen_t;"]
214 -> 215 [label="struct _IO_FILE ;"]
215 -> 216 [label="typedef struct _IO_FILE FILE;"]
216 -> 217 [label="typedef struct _IO_FILE __FILE;"]
217 -> 218 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
218 -> 219 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
219 -> 220 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
220 -> 221 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
221 -> 222 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
222 -> 223 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
223 -> 224 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
224 -> 225 [label="typedef __builtin_va_list __gnuc_va_list;"]
225 -> 226 [label="struct _IO_jump_t ;"]
226 -> 227 [label="typedef void _IO_lock_t;"]
227 -> 228 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
228 -> 229 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
229 -> 230 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
230 -> 231 [label="typedef struct _IO_FILE _IO_FILE;"]
231 -> 232 [label="struct _IO_FILE_plus ;"]
232 -> 233 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
233 -> 234 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
234 -> 235 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
235 -> 236 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
236 -> 237 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
237 -> 238 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
238 -> 239 [label="typedef int __io_close_fn(void *__cookie);"]
239 -> 240 [label="int __underflow(_IO_FILE *);"]
240 -> 241 [label="int __uflow(_IO_FILE *);"]
241 -> 242 [label="int __overflow(_IO_FILE *, int);"]
242 -> 243 [label="int _IO_getc(_IO_FILE *__fp);"]
243 -> 244 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
244 -> 245 [label="int _IO_feof(_IO_FILE *__fp);"]
245 -> 246 [label="int _IO_ferror(_IO_FILE *__fp);"]
246 -> 247 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
247 -> 248 [label="void _IO_flockfile(_IO_FILE *);"]
248 -> 249 [label="void _IO_funlockfile(_IO_FILE *);"]
249 -> 250 [label="int _IO_ftrylockfile(_IO_FILE *);"]
250 -> 251 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
251 -> 252 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
252 -> 253 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
253 -> 254 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
254 -> 255 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
255 -> 256 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
256 -> 257 [label="void _IO_free_backup_area(_IO_FILE *);"]
257 -> 258 [label="typedef __gnuc_va_list va_list;"]
258 -> 259 [label="typedef __off_t off_t;"]
259 -> 260 [label="typedef __ssize_t ssize_t;"]
260 -> 261 [label="typedef _G_fpos_t fpos_t;"]
261 -> 262 [label="extern struct _IO_FILE *stdin;"]
262 -> 263 [label="extern struct _IO_FILE *stdout;"]
263 -> 264 [label="extern struct _IO_FILE *stderr;"]
264 -> 265 [label="int remove(const char *__filename);"]
265 -> 266 [label="int rename(const char *__old, const char *__new);"]
266 -> 267 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
267 -> 268 [label="FILE * tmpfile();"]
268 -> 269 [label="char * tmpnam(char *__s);"]
269 -> 270 [label="char * tmpnam_r(char *__s);"]
270 -> 271 [label="char * tempnam(const char *__dir, const char *__pfx);"]
271 -> 272 [label="int fclose(FILE *__stream);"]
272 -> 273 [label="int fflush(FILE *__stream);"]
273 -> 274 [label="int fflush_unlocked(FILE *__stream);"]
274 -> 275 [label="FILE * fopen(const char *__filename, const char *__modes);"]
275 -> 276 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
276 -> 277 [label="FILE * fdopen(int __fd, const char *__modes);"]
277 -> 278 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
278 -> 279 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
279 -> 280 [label="void setbuf(FILE *__stream, char *__buf);"]
280 -> 281 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
281 -> 282 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
282 -> 283 [label="void setlinebuf(FILE *__stream);"]
283 -> 284 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
284 -> 285 [label="int printf(const char *__format, ...);"]
285 -> 286 [label="int sprintf(char *__s, const char *__format, ...);"]
286 -> 287 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
287 -> 288 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
288 -> 289 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
289 -> 290 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
290 -> 291 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
291 -> 292 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
292 -> 293 [label="int dprintf(int __fd, const char *__fmt, ...);"]
293 -> 294 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
294 -> 295 [label="int scanf(const char *__format, ...);"]
295 -> 296 [label="int sscanf(const char *__s, const char *__format, ...);"]
296 -> 297 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
297 -> 298 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
298 -> 299 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
299 -> 300 [label="int fgetc(FILE *__stream);"]
300 -> 301 [label="int getc(FILE *__stream);"]
301 -> 302 [label="int getchar();"]
302 -> 303 [label="int getc_unlocked(FILE *__stream);"]
303 -> 304 [label="int getchar_unlocked();"]
304 -> 305 [label="int fgetc_unlocked(FILE *__stream);"]
305 -> 306 [label="int fputc(int __c, FILE *__stream);"]
306 -> 307 [label="int putc(int __c, FILE *__stream);"]
307 -> 308 [label="int putchar(int __c);"]
308 -> 309 [label="int fputc_unlocked(int __c, FILE *__stream);"]
309 -> 310 [label="int putc_unlocked(int __c, FILE *__stream);"]
310 -> 311 [label="int putchar_unlocked(int __c);"]
311 -> 312 [label="int getw(FILE *__stream);"]
312 -> 313 [label="int putw(int __w, FILE *__stream);"]
313 -> 314 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
314 -> 315 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
315 -> 316 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
316 -> 317 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
317 -> 318 [label="int fputs(const char *__s, FILE *__stream);"]
318 -> 319 [label="int puts(const char *__s);"]
319 -> 320 [label="int ungetc(int __c, FILE *__stream);"]
320 -> 321 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
321 -> 322 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
322 -> 323 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
323 -> 324 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
324 -> 325 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
325 -> 326 [label="long int ftell(FILE *__stream);"]
326 -> 327 [label="void rewind(FILE *__stream);"]
327 -> 328 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
328 -> 329 [label="__off_t  ftello(FILE *__stream);"]
329 -> 330 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
330 -> 331 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
331 -> 332 [label="void clearerr(FILE *__stream);"]
332 -> 333 [label="int feof(FILE *__stream);"]
333 -> 334 [label="int ferror(FILE *__stream);"]
334 -> 335 [label="void clearerr_unlocked(FILE *__stream);"]
335 -> 336 [label="int feof_unlocked(FILE *__stream);"]
336 -> 337 [label="int ferror_unlocked(FILE *__stream);"]
337 -> 338 [label="void perror(const char *__s);"]
338 -> 339 [label="extern int sys_nerr;"]
339 -> 340 [label="extern const const char *sys_errlist[];"]
340 -> 341 [label="int fileno(FILE *__stream);"]
341 -> 342 [label="int fileno_unlocked(FILE *__stream);"]
342 -> 343 [label="FILE * popen(const char *__command, const char *__modes);"]
343 -> 344 [label="int pclose(FILE *__stream);"]
344 -> 345 [label="char * ctermid(char *__s);"]
345 -> 346 [label="void flockfile(FILE *__stream);"]
346 -> 347 [label="int ftrylockfile(FILE *__stream);"]
347 -> 348 [label="void funlockfile(FILE *__stream);"]
348 -> 349 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
349 -> 350 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
350 -> 351 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
351 -> 352 [label="_Bool nondet_bool();"]
352 -> 353 [label="int S_RESET = 0;"]
353 -> 354 [label="int S_START = 1;"]
354 -> 355 [label="int S_LOAD_X = 2;"]
355 -> 356 [label="int S_UPDATE_MAR = 3;"]
356 -> 357 [label="int S_LOAD_Y = 4;"]
357 -> 358 [label="int S_CALC_RETTA = 5;"]
358 -> 359 [label="int S_INCREMENTA = 6;"]
359 -> 360 [label="struct state_elements_b07 {   unsigned char PUNTI_RETTA;   _Bool stato;   unsigned char cont;   unsigned char x;   unsigned char y;   unsigned char t;   unsigned char mar; } ;"]
360 -> 361 [label="struct state_elements_b07 sb = {  };"]
361 -> 362 [label="unsigned char mems(unsigned char a);"]
362 -> 363 [label="void initial();"]
363 -> 364 [label="void b07(unsigned char *PUNTI_RETTA, _Bool START, _Bool clock);"]
364 -> 365 [label="void main();"]
365 -> 145 [label="Function start dummy edge"]
145 -> 146 [label="unsigned char PUNTI_RETTA;"]
146 -> 147 [label="_Bool START;"]
147 -> 148 [label="_Bool clock;"]
148 -> 149 [label="initial();" style="dotted" arrowhead="empty"]
149 -> 150 [label="while"]
150 -> 151 [label=""]
151 -> 153 [label="START = nondet_bool();"]
153 -> 154 [label="b07(&PUNTI_RETTA, START, clock);" style="dotted" arrowhead="empty"]
154 -> 155 [label="void __CPAchecker_TMP_0;"]
155 -> 156 [label="[((sb.x) & 255) != 148]"]
155 -> 157 [label="[!(((sb.x) & 255) != 148)]"]
157 -> 158 [label="__assert_fail(\"(sb.x&0xFF)!=148\", \"main.c\", 135, \"__PRETTY_FUNCTION__\");"]
158 -> 159 [label="0;"]
159 -> 150 [label=""]
156 -> 158 [label="0;"]}
subgraph cluster_mems {
label="mems()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="unsigned char mem;"]
3 -> 5 [label="[a == 0]"]
3 -> 6 [label="[!(a == 0)]"]
6 -> 9 [label="[a == 1]"]
6 -> 10 [label="[!(a == 1)]"]
10 -> 13 [label="[a == 2]"]
10 -> 14 [label="[!(a == 2)]"]
14 -> 17 [label="[a == 3]"]
14 -> 18 [label="[!(a == 3)]"]
18 -> 21 [label="[a == 4]"]
18 -> 22 [label="[!(a == 4)]"]
22 -> 25 [label="[a == 5]"]
22 -> 26 [label="[!(a == 5)]"]
26 -> 29 [label="[a == 6]"]
26 -> 30 [label="[!(a == 6)]"]
30 -> 33 [label="[a == 7]"]
30 -> 34 [label="[!(a == 7)]"]
34 -> 37 [label="[a == 8]"]
34 -> 38 [label="[!(a == 8)]"]
38 -> 41 [label="[a == 9]"]
38 -> 42 [label="[!(a == 9)]"]
42 -> 45 [label="[a == 10]"]
42 -> 46 [label="[!(a == 10)]"]
46 -> 49 [label="[a == 11]"]
46 -> 50 [label="[!(a == 11)]"]
50 -> 53 [label="[a == 12]"]
50 -> 54 [label="[!(a == 12)]"]
54 -> 57 [label="[a == 13]"]
54 -> 58 [label="[!(a == 13)]"]
58 -> 61 [label="[a == 14]"]
58 -> 62 [label="[!(a == 14)]"]
62 -> 64 [label="mem = 2;"]
64 -> 4 [label=""]
4 -> 0 [label="return mem;"]
61 -> 63 [label="mem = 0;"]
63 -> 4 [label=""]
57 -> 59 [label="mem = 2;"]
59 -> 4 [label=""]
53 -> 55 [label="mem = 0;"]
55 -> 4 [label=""]
49 -> 51 [label="mem = 5;"]
51 -> 4 [label=""]
45 -> 47 [label="mem = 255;"]
47 -> 4 [label=""]
41 -> 43 [label="mem = 2;"]
43 -> 4 [label=""]
37 -> 39 [label="mem = 0;"]
39 -> 4 [label=""]
33 -> 35 [label="mem = 0;"]
35 -> 4 [label=""]
29 -> 31 [label="mem = 0;"]
31 -> 4 [label=""]
25 -> 27 [label="mem = 2;"]
27 -> 4 [label=""]
21 -> 23 [label="mem = 0;"]
23 -> 4 [label=""]
17 -> 19 [label="mem = 0;"]
19 -> 4 [label=""]
13 -> 15 [label="mem = 0;"]
15 -> 4 [label=""]
9 -> 11 [label="mem = 255;"]
11 -> 4 [label=""]
5 -> 7 [label="mem = 1;"]
7 -> 4 [label=""]}
148 -> 67 [label="initial()"]
66 -> 149 [label="Return edge from initial to main"]
153 -> 77 [label="b07(&PUNTI_RETTA, START, clock)"]
79 -> 1 [label="mems(sb.mar)"]
0 -> 80 [label="Return edge from mems to b07"]
76 -> 154 [label="Return edge from b07 to main"]}