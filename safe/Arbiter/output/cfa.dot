digraph CFA {
92 [shape="circle" label="N92\n248"]
136 [shape="circle" label="N136\n247"]
137 [shape="circle" label="N137\n246"]
138 [shape="circle" label="N138\n245"]
139 [shape="circle" label="N139\n244"]
140 [shape="circle" label="N140\n243"]
141 [shape="circle" label="N141\n242"]
142 [shape="circle" label="N142\n241"]
143 [shape="circle" label="N143\n240"]
144 [shape="circle" label="N144\n239"]
145 [shape="circle" label="N145\n238"]
146 [shape="circle" label="N146\n237"]
147 [shape="circle" label="N147\n236"]
148 [shape="circle" label="N148\n235"]
149 [shape="circle" label="N149\n234"]
150 [shape="circle" label="N150\n233"]
151 [shape="circle" label="N151\n232"]
152 [shape="circle" label="N152\n231"]
153 [shape="circle" label="N153\n230"]
154 [shape="circle" label="N154\n229"]
155 [shape="circle" label="N155\n228"]
156 [shape="circle" label="N156\n227"]
157 [shape="circle" label="N157\n226"]
158 [shape="circle" label="N158\n225"]
159 [shape="circle" label="N159\n224"]
160 [shape="circle" label="N160\n223"]
161 [shape="circle" label="N161\n222"]
162 [shape="circle" label="N162\n221"]
163 [shape="circle" label="N163\n220"]
164 [shape="circle" label="N164\n219"]
165 [shape="circle" label="N165\n218"]
166 [shape="circle" label="N166\n217"]
167 [shape="circle" label="N167\n216"]
168 [shape="circle" label="N168\n215"]
169 [shape="circle" label="N169\n214"]
170 [shape="circle" label="N170\n213"]
171 [shape="circle" label="N171\n212"]
172 [shape="circle" label="N172\n211"]
173 [shape="circle" label="N173\n210"]
174 [shape="circle" label="N174\n209"]
175 [shape="circle" label="N175\n208"]
176 [shape="circle" label="N176\n207"]
177 [shape="circle" label="N177\n206"]
178 [shape="circle" label="N178\n205"]
179 [shape="circle" label="N179\n204"]
180 [shape="circle" label="N180\n203"]
181 [shape="circle" label="N181\n202"]
182 [shape="circle" label="N182\n201"]
183 [shape="circle" label="N183\n200"]
184 [shape="circle" label="N184\n199"]
185 [shape="circle" label="N185\n198"]
186 [shape="circle" label="N186\n197"]
187 [shape="circle" label="N187\n196"]
188 [shape="circle" label="N188\n195"]
189 [shape="circle" label="N189\n194"]
190 [shape="circle" label="N190\n193"]
191 [shape="circle" label="N191\n192"]
192 [shape="circle" label="N192\n191"]
193 [shape="circle" label="N193\n190"]
194 [shape="circle" label="N194\n189"]
195 [shape="circle" label="N195\n188"]
196 [shape="circle" label="N196\n187"]
197 [shape="circle" label="N197\n186"]
198 [shape="circle" label="N198\n185"]
199 [shape="circle" label="N199\n184"]
200 [shape="circle" label="N200\n183"]
201 [shape="circle" label="N201\n182"]
202 [shape="circle" label="N202\n181"]
203 [shape="circle" label="N203\n180"]
204 [shape="circle" label="N204\n179"]
205 [shape="circle" label="N205\n178"]
206 [shape="circle" label="N206\n177"]
207 [shape="circle" label="N207\n176"]
208 [shape="circle" label="N208\n175"]
209 [shape="circle" label="N209\n174"]
210 [shape="circle" label="N210\n173"]
211 [shape="circle" label="N211\n172"]
212 [shape="circle" label="N212\n171"]
213 [shape="circle" label="N213\n170"]
214 [shape="circle" label="N214\n169"]
215 [shape="circle" label="N215\n168"]
216 [shape="circle" label="N216\n167"]
217 [shape="circle" label="N217\n166"]
218 [shape="circle" label="N218\n165"]
219 [shape="circle" label="N219\n164"]
220 [shape="circle" label="N220\n163"]
221 [shape="circle" label="N221\n162"]
222 [shape="circle" label="N222\n161"]
223 [shape="circle" label="N223\n160"]
224 [shape="circle" label="N224\n159"]
225 [shape="circle" label="N225\n158"]
226 [shape="circle" label="N226\n157"]
227 [shape="circle" label="N227\n156"]
228 [shape="circle" label="N228\n155"]
229 [shape="circle" label="N229\n154"]
230 [shape="circle" label="N230\n153"]
231 [shape="circle" label="N231\n152"]
232 [shape="circle" label="N232\n151"]
233 [shape="circle" label="N233\n150"]
234 [shape="circle" label="N234\n149"]
235 [shape="circle" label="N235\n148"]
236 [shape="circle" label="N236\n147"]
237 [shape="circle" label="N237\n146"]
238 [shape="circle" label="N238\n145"]
239 [shape="circle" label="N239\n144"]
240 [shape="circle" label="N240\n143"]
241 [shape="circle" label="N241\n142"]
242 [shape="circle" label="N242\n141"]
243 [shape="circle" label="N243\n140"]
244 [shape="circle" label="N244\n139"]
245 [shape="circle" label="N245\n138"]
246 [shape="circle" label="N246\n137"]
247 [shape="circle" label="N247\n136"]
248 [shape="circle" label="N248\n135"]
249 [shape="circle" label="N249\n134"]
250 [shape="circle" label="N250\n133"]
251 [shape="circle" label="N251\n132"]
252 [shape="circle" label="N252\n131"]
253 [shape="circle" label="N253\n130"]
254 [shape="circle" label="N254\n129"]
255 [shape="circle" label="N255\n128"]
256 [shape="circle" label="N256\n127"]
257 [shape="circle" label="N257\n126"]
258 [shape="circle" label="N258\n125"]
259 [shape="circle" label="N259\n124"]
260 [shape="circle" label="N260\n123"]
261 [shape="circle" label="N261\n122"]
262 [shape="circle" label="N262\n121"]
263 [shape="circle" label="N263\n120"]
264 [shape="circle" label="N264\n119"]
265 [shape="circle" label="N265\n118"]
266 [shape="circle" label="N266\n117"]
267 [shape="circle" label="N267\n116"]
268 [shape="circle" label="N268\n115"]
269 [shape="circle" label="N269\n114"]
270 [shape="circle" label="N270\n113"]
271 [shape="circle" label="N271\n112"]
272 [shape="circle" label="N272\n111"]
273 [shape="circle" label="N273\n110"]
274 [shape="circle" label="N274\n109"]
275 [shape="circle" label="N275\n108"]
276 [shape="circle" label="N276\n107"]
277 [shape="circle" label="N277\n106"]
278 [shape="circle" label="N278\n105"]
279 [shape="circle" label="N279\n104"]
280 [shape="circle" label="N280\n103"]
281 [shape="circle" label="N281\n102"]
282 [shape="circle" label="N282\n101"]
283 [shape="circle" label="N283\n100"]
284 [shape="circle" label="N284\n99"]
285 [shape="circle" label="N285\n98"]
286 [shape="circle" label="N286\n97"]
287 [shape="circle" label="N287\n96"]
288 [shape="circle" label="N288\n95"]
289 [shape="circle" label="N289\n94"]
290 [shape="circle" label="N290\n93"]
291 [shape="circle" label="N291\n92"]
292 [shape="circle" label="N292\n91"]
293 [shape="circle" label="N293\n90"]
294 [shape="circle" label="N294\n89"]
295 [shape="circle" label="N295\n88"]
296 [shape="circle" label="N296\n87"]
297 [shape="circle" label="N297\n86"]
298 [shape="circle" label="N298\n85"]
299 [shape="circle" label="N299\n84"]
300 [shape="circle" label="N300\n83"]
301 [shape="circle" label="N301\n82"]
302 [shape="circle" label="N302\n81"]
303 [shape="circle" label="N303\n80"]
304 [shape="circle" label="N304\n79"]
305 [shape="circle" label="N305\n78"]
306 [shape="circle" label="N306\n77"]
307 [shape="circle" label="N307\n76"]
308 [shape="circle" label="N308\n75"]
309 [shape="circle" label="N309\n74"]
310 [shape="circle" label="N310\n73"]
311 [shape="circle" label="N311\n72"]
312 [shape="circle" label="N312\n71"]
313 [shape="circle" label="N313\n70"]
314 [shape="circle" label="N314\n69"]
315 [shape="circle" label="N315\n68"]
316 [shape="circle" label="N316\n67"]
317 [shape="circle" label="N317\n66"]
318 [shape="circle" label="N318\n65"]
319 [shape="circle" label="N319\n64"]
320 [shape="circle" label="N320\n63"]
321 [shape="circle" label="N321\n62"]
322 [shape="circle" label="N322\n61"]
323 [shape="circle" label="N323\n60"]
324 [shape="circle" label="N324\n59"]
325 [shape="circle" label="N325\n58"]
326 [shape="circle" label="N326\n57"]
327 [shape="circle" label="N327\n56"]
328 [shape="circle" label="N328\n55"]
329 [shape="circle" label="N329\n54"]
330 [shape="circle" label="N330\n53"]
331 [shape="circle" label="N331\n52"]
332 [shape="circle" label="N332\n51"]
333 [shape="circle" label="N333\n50"]
334 [shape="circle" label="N334\n49"]
335 [shape="circle" label="N335\n48"]
336 [shape="circle" label="N336\n47"]
337 [shape="circle" label="N337\n46"]
338 [shape="circle" label="N338\n45"]
339 [shape="circle" label="N339\n44"]
340 [shape="circle" label="N340\n43"]
341 [shape="circle" label="N341\n42"]
93 [shape="circle" label="N93\n41"]
94 [shape="circle" label="N94\n40"]
95 [shape="circle" label="N95\n39"]
96 [shape="circle" label="N96\n38"]
97 [shape="circle" label="N97\n37"]
98 [shape="circle" label="N98\n36"]
99 [shape="circle" label="N99\n35"]
100 [shape="circle" label="N100\n34"]
101 [shape="circle" label="N101\n33"]
102 [shape="circle" label="N102\n32"]
103 [shape="circle" label="N103\n31"]
104 [shape="circle" label="N104\n30"]
105 [shape="circle" label="N105\n29"]
63 [shape="circle" label="N63\n4"]
64 [shape="circle" label="N64\n3"]
65 [shape="circle" label="N65\n2"]
66 [shape="circle" label="N66\n1"]
62 [shape="circle" label="N62\n0"]
106 [shape="circle" label="N106\n28"]
1 [shape="circle" label="N1\n5"]
2 [shape="circle" label="N2\n4"]
3 [shape="circle" label="N3\n3"]
4 [shape="circle" label="N4\n2"]
5 [shape="circle" label="N5\n1"]
0 [shape="circle" label="N0\n0"]
107 [shape="circle" label="N107\n27"]
39 [shape="circle" label="N39\n3"]
40 [shape="circle" label="N40\n2"]
41 [shape="circle" label="N41\n1"]
38 [shape="circle" label="N38\n0"]
108 [shape="circle" label="N108\n26"]
109 [shape="doublecircle" label="N109\n25"]
110 [shape="circle" label="N110\n24"]
68 [shape="circle" label="N68\n22"]
69 [shape="circle" label="N69\n21"]
70 [shape="diamond" label="N70\n20"]
73 [shape="diamond" label="N73\n19"]
80 [shape="diamond" label="N80\n18"]
84 [shape="circle" label="N84\n17"]
71 [shape="circle" label="N71\n2"]
90 [shape="circle" label="N90\n1"]
67 [shape="circle" label="N67\n0"]
114 [shape="circle" label="N114\n21"]
7 [shape="circle" label="N7\n30"]
8 [shape="circle" label="N8\n29"]
9 [shape="circle" label="N9\n28"]
10 [shape="diamond" label="N10\n27"]
13 [shape="diamond" label="N13\n26"]
26 [shape="diamond" label="N26\n25"]
29 [shape="circle" label="N29\n24"]
11 [shape="circle" label="N11\n3"]
36 [shape="circle" label="N36\n2"]
37 [shape="circle" label="N37\n1"]
6 [shape="circle" label="N6\n0"]
117 [shape="circle" label="N117\n18"]
43 [shape="circle" label="N43\n19"]
44 [shape="diamond" label="N44\n18"]
46 [shape="diamond" label="N46\n17"]
49 [shape="diamond" label="N49\n16"]
51 [shape="circle" label="N51\n15"]
47 [shape="diamond" label="N47\n10"]
54 [shape="circle" label="N54\n9"]
45 [shape="circle" label="N45\n6"]
57 [shape="diamond" label="N57\n5"]
58 [shape="circle" label="N58\n4"]
60 [shape="circle" label="N60\n2"]
61 [shape="circle" label="N61\n1"]
42 [shape="circle" label="N42\n0"]
118 [shape="circle" label="N118\n17"]
119 [shape="diamond" label="N119\n16"]
121 [shape="circle" label="N121\n13"]
124 [shape="circle" label="N124\n11"]
125 [shape="circle" label="N125\n10"]
126 [shape="diamond" label="N126\n9"]
130 [shape="diamond" label="N130\n7"]
127 [shape="diamond" label="N127\n5"]
129 [shape="circle" label="N129\n3"]
134 [shape="circle" label="N134\n1"]
135 [shape="circle" label="N135\n0"]
133 [shape="diamond" label="N133\n4"]
128 [shape="circle" label="N128\n2"]
132 [shape="diamond" label="N132\n6"]
131 [shape="diamond" label="N131\n8"]
123 [shape="diamond" label="N123\n15"]
120 [shape="diamond" label="N120\n14"]
122 [shape="circle" label="N122\n12"]
59 [shape="circle" label="N59\n3"]
55 [shape="circle" label="N55\n8"]
56 [shape="circle" label="N56\n7"]
52 [shape="circle" label="N52\n14"]
53 [shape="circle" label="N53\n13"]
48 [shape="circle" label="N48\n12"]
50 [shape="circle" label="N50\n11"]
116 [shape="circle" label="N116\n19"]
115 [shape="circle" label="N115\n20"]
30 [shape="diamond" label="N30\n23"]
31 [shape="circle" label="N31\n22"]
32 [shape="circle" label="N32\n21"]
33 [shape="circle" label="N33\n20"]
34 [shape="circle" label="N34\n19"]
35 [shape="circle" label="N35\n18"]
25 [shape="circle" label="N25\n17"]
27 [shape="circle" label="N27\n16"]
28 [shape="circle" label="N28\n15"]
12 [shape="diamond" label="N12\n14"]
15 [shape="diamond" label="N15\n13"]
18 [shape="circle" label="N18\n12"]
20 [shape="circle" label="N20\n11"]
21 [shape="circle" label="N21\n10"]
17 [shape="circle" label="N17\n7"]
14 [shape="circle" label="N14\n4"]
19 [shape="circle" label="N19\n9"]
22 [shape="circle" label="N22\n8"]
16 [shape="circle" label="N16\n6"]
23 [shape="circle" label="N23\n5"]
113 [shape="circle" label="N113\n22"]
112 [shape="circle" label="N112\n23"]
85 [shape="diamond" label="N85\n16"]
87 [shape="circle" label="N87\n15"]
88 [shape="circle" label="N88\n14"]
89 [shape="circle" label="N89\n13"]
86 [shape="circle" label="N86\n12"]
79 [shape="diamond" label="N79\n11"]
82 [shape="circle" label="N82\n10"]
83 [shape="circle" label="N83\n9"]
81 [shape="circle" label="N81\n8"]
72 [shape="diamond" label="N72\n7"]
75 [shape="circle" label="N75\n6"]
76 [shape="circle" label="N76\n5"]
77 [shape="circle" label="N77\n4"]
74 [shape="circle" label="N74\n3"]
node [shape="circle"]
subgraph cluster_arbiter {
label="arbiter()"
43 -> 44 [label="Function start dummy edge"]
44 -> 45 [label="[active == 0]"]
44 -> 46 [label="[!(active == 0)]"]
46 -> 48 [label="[(sarbiter.state) == A]"]
46 -> 49 [label="[!((sarbiter.state) == A)]"]
49 -> 52 [label="[(sarbiter.state) == B]"]
49 -> 51 [label="[!((sarbiter.state) == B)]"]
51 -> 47 [label=""]
47 -> 55 [label="[(sarbiter.state) == C]"]
47 -> 54 [label="[!((sarbiter.state) == C)]"]
54 -> 45 [label=""]
45 -> 57 [label="int __CPAchecker_TMP_0;"]
57 -> 59 [label="[active == 0]"]
57 -> 58 [label="[!(active == 0)]"]
58 -> 60 [label="__CPAchecker_TMP_0 = sarbiter.state;"]
60 -> 61 [label="*sel = __CPAchecker_TMP_0;"]
61 -> 42 [label="default return"]
59 -> 60 [label="__CPAchecker_TMP_0 = X;"]
55 -> 56 [label="sarbiter.state = A;"]
56 -> 45 [label=""]
52 -> 53 [label="sarbiter.state = C;"]
53 -> 47 [label=""]
48 -> 50 [label="sarbiter.state = B;"]
50 -> 47 [label=""]}
subgraph cluster_arbiter_initial {
label="arbiter_initial()"
39 -> 40 [label="Function start dummy edge"]
40 -> 41 [label="sarbiter.state = A;"]
41 -> 38 [label="default return"]}
subgraph cluster_client {
label="client()"
68 -> 69 [label="Function start dummy edge"]
69 -> 70 [label="_Bool rand_choice = 0;"]
70 -> 72 [label="[(sclient.state) == 0]"]
70 -> 73 [label="[!((sclient.state) == 0)]"]
73 -> 79 [label="[(sclient.state) == 1]"]
73 -> 80 [label="[!((sclient.state) == 1)]"]
80 -> 85 [label="[(sclient.state) == 2]"]
80 -> 84 [label="[!((sclient.state) == 2)]"]
84 -> 71 [label=""]
71 -> 90 [label="*req = sclient.req;"]
90 -> 67 [label="default return"]
85 -> 86 [label="[rand_choice == 0]"]
85 -> 87 [label="[!(rand_choice == 0)]"]
87 -> 88 [label="sclient.req = 0;"]
88 -> 89 [label="sclient.state = 0;"]
89 -> 71 [label=""]
86 -> 71 [label=""]
79 -> 81 [label="[ack == 0]"]
79 -> 82 [label="[!(ack == 0)]"]
82 -> 83 [label="sclient.state = 2;"]
83 -> 81 [label=""]
81 -> 71 [label=""]
72 -> 74 [label="[rand_choice == 0]"]
72 -> 75 [label="[!(rand_choice == 0)]"]
75 -> 76 [label="sclient.req = 1;"]
76 -> 77 [label="sclient.state = 1;"]
77 -> 74 [label=""]
74 -> 71 [label=""]}
subgraph cluster_client_initial {
label="client_initial()"
63 -> 64 [label="Function start dummy edge"]
64 -> 65 [label="sclient.state = 0;"]
65 -> 66 [label="sclient.req = 0;"]
66 -> 62 [label="default return"]}
subgraph cluster_controller {
label="controller()"
7 -> 8 [label="Function start dummy edge"]
8 -> 9 [label="_Bool is_selected;"]
9 -> 10 [label="is_selected = (sel & (3 == id)) & 3;"]
10 -> 12 [label="[(scontroller.state) == 0]"]
10 -> 13 [label="[!((scontroller.state) == 0)]"]
13 -> 25 [label="[(scontroller.state) == 1]"]
13 -> 26 [label="[!((scontroller.state) == 1)]"]
26 -> 30 [label="[(scontroller.state) == 2]"]
26 -> 29 [label="[!((scontroller.state) == 2)]"]
29 -> 11 [label=""]
11 -> 36 [label="*ack = scontroller.ack;"]
36 -> 37 [label="*pass_token = scontroller.pass_token;"]
37 -> 6 [label="default return"]
30 -> 32 [label="[req == 0]"]
30 -> 31 [label="[!(req == 0)]"]
31 -> 11 [label=""]
32 -> 33 [label="scontroller.state = 0;"]
33 -> 34 [label="scontroller.ack = 0;"]
34 -> 35 [label="scontroller.pass_token = 1;"]
35 -> 11 [label=""]
25 -> 27 [label="scontroller.state = 2;"]
27 -> 28 [label="scontroller.ack = 1;"]
28 -> 11 [label=""]
12 -> 16 [label="[is_selected == 0]"]
12 -> 15 [label="[!(is_selected == 0)]"]
15 -> 19 [label="[req == 0]"]
15 -> 18 [label="[!(req == 0)]"]
18 -> 20 [label="scontroller.state = 1;"]
20 -> 21 [label="scontroller.pass_token = 0;"]
21 -> 17 [label=""]
17 -> 14 [label=""]
14 -> 11 [label=""]
19 -> 22 [label="scontroller.pass_token = 1;"]
22 -> 17 [label=""]
16 -> 23 [label="scontroller.pass_token = 0;"]
23 -> 14 [label=""]}
subgraph cluster_controller_initial {
label="controller_initial()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="scontroller.state = 0;"]
3 -> 4 [label="scontroller.ack = 0;"]
4 -> 5 [label="scontroller.pass_token = 1;"]
5 -> 0 [label="default return"]}
subgraph cluster_main {
label="main()"
92 -> 136 [label="INIT GLOBAL VARS"]
136 -> 137 [label="typedef unsigned long int size_t;"]
137 -> 138 [label="typedef unsigned char __u_char;"]
138 -> 139 [label="typedef unsigned short int __u_short;"]
139 -> 140 [label="typedef unsigned int __u_int;"]
140 -> 141 [label="typedef unsigned long int __u_long;"]
141 -> 142 [label="typedef signed char __int8_t;"]
142 -> 143 [label="typedef unsigned char __uint8_t;"]
143 -> 144 [label="typedef signed short int __int16_t;"]
144 -> 145 [label="typedef unsigned short int __uint16_t;"]
145 -> 146 [label="typedef signed int __int32_t;"]
146 -> 147 [label="typedef unsigned int __uint32_t;"]
147 -> 148 [label="typedef signed long int __int64_t;"]
148 -> 149 [label="typedef unsigned long int __uint64_t;"]
149 -> 150 [label="typedef long int __quad_t;"]
150 -> 151 [label="typedef unsigned long int __u_quad_t;"]
151 -> 152 [label="typedef unsigned long int __dev_t;"]
152 -> 153 [label="typedef unsigned int __uid_t;"]
153 -> 154 [label="typedef unsigned int __gid_t;"]
154 -> 155 [label="typedef unsigned long int __ino_t;"]
155 -> 156 [label="typedef unsigned long int __ino64_t;"]
156 -> 157 [label="typedef unsigned int __mode_t;"]
157 -> 158 [label="typedef unsigned long int __nlink_t;"]
158 -> 159 [label="typedef long int __off_t;"]
159 -> 160 [label="typedef long int __off64_t;"]
160 -> 161 [label="typedef int __pid_t;"]
161 -> 162 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
162 -> 163 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
163 -> 164 [label="typedef long int __clock_t;"]
164 -> 165 [label="typedef unsigned long int __rlim_t;"]
165 -> 166 [label="typedef unsigned long int __rlim64_t;"]
166 -> 167 [label="typedef unsigned int __id_t;"]
167 -> 168 [label="typedef long int __time_t;"]
168 -> 169 [label="typedef unsigned int __useconds_t;"]
169 -> 170 [label="typedef long int __suseconds_t;"]
170 -> 171 [label="typedef int __daddr_t;"]
171 -> 172 [label="typedef int __key_t;"]
172 -> 173 [label="typedef int __clockid_t;"]
173 -> 174 [label="typedef void *__timer_t;"]
174 -> 175 [label="typedef long int __blksize_t;"]
175 -> 176 [label="typedef long int __blkcnt_t;"]
176 -> 177 [label="typedef long int __blkcnt64_t;"]
177 -> 178 [label="typedef unsigned long int __fsblkcnt_t;"]
178 -> 179 [label="typedef unsigned long int __fsblkcnt64_t;"]
179 -> 180 [label="typedef unsigned long int __fsfilcnt_t;"]
180 -> 181 [label="typedef unsigned long int __fsfilcnt64_t;"]
181 -> 182 [label="typedef long int __fsword_t;"]
182 -> 183 [label="typedef long int __ssize_t;"]
183 -> 184 [label="typedef long int __syscall_slong_t;"]
184 -> 185 [label="typedef unsigned long int __syscall_ulong_t;"]
185 -> 186 [label="typedef __off64_t __loff_t;"]
186 -> 187 [label="typedef __quad_t *__qaddr_t;"]
187 -> 188 [label="typedef char *__caddr_t;"]
188 -> 189 [label="typedef long int __intptr_t;"]
189 -> 190 [label="typedef unsigned int __socklen_t;"]
190 -> 191 [label="struct _IO_FILE ;"]
191 -> 192 [label="typedef struct _IO_FILE FILE;"]
192 -> 193 [label="typedef struct _IO_FILE __FILE;"]
193 -> 194 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
194 -> 195 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
195 -> 196 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
196 -> 197 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
197 -> 198 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
198 -> 199 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
199 -> 200 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
200 -> 201 [label="typedef __builtin_va_list __gnuc_va_list;"]
201 -> 202 [label="struct _IO_jump_t ;"]
202 -> 203 [label="typedef void _IO_lock_t;"]
203 -> 204 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
204 -> 205 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
205 -> 206 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
206 -> 207 [label="typedef struct _IO_FILE _IO_FILE;"]
207 -> 208 [label="struct _IO_FILE_plus ;"]
208 -> 209 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
209 -> 210 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
210 -> 211 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
211 -> 212 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
212 -> 213 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
213 -> 214 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
214 -> 215 [label="typedef int __io_close_fn(void *__cookie);"]
215 -> 216 [label="int __underflow(_IO_FILE *);"]
216 -> 217 [label="int __uflow(_IO_FILE *);"]
217 -> 218 [label="int __overflow(_IO_FILE *, int);"]
218 -> 219 [label="int _IO_getc(_IO_FILE *__fp);"]
219 -> 220 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
220 -> 221 [label="int _IO_feof(_IO_FILE *__fp);"]
221 -> 222 [label="int _IO_ferror(_IO_FILE *__fp);"]
222 -> 223 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
223 -> 224 [label="void _IO_flockfile(_IO_FILE *);"]
224 -> 225 [label="void _IO_funlockfile(_IO_FILE *);"]
225 -> 226 [label="int _IO_ftrylockfile(_IO_FILE *);"]
226 -> 227 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
227 -> 228 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
228 -> 229 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
229 -> 230 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
230 -> 231 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
231 -> 232 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
232 -> 233 [label="void _IO_free_backup_area(_IO_FILE *);"]
233 -> 234 [label="typedef __gnuc_va_list va_list;"]
234 -> 235 [label="typedef __off_t off_t;"]
235 -> 236 [label="typedef __ssize_t ssize_t;"]
236 -> 237 [label="typedef _G_fpos_t fpos_t;"]
237 -> 238 [label="extern struct _IO_FILE *stdin;"]
238 -> 239 [label="extern struct _IO_FILE *stdout;"]
239 -> 240 [label="extern struct _IO_FILE *stderr;"]
240 -> 241 [label="int remove(const char *__filename);"]
241 -> 242 [label="int rename(const char *__old, const char *__new);"]
242 -> 243 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
243 -> 244 [label="FILE * tmpfile();"]
244 -> 245 [label="char * tmpnam(char *__s);"]
245 -> 246 [label="char * tmpnam_r(char *__s);"]
246 -> 247 [label="char * tempnam(const char *__dir, const char *__pfx);"]
247 -> 248 [label="int fclose(FILE *__stream);"]
248 -> 249 [label="int fflush(FILE *__stream);"]
249 -> 250 [label="int fflush_unlocked(FILE *__stream);"]
250 -> 251 [label="FILE * fopen(const char *__filename, const char *__modes);"]
251 -> 252 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
252 -> 253 [label="FILE * fdopen(int __fd, const char *__modes);"]
253 -> 254 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
254 -> 255 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
255 -> 256 [label="void setbuf(FILE *__stream, char *__buf);"]
256 -> 257 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
257 -> 258 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
258 -> 259 [label="void setlinebuf(FILE *__stream);"]
259 -> 260 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
260 -> 261 [label="int printf(const char *__format, ...);"]
261 -> 262 [label="int sprintf(char *__s, const char *__format, ...);"]
262 -> 263 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
263 -> 264 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
264 -> 265 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
265 -> 266 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
266 -> 267 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
267 -> 268 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
268 -> 269 [label="int dprintf(int __fd, const char *__fmt, ...);"]
269 -> 270 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
270 -> 271 [label="int scanf(const char *__format, ...);"]
271 -> 272 [label="int sscanf(const char *__s, const char *__format, ...);"]
272 -> 273 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
273 -> 274 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
274 -> 275 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
275 -> 276 [label="int fgetc(FILE *__stream);"]
276 -> 277 [label="int getc(FILE *__stream);"]
277 -> 278 [label="int getchar();"]
278 -> 279 [label="int getc_unlocked(FILE *__stream);"]
279 -> 280 [label="int getchar_unlocked();"]
280 -> 281 [label="int fgetc_unlocked(FILE *__stream);"]
281 -> 282 [label="int fputc(int __c, FILE *__stream);"]
282 -> 283 [label="int putc(int __c, FILE *__stream);"]
283 -> 284 [label="int putchar(int __c);"]
284 -> 285 [label="int fputc_unlocked(int __c, FILE *__stream);"]
285 -> 286 [label="int putc_unlocked(int __c, FILE *__stream);"]
286 -> 287 [label="int putchar_unlocked(int __c);"]
287 -> 288 [label="int getw(FILE *__stream);"]
288 -> 289 [label="int putw(int __w, FILE *__stream);"]
289 -> 290 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
290 -> 291 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
291 -> 292 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
292 -> 293 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
293 -> 294 [label="int fputs(const char *__s, FILE *__stream);"]
294 -> 295 [label="int puts(const char *__s);"]
295 -> 296 [label="int ungetc(int __c, FILE *__stream);"]
296 -> 297 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
297 -> 298 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
298 -> 299 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
299 -> 300 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
300 -> 301 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
301 -> 302 [label="long int ftell(FILE *__stream);"]
302 -> 303 [label="void rewind(FILE *__stream);"]
303 -> 304 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
304 -> 305 [label="__off_t  ftello(FILE *__stream);"]
305 -> 306 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
306 -> 307 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
307 -> 308 [label="void clearerr(FILE *__stream);"]
308 -> 309 [label="int feof(FILE *__stream);"]
309 -> 310 [label="int ferror(FILE *__stream);"]
310 -> 311 [label="void clearerr_unlocked(FILE *__stream);"]
311 -> 312 [label="int feof_unlocked(FILE *__stream);"]
312 -> 313 [label="int ferror_unlocked(FILE *__stream);"]
313 -> 314 [label="void perror(const char *__s);"]
314 -> 315 [label="extern int sys_nerr;"]
315 -> 316 [label="extern const const char *sys_errlist[];"]
316 -> 317 [label="int fileno(FILE *__stream);"]
317 -> 318 [label="int fileno_unlocked(FILE *__stream);"]
318 -> 319 [label="FILE * popen(const char *__command, const char *__modes);"]
319 -> 320 [label="int pclose(FILE *__stream);"]
320 -> 321 [label="char * ctermid(char *__s);"]
321 -> 322 [label="void flockfile(FILE *__stream);"]
322 -> 323 [label="int ftrylockfile(FILE *__stream);"]
323 -> 324 [label="void funlockfile(FILE *__stream);"]
324 -> 325 [label="int A = 0;"]
325 -> 326 [label="int B = 1;"]
326 -> 327 [label="int C = 2;"]
327 -> 328 [label="int X = 3;"]
328 -> 329 [label="struct state_elements_controller {   _Bool ack;   unsigned char state;   _Bool pass_token; } ;"]
329 -> 330 [label="struct state_elements_controller scontroller = {  };"]
330 -> 331 [label="void controller_initial();"]
331 -> 332 [label="void controller(_Bool clk, _Bool req, _Bool *ack, unsigned char sel, _Bool *pass_token, unsigned char id);"]
332 -> 333 [label="struct state_elements_arbiter {   unsigned char state; } ;"]
333 -> 334 [label="struct state_elements_arbiter sarbiter = {  };"]
334 -> 335 [label="void arbiter_initial();"]
335 -> 336 [label="void arbiter(_Bool clk, unsigned char *sel, _Bool active);"]
336 -> 337 [label="struct state_elements_client {   unsigned char state;   _Bool req; } ;"]
337 -> 338 [label="struct state_elements_client sclient = {  };"]
338 -> 339 [label="void client_initial();"]
339 -> 340 [label="void client(_Bool clk, _Bool *req, _Bool ack);"]
340 -> 341 [label="void main();"]
341 -> 93 [label="Function start dummy edge"]
93 -> 94 [label="_Bool clk;"]
94 -> 95 [label="_Bool ackA;"]
95 -> 96 [label="_Bool ackB;"]
96 -> 97 [label="_Bool ackC;"]
97 -> 98 [label="unsigned char sel;"]
98 -> 99 [label="_Bool active;"]
99 -> 100 [label="_Bool reqA;"]
100 -> 101 [label="_Bool reqB;"]
101 -> 102 [label="_Bool reqC;"]
102 -> 103 [label="_Bool pass_tokenA;"]
103 -> 104 [label="_Bool pass_tokenB;"]
104 -> 105 [label="_Bool pass_tokenC;"]
105 -> 106 [label="client_initial();" style="dotted" arrowhead="empty"]
106 -> 107 [label="controller_initial();" style="dotted" arrowhead="empty"]
107 -> 108 [label="arbiter_initial();" style="dotted" arrowhead="empty"]
108 -> 109 [label="while"]
109 -> 110 [label=""]
110 -> 112 [label="client(clk, &reqA, ackA);" style="dotted" arrowhead="empty"]
114 -> 115 [label="controller(clk, reqA, &ackA, sel, &pass_tokenA, A);" style="dotted" arrowhead="empty"]
117 -> 118 [label="arbiter(clk, &sel, active);" style="dotted" arrowhead="empty"]
118 -> 119 [label="int __CPAchecker_TMP_0;"]
119 -> 123 [label="[pass_tokenA == 0]"]
119 -> 121 [label="[!(pass_tokenA == 0)]"]
121 -> 124 [label="__CPAchecker_TMP_0 = 1;"]
124 -> 125 [label="active = __CPAchecker_TMP_0;"]
125 -> 126 [label="int __CPAchecker_TMP_1;"]
126 -> 131 [label="[ackA == 1]"]
126 -> 130 [label="[!(ackA == 1)]"]
130 -> 132 [label="[ackB == 1]"]
130 -> 127 [label="[!(ackB == 1)]"]
127 -> 133 [label="[ackC == 1]"]
127 -> 129 [label="[!(ackC == 1)]"]
129 -> 134 [label="__CPAchecker_TMP_1 = 0;"]
134 -> 135 [label="assert(0 == __CPAchecker_TMP_1);"]
135 -> 109 [label=""]
133 -> 128 [label="[ackA == 1]"]
133 -> 129 [label="[!(ackA == 1)]"]
128 -> 134 [label="__CPAchecker_TMP_1 = 1;"]
132 -> 128 [label="[ackC == 1]"]
132 -> 127 [label="[!(ackC == 1)]"]
131 -> 128 [label="[ackB == 1]"]
131 -> 130 [label="[!(ackB == 1)]"]
123 -> 120 [label="[pass_tokenB == 0]"]
123 -> 121 [label="[!(pass_tokenB == 0)]"]
120 -> 122 [label="[pass_tokenC == 0]"]
120 -> 121 [label="[!(pass_tokenC == 0)]"]
122 -> 124 [label="__CPAchecker_TMP_0 = 0;"]
116 -> 117 [label="controller(clk, reqC, &ackC, sel, &pass_tokenC, C);" style="dotted" arrowhead="empty"]
115 -> 116 [label="controller(clk, reqB, &ackB, sel, &pass_tokenB, B);" style="dotted" arrowhead="empty"]
113 -> 114 [label="client(clk, &reqC, ackC);" style="dotted" arrowhead="empty"]
112 -> 113 [label="client(clk, &reqB, ackB);" style="dotted" arrowhead="empty"]}
105 -> 63 [label="client_initial()"]
62 -> 106 [label="Return edge from client_initial to main"]
106 -> 1 [label="controller_initial()"]
0 -> 107 [label="Return edge from controller_initial to main"]
107 -> 39 [label="arbiter_initial()"]
38 -> 108 [label="Return edge from arbiter_initial to main"]
110 -> 68 [label="client(clk, &reqA, ackA)"]
67 -> 112 [label="Return edge from client to main"]
67 -> 113 [label="Return edge from client to main"]
67 -> 114 [label="Return edge from client to main"]
114 -> 7 [label="controller(clk, reqA, &ackA, sel, &pass_tokenA, A)"]
6 -> 115 [label="Return edge from controller to main"]
6 -> 116 [label="Return edge from controller to main"]
6 -> 117 [label="Return edge from controller to main"]
117 -> 43 [label="arbiter(clk, &sel, active)"]
42 -> 118 [label="Return edge from arbiter to main"]
116 -> 7 [label="controller(clk, reqC, &ackC, sel, &pass_tokenC, C)"]
115 -> 7 [label="controller(clk, reqB, &ackB, sel, &pass_tokenB, B)"]
113 -> 68 [label="client(clk, &reqC, ackC)"]
112 -> 68 [label="client(clk, &reqB, ackB)"]}