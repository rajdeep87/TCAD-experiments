digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N95\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
98 [label="98 @ N108\nmain\n" id="98"]
99 [label="99 @ N100\nmain\n" id="99"]
100 [label="100 @ N35\ninitial entry\n" id="100"]
101 [label="101 @ N41\ninitial\n" id="101"]
102 [label="102 @ N34\ninitial exit\n" id="102"]
103 [label="103 @ N101\nmain\n" id="103"]
105 [fillcolor="cornflowerblue" label="105 @ N102\nmain\nAbstractionState: ABS3: true\n" id="105"]
106 [label="106 @ N106\nmain\n" id="106"]
107 [label="107 @ N43\nb08 entry\n" id="107"]
108 [label="108 @ N49\nb08\n" id="108"]
110 [label="110 @ N53\nb08\n" id="110"]
112 [label="112 @ N59\nb08\n" id="112"]
114 [label="114 @ N66\nb08\n" id="114"]
116 [label="116 @ N73\nb08\n" id="116"]
148 [label="148 @ N50\nb08\n" id="148"]
149 [label="149 @ N1\nROMS entry\n" id="149"]
150 [label="150 @ N3\nROMS\n" id="150"]
152 [label="152 @ N6\nROMS\n" id="152"]
154 [label="154 @ N10\nROMS\n" id="154"]
156 [label="156 @ N14\nROMS\n" id="156"]
158 [label="158 @ N18\nROMS\n" id="158"]
160 [label="160 @ N22\nROMS\n" id="160"]
162 [label="162 @ N26\nROMS\n" id="162"]
164 [label="164 @ N30\nROMS\n" id="164"]
165 [label="165 @ N32\nROMS\n" id="165"]
187 [label="187 @ N4\nROMS\n" id="187"]
188 [label="188 @ N0\nROMS exit\n" id="188"]
189 [label="189 @ N84\nb08\n" id="189"]
190 [label="190 @ N88\nb08\n" id="190"]
192 [label="192 @ N90\nb08\n" id="192"]
191 [label="191 @ N89\nb08\n" id="191"]
194 [label="194 @ N91\nb08\n" id="194"]
195 [label="195 @ N93\nb08\n" id="195"]
196 [label="196 @ N42\nb08 exit\n" id="196"]
197 [label="197 @ N107\nmain\n" id="197"]
199 [fillcolor="green" label="199 @ N102\nmain\nAbstractionState: ABS5: true\n" id="199"]
163 [label="163 @ N29\nROMS\n" id="163"]
167 [label="167 @ N31\nROMS\n" id="167"]
161 [label="161 @ N25\nROMS\n" id="161"]
170 [label="170 @ N27\nROMS\n" id="170"]
159 [label="159 @ N21\nROMS\n" id="159"]
173 [label="173 @ N23\nROMS\n" id="173"]
157 [label="157 @ N17\nROMS\n" id="157"]
176 [label="176 @ N19\nROMS\n" id="176"]
155 [label="155 @ N13\nROMS\n" id="155"]
179 [label="179 @ N15\nROMS\n" id="179"]
153 [label="153 @ N9\nROMS\n" id="153"]
182 [label="182 @ N11\nROMS\n" id="182"]
151 [label="151 @ N5\nROMS\n" id="151"]
185 [label="185 @ N7\nROMS\n" id="185"]
115 [label="115 @ N72\nb08\n" id="115"]
119 [label="119 @ N76\nb08\n" id="119"]
121 [label="121 @ N79\nb08\n" id="121"]
128 [label="128 @ N74\nb08\n" id="128"]
120 [label="120 @ N80\nb08\n" id="120"]
123 [label="123 @ N82\nb08\n" id="123"]
118 [label="118 @ N75\nb08\n" id="118"]
126 [label="126 @ N78\nb08\n" id="126"]
113 [label="113 @ N65\nb08\n" id="113"]
135 [label="135 @ N67\nb08\n" id="135"]
136 [label="136 @ N70\nb08\n" id="136"]
131 [label="131 @ N68\nb08\n" id="131"]
133 [label="133 @ N69\nb08\n" id="133"]
111 [label="111 @ N58\nb08\n" id="111"]
139 [label="139 @ N63\nb08\n" id="139"]
109 [label="109 @ N52\nb08\n" id="109"]
146 [label="146 @ N54\nb08\n" id="146"]
143 [label="143 @ N55\nb08\n" id="143"]
144 [label="144 @ N56\nb08\n" id="144"]
0 -> 98 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 98"]
98 -> 99 [label="Lines 33 - 985: \ltypedef unsigned long int size_t;\ltypedef unsigned char __u_char;\ltypedef unsigned short int __u_short;\ltypedef unsigned int __u_int;\ltypedef unsigned long int __u_long;\ltypedef signed char __int8_t;\ltypedef unsigned char __uint8_t;\ltypedef signed short int __int16_t;\ltypedef unsigned short int __uint16_t;\ltypedef signed int __int32_t;\ltypedef unsigned int __uint32_t;\ltypedef signed long int __int64_t;\ltypedef unsigned long int __uint64_t;\ltypedef long int __quad_t;\ltypedef unsigned long int __u_quad_t;\ltypedef unsigned long int __dev_t;\ltypedef unsigned int __uid_t;\ltypedef unsigned int __gid_t;\ltypedef unsigned long int __ino_t;\ltypedef unsigned long int __ino64_t;\ltypedef unsigned int __mode_t;\ltypedef unsigned long int __nlink_t;\ltypedef long int __off_t;\ltypedef long int __off64_t;\ltypedef int __pid_t;\lstruct __anon_type___fsid_t {   int __val[2]; } ;\ltypedef struct __anon_type___fsid_t __fsid_t;\ltypedef long int __clock_t;\ltypedef unsigned long int __rlim_t;\ltypedef unsigned long int __rlim64_t;\ltypedef unsigned int __id_t;\ltypedef long int __time_t;\ltypedef unsigned int __useconds_t;\ltypedef long int __suseconds_t;\ltypedef int __daddr_t;\ltypedef int __key_t;\ltypedef int __clockid_t;\ltypedef void *__timer_t;\ltypedef long int __blksize_t;\ltypedef long int __blkcnt_t;\ltypedef long int __blkcnt64_t;\ltypedef unsigned long int __fsblkcnt_t;\ltypedef unsigned long int __fsblkcnt64_t;\ltypedef unsigned long int __fsfilcnt_t;\ltypedef unsigned long int __fsfilcnt64_t;\ltypedef long int __fsword_t;\ltypedef long int __ssize_t;\ltypedef long int __syscall_slong_t;\ltypedef unsigned long int __syscall_ulong_t;\ltypedef __off64_t __loff_t;\ltypedef __quad_t *__qaddr_t;\ltypedef char *__caddr_t;\ltypedef long int __intptr_t;\ltypedef unsigned int __socklen_t;\lstruct _IO_FILE ;\ltypedef struct _IO_FILE FILE;\ltypedef struct _IO_FILE __FILE;\lunion __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;\lstruct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;\ltypedef struct __anon_type___mbstate_t __mbstate_t;\lstruct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos_t;\lstruct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos64_t;\ltypedef __builtin_va_list __gnuc_va_list;\lstruct _IO_jump_t ;\ltypedef void _IO_lock_t;\lstruct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;\lenum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;\lstruct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;\ltypedef struct _IO_FILE _IO_FILE;\lstruct _IO_FILE_plus ;\lextern struct _IO_FILE_plus _IO_2_1_stdin_;\lextern struct _IO_FILE_plus _IO_2_1_stdout_;\lextern struct _IO_FILE_plus _IO_2_1_stderr_;\ltypedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);\ltypedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);\ltypedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);\ltypedef int __io_close_fn(void *__cookie);\lint __underflow(_IO_FILE *);\lint __uflow(_IO_FILE *);\lint __overflow(_IO_FILE *, int);\lint _IO_getc(_IO_FILE *__fp);\lint _IO_putc(int __c, _IO_FILE *__fp);\lint _IO_feof(_IO_FILE *__fp);\lint _IO_ferror(_IO_FILE *__fp);\lint _IO_peekc_locked(_IO_FILE *__fp);\lvoid _IO_flockfile(_IO_FILE *);\lvoid _IO_funlockfile(_IO_FILE *);\lint _IO_ftrylockfile(_IO_FILE *);\lint _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);\lint _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );\l__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );\lsize_t  _IO_sgetn(_IO_FILE *, void *, size_t );\l__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);\l__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);\lvoid _IO_free_backup_area(_IO_FILE *);\ltypedef __gnuc_va_list va_list;\ltypedef __off_t off_t;\ltypedef __ssize_t ssize_t;\ltypedef _G_fpos_t fpos_t;\lextern struct _IO_FILE *stdin;\lextern struct _IO_FILE *stdout;\lextern struct _IO_FILE *stderr;\lint remove(const char *__filename);\lint rename(const char *__old, const char *__new);\lint renameat(int __oldfd, const char *__old, int __newfd, const char *__new);\lFILE * tmpfile();\lchar * tmpnam(char *__s);\lchar * tmpnam_r(char *__s);\lchar * tempnam(const char *__dir, const char *__pfx);\lint fclose(FILE *__stream);\lint fflush(FILE *__stream);\lint fflush_unlocked(FILE *__stream);\lFILE * fopen(const char *__filename, const char *__modes);\lFILE * freopen(const char *__filename, const char *__modes, FILE *__stream);\lFILE * fdopen(int __fd, const char *__modes);\lFILE * fmemopen(void *__s, size_t __len, const char *__modes);\lFILE * open_memstream(char **__bufloc, size_t *__sizeloc);\lvoid setbuf(FILE *__stream, char *__buf);\lint setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);\lvoid setbuffer(FILE *__stream, char *__buf, size_t __size);\lvoid setlinebuf(FILE *__stream);\lint fprintf(FILE *__stream, const char *__format, ...);\lint printf(const char *__format, ...);\lint sprintf(char *__s, const char *__format, ...);\lint vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vprintf(const char *__format, __gnuc_va_list __arg);\lint vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);\lint snprintf(char *__s, size_t __maxlen, const char *__format, ...);\lint vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);\lint vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);\lint dprintf(int __fd, const char *__fmt, ...);\lint fscanf(FILE *__stream, const char *__format, ...);\lint scanf(const char *__format, ...);\lint sscanf(const char *__s, const char *__format, ...);\lint vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vscanf(const char *__format, __gnuc_va_list __arg);\lint vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);\lint fgetc(FILE *__stream);\lint getc(FILE *__stream);\lint getchar();\lint getc_unlocked(FILE *__stream);\lint getchar_unlocked();\lint fgetc_unlocked(FILE *__stream);\lint fputc(int __c, FILE *__stream);\lint putc(int __c, FILE *__stream);\lint putchar(int __c);\lint fputc_unlocked(int __c, FILE *__stream);\lint putc_unlocked(int __c, FILE *__stream);\lint putchar_unlocked(int __c);\lint getw(FILE *__stream);\lint putw(int __w, FILE *__stream);\lchar * fgets(char *__s, int __n, FILE *__stream);\l__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);\lint fputs(const char *__s, FILE *__stream);\lint puts(const char *__s);\lint ungetc(int __c, FILE *__stream);\lsize_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);\lsize_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);\lint fseek(FILE *__stream, long int __off, int __whence);\llong int ftell(FILE *__stream);\lvoid rewind(FILE *__stream);\lint fseeko(FILE *__stream, __off_t __off, int __whence);\l__off_t  ftello(FILE *__stream);\lint fgetpos(FILE *__stream, fpos_t *__pos);\lint fsetpos(FILE *__stream, fpos_t *__pos);\lvoid clearerr(FILE *__stream);\lint feof(FILE *__stream);\lint ferror(FILE *__stream);\lvoid clearerr_unlocked(FILE *__stream);\lint feof_unlocked(FILE *__stream);\lint ferror_unlocked(FILE *__stream);\lvoid perror(const char *__s);\lextern int sys_nerr;\lextern const const char *sys_errlist[];\lint fileno(FILE *__stream);\lint fileno_unlocked(FILE *__stream);\lFILE * popen(const char *__command, const char *__modes);\lint pclose(FILE *__stream);\lchar * ctermid(char *__s);\lvoid flockfile(FILE *__stream);\lint ftrylockfile(FILE *__stream);\lvoid funlockfile(FILE *__stream);\lvoid __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);\lvoid __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);\lvoid __assert(const char *__assertion, const char *__file, int __line);\l_Bool nondet_bool();\lunsigned char nondet_char();\lint start_st = 0;\lint init = 1;\lint loop_st = 2;\lint the_end = 3;\lstruct state_elements_b08 {   unsigned char O;   _Bool STATO;   unsigned char IN_R;   unsigned char MAR;   unsigned char OUT_R; } ;\lstruct state_elements_b08 sb = {  };\lunsigned char ROMS(unsigned char a);\lvoid initial();\lvoid b08(_Bool CLOCK, _Bool START, unsigned char I, unsigned char *O);\lvoid main();\lFunction start dummy edge\l_Bool CLOCK;\l_Bool START;\lunsigned char I;\lunsigned char O;\l" id="98 -> 99"]
99 -> 100 [label="Line 986: \linitial()\l" id="99 -> 100"]
100 -> 101 [label="Lines 0 - 912: \lFunction start dummy edge\lsb.STATO = start_st;\lsb.MAR = 0;\lsb.IN_R = 0;\lsb.OUT_R = 0;\lsb.O = 0;\l" id="100 -> 101"]
101 -> 102 [label="Line 0: \ldefault return\l" id="101 -> 102"]
102 -> 103 [label="Line 986: \lReturn edge from initial to main\l" id="102 -> 103"]
103 -> 105 [label="Line 987: \lwhile\l" id="103 -> 105"]
199 -> 105 [style="dashed" weight="0" label="covered by"]
105 -> 106 [label="Lines 987 - 989: \l\lSTART = nondet_bool();\lI = nondet_char();\l" id="105 -> 106"]
106 -> 107 [label="Line 990: \lb08(CLOCK, START, I, &O)\l" id="106 -> 107"]
107 -> 108 [label="Lines 0 - 928: \lFunction start dummy edge\lunsigned char ROM_1;\lunsigned char ROM_2;\lunsigned char ROM_OR;\lunsigned int ROM_OUT;\lswitch (sb.STATO)\l" id="107 -> 108"]
108 -> 109 [label="Line 929: \l[(sb.STATO) == start_st]\l" id="108 -> 109"]
108 -> 110 [label="Line 929: \l[!((sb.STATO) == start_st)]\l" id="108 -> 110"]
110 -> 111 [label="Line 933: \l[(sb.STATO) == init]\l" id="110 -> 111"]
110 -> 112 [label="Line 933: \l[!((sb.STATO) == init)]\l" id="110 -> 112"]
112 -> 113 [label="Line 940: \l[(sb.STATO) == loop_st]\l" id="112 -> 113"]
112 -> 114 [label="Line 940: \l[!((sb.STATO) == loop_st)]\l" id="112 -> 114"]
114 -> 115 [label="Line 948: \l[(sb.STATO) == the_end]\l" id="114 -> 115"]
114 -> 116 [label="Line 948: \l[!((sb.STATO) == the_end)]\l" id="114 -> 116"]
116 -> 148 [label="Line 0: \l\l" id="116 -> 148"]
148 -> 149 [label="Line 960: \lROMS(sb.MAR)\l" id="148 -> 149"]
149 -> 150 [label="Lines 0 - 894: \lFunction start dummy edge\lunsigned int ROM;\l" id="149 -> 150"]
150 -> 151 [label="Line 895: \l[a == 0]\l" id="150 -> 151"]
150 -> 152 [label="Line 895: \l[!(a == 0)]\l" id="150 -> 152"]
152 -> 153 [label="Line 896: \l[a == 1]\l" id="152 -> 153"]
152 -> 154 [label="Line 896: \l[!(a == 1)]\l" id="152 -> 154"]
154 -> 155 [label="Line 897: \l[a == 2]\l" id="154 -> 155"]
154 -> 156 [label="Line 897: \l[!(a == 2)]\l" id="154 -> 156"]
156 -> 157 [label="Line 898: \l[a == 3]\l" id="156 -> 157"]
156 -> 158 [label="Line 898: \l[!(a == 3)]\l" id="156 -> 158"]
158 -> 159 [label="Line 899: \l[a == 4]\l" id="158 -> 159"]
158 -> 160 [label="Line 899: \l[!(a == 4)]\l" id="158 -> 160"]
160 -> 161 [label="Line 900: \l[a == 5]\l" id="160 -> 161"]
160 -> 162 [label="Line 900: \l[!(a == 5)]\l" id="160 -> 162"]
162 -> 163 [label="Line 901: \l[a == 6]\l" id="162 -> 163"]
162 -> 164 [label="Line 901: \l[!(a == 6)]\l" id="162 -> 164"]
164 -> 165 [label="Line 902: \lROM = 196596;\l" id="164 -> 165"]
165 -> 187 [label="Line 0: \l\l" id="165 -> 187"]
187 -> 188 [label="Line 903: \lreturn ROM;\l" id="187 -> 188"]
188 -> 189 [label="Line 960: \lReturn edge from ROMS to b08\l" id="188 -> 189"]
189 -> 190 [label="Lines 961 - 966: \lROM_1 = (ROM_OUT >> 12) & 255;\lROM_2 = (ROM_OUT >> 4) & 255;\lROM_OR = ROM_OUT & 15;\lvoid __CPAchecker_TMP_0;\l" id="189 -> 190"]
190 -> 191 [label="Line 966: \l[(ROM_OR & 15) != 0]\l" id="190 -> 191"]
190 -> 192 [label="Line 966: \l[!((ROM_OR & 15) != 0)]\l" id="190 -> 192"]
191 -> 194 [label="Line 966: \l0;\l" id="191 -> 194"]
194 -> 195 [label="Lines 966 - 977: \l0;\l*O = sb.O;\l" id="194 -> 195"]
195 -> 196 [label="Line 0: \ldefault return\l" id="195 -> 196"]
196 -> 197 [label="Line 990: \lReturn edge from b08 to main\l" id="196 -> 197"]
197 -> 199 [label="Line 0: \l\l" id="197 -> 199"]
163 -> 167 [label="Line 901: \lROM = 829275;\l" id="163 -> 167"]
167 -> 187 [label="Line 0: \l\l" id="167 -> 187"]
161 -> 170 [label="Line 900: \lROM = 1047464;\l" id="161 -> 170"]
170 -> 187 [label="Line 0: \l\l" id="170 -> 187"]
159 -> 173 [label="Line 899: \lROM = 1048430;\l" id="159 -> 173"]
173 -> 187 [label="Line 0: \l\l" id="173 -> 187"]
157 -> 176 [label="Line 898: \lROM = 1046202;\l" id="157 -> 176"]
176 -> 187 [label="Line 0: \l\l" id="176 -> 187"]
155 -> 179 [label="Line 897: \lROM = 692223;\l" id="155 -> 179"]
179 -> 187 [label="Line 0: \l\l" id="179 -> 187"]
153 -> 182 [label="Line 896: \lROM = 236130;\l" id="153 -> 182"]
182 -> 187 [label="Line 0: \l\l" id="182 -> 187"]
151 -> 185 [label="Line 895: \lROM = 522618;\l" id="151 -> 185"]
185 -> 187 [label="Line 0: \l\l" id="185 -> 187"]
115 -> 118 [label="Line 949: \l[(sb.MAR) != 7]\l" id="115 -> 118"]
115 -> 119 [label="Line 949: \l[!((sb.MAR) != 7)]\l" id="115 -> 119"]
119 -> 120 [label="Line 952: \l[START == 0]\l" id="119 -> 120"]
119 -> 121 [label="Line 952: \l[!(START == 0)]\l" id="119 -> 121"]
121 -> 128 [label="Line 0: \l\l" id="121 -> 128"]
128 -> 148 [label="Line 956: \lbreak\l" id="128 -> 148"]
120 -> 123 [label="Lines 953 - 954: \lsb.O = sb.OUT_R;\lsb.STATO = start_st;\l" id="120 -> 123"]
123 -> 128 [label="Line 0: \l\l" id="123 -> 128"]
118 -> 126 [label="Lines 950 - 951: \lsb.MAR = (sb.MAR) + 1;\lsb.STATO = loop_st;\l" id="118 -> 126"]
126 -> 128 [label="Line 0: \l\l" id="126 -> 128"]
113 -> 131 [label="Line 941: \l[(((ROM_2 & (~(sb.IN_R))) | (ROM_1 & (sb.IN_R))) | (ROM_2 & ROM_1)) == 255]\l" id="113 -> 131"]
113 -> 135 [label="Line 941: \l[!((((ROM_2 & (~(sb.IN_R))) | (ROM_1 & (sb.IN_R))) | (ROM_2 & ROM_1)) == 255)]\l" id="113 -> 135"]
135 -> 136 [label="Line 945: \lsb.STATO = the_end;\l" id="135 -> 136"]
136 -> 148 [label="Line 946: \lbreak\l" id="136 -> 148"]
131 -> 133 [label="Line 943: \lsb.OUT_R = (sb.OUT_R) | ROM_OR;\l" id="131 -> 133"]
133 -> 135 [label="Line 0: \l\l" id="133 -> 135"]
111 -> 139 [label="Lines 934 - 937: \lsb.IN_R = I;\lsb.OUT_R = 0;\lsb.MAR = 0;\lsb.STATO = loop_st;\l" id="111 -> 139"]
139 -> 148 [label="Line 938: \lbreak\l" id="139 -> 148"]
109 -> 143 [label="Line 930: \l[!(START == 0)]\l" id="109 -> 143"]
109 -> 146 [label="Line 930: \l[START == 0]\l" id="109 -> 146"]
146 -> 148 [label="Line 931: \lbreak\l" id="146 -> 148"]
143 -> 144 [label="Line 930: \lsb.STATO = init;\l" id="143 -> 144"]
144 -> 146 [label="Line 0: \l\l" id="144 -> 146"]
}
