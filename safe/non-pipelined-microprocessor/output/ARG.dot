digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N188\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N218\nmain\n" id="1"]
2 [label="2 @ N199\nmain\n" id="2"]
4 [fillcolor="cornflowerblue" label="4 @ N200\nmain\nAbstractionState: ABS1: true\n" id="4"]
5 [label="5 @ N201\nmain\n" id="5"]
6 [label="6 @ N1\nmemory entry\n" id="6"]
7 [label="7 @ N10\nmemory\n" id="7"]
51 [label="51 @ N11\nmemory\n" id="51"]
52 [label="52 @ N37\nmemory\n" id="52"]
54 [label="54 @ N39\nmemory\n" id="54"]
55 [label="55 @ N41\nmemory\n" id="55"]
57 [label="57 @ N43\nmemory\n" id="57"]
58 [label="58 @ N45\nmemory\n" id="58"]
60 [label="60 @ N47\nmemory\n" id="60"]
61 [label="61 @ N49\nmemory\n" id="61"]
63 [label="63 @ N51\nmemory\n" id="63"]
64 [label="64 @ N53\nmemory\n" id="64"]
66 [label="66 @ N55\nmemory\n" id="66"]
67 [label="67 @ N57\nmemory\n" id="67"]
69 [label="69 @ N59\nmemory\n" id="69"]
70 [label="70 @ N61\nmemory\n" id="70"]
72 [label="72 @ N63\nmemory\n" id="72"]
75 [label="75 @ N64\nmemory\n" id="75"]
78 [label="78 @ N60\nmemory\n" id="78"]
81 [label="81 @ N56\nmemory\n" id="81"]
84 [label="84 @ N52\nmemory\n" id="84"]
87 [label="87 @ N48\nmemory\n" id="87"]
90 [label="90 @ N44\nmemory\n" id="90"]
93 [label="93 @ N40\nmemory\n" id="93"]
94 [label="94 @ N66\nmemory\n" id="94"]
96 [label="96 @ N68\nmemory\n" id="96"]
97 [label="97 @ N70\nmemory\n" id="97"]
99 [label="99 @ N72\nmemory\n" id="99"]
100 [label="100 @ N74\nmemory\n" id="100"]
102 [label="102 @ N76\nmemory\n" id="102"]
103 [label="103 @ N78\nmemory\n" id="103"]
105 [label="105 @ N80\nmemory\n" id="105"]
106 [label="106 @ N82\nmemory\n" id="106"]
108 [label="108 @ N84\nmemory\n" id="108"]
109 [label="109 @ N86\nmemory\n" id="109"]
111 [label="111 @ N88\nmemory\n" id="111"]
112 [label="112 @ N90\nmemory\n" id="112"]
114 [label="114 @ N92\nmemory\n" id="114"]
117 [label="117 @ N93\nmemory\n" id="117"]
120 [label="120 @ N89\nmemory\n" id="120"]
123 [label="123 @ N85\nmemory\n" id="123"]
126 [label="126 @ N81\nmemory\n" id="126"]
129 [label="129 @ N77\nmemory\n" id="129"]
132 [label="132 @ N73\nmemory\n" id="132"]
135 [label="135 @ N69\nmemory\n" id="135"]
136 [label="136 @ N94\nmemory\n" id="136"]
137 [label="137 @ N0\nmemory exit\n" id="137"]
138 [label="138 @ N203\nmain\n" id="138"]
139 [label="139 @ N96\nprogram entry\n" id="139"]
140 [label="140 @ N114\nprogram\n" id="140"]
142 [label="142 @ N116\nprogram\n" id="142"]
143 [label="143 @ N118\nprogram\n" id="143"]
145 [label="145 @ N120\nprogram\n" id="145"]
146 [label="146 @ N122\nprogram\n" id="146"]
148 [label="148 @ N124\nprogram\n" id="148"]
149 [label="149 @ N126\nprogram\n" id="149"]
151 [label="151 @ N128\nprogram\n" id="151"]
152 [label="152 @ N130\nprogram\n" id="152"]
154 [label="154 @ N132\nprogram\n" id="154"]
155 [label="155 @ N134\nprogram\n" id="155"]
157 [label="157 @ N136\nprogram\n" id="157"]
158 [label="158 @ N138\nprogram\n" id="158"]
160 [label="160 @ N140\nprogram\n" id="160"]
163 [label="163 @ N141\nprogram\n" id="163"]
166 [label="166 @ N137\nprogram\n" id="166"]
169 [label="169 @ N133\nprogram\n" id="169"]
172 [label="172 @ N129\nprogram\n" id="172"]
175 [label="175 @ N125\nprogram\n" id="175"]
178 [label="178 @ N121\nprogram\n" id="178"]
181 [label="181 @ N117\nprogram\n" id="181"]
182 [label="182 @ N142\nprogram\n" id="182"]
183 [label="183 @ N95\nprogram exit\n" id="183"]
184 [label="184 @ N204\nmain\n" id="184"]
185 [label="185 @ N144\ndecodeOpcd entry\n" id="185"]
186 [label="186 @ N146\ndecodeOpcd\n" id="186"]
187 [label="187 @ N143\ndecodeOpcd exit\n" id="187"]
188 [label="188 @ N205\nmain\n" id="188"]
189 [label="189 @ N148\ndecodeLoc1 entry\n" id="189"]
190 [label="190 @ N150\ndecodeLoc1\n" id="190"]
191 [label="191 @ N147\ndecodeLoc1 exit\n" id="191"]
192 [label="192 @ N206\nmain\n" id="192"]
193 [label="193 @ N152\ndecodeLoc2 entry\n" id="193"]
194 [label="194 @ N154\ndecodeLoc2\n" id="194"]
195 [label="195 @ N151\ndecodeLoc2 exit\n" id="195"]
196 [label="196 @ N207\nmain\n" id="196"]
197 [label="197 @ N156\ndecodeLoc3 entry\n" id="197"]
198 [label="198 @ N158\ndecodeLoc3\n" id="198"]
199 [label="199 @ N155\ndecodeLoc3 exit\n" id="199"]
200 [label="200 @ N208\nmain\n" id="200"]
201 [label="201 @ N160\nalu entry\n" id="201"]
202 [label="202 @ N162\nalu\n" id="202"]
204 [label="204 @ N164\nalu\n" id="204"]
205 [label="205 @ N166\nalu\n" id="205"]
207 [label="207 @ N168\nalu\n" id="207"]
208 [label="208 @ N170\nalu\n" id="208"]
210 [label="210 @ N172\nalu\n" id="210"]
213 [label="213 @ N173\nalu\n" id="213"]
216 [label="216 @ N169\nalu\n" id="216"]
219 [label="219 @ N165\nalu\n" id="219"]
220 [label="220 @ N174\nalu\n" id="220"]
221 [label="221 @ N159\nalu exit\n" id="221"]
222 [label="222 @ N209\nmain\n" id="222"]
223 [label="223 @ N176\npc entry\n" id="223"]
224 [label="224 @ N178\npc\n" id="224"]
229 [label="229 @ N181\npc\n" id="229"]
230 [label="230 @ N186\npc\n" id="230"]
234 [label="234 @ N179\npc\n" id="234"]
235 [label="235 @ N175\npc exit\n" id="235"]
236 [label="236 @ N210\nmain\n" id="236"]
237 [label="237 @ N211\nmain\n" id="237"]
245 [label="245 @ N213\nmain\n" id="245"]
248 [label="248 @ N216\nmain\n" id="248"]
249 [label="249 @ N217\nmain\n" id="249"]
251 [fillcolor="green" label="251 @ N200\nmain\nAbstractionState: ABS2: true\n" id="251"]
238 [label="238 @ N215\nmain\n" id="238"]
240 [label="240 @ N212\nmain\n" id="240"]
244 [label="244 @ N214\nmain\n" id="244"]
225 [label="225 @ N182\npc\n" id="225"]
227 [label="227 @ N180\npc\n" id="227"]
232 [label="232 @ N184\npc\n" id="232"]
209 [label="209 @ N171\nalu\n" id="209"]
206 [label="206 @ N167\nalu\n" id="206"]
203 [label="203 @ N163\nalu\n" id="203"]
159 [label="159 @ N139\nprogram\n" id="159"]
156 [label="156 @ N135\nprogram\n" id="156"]
153 [label="153 @ N131\nprogram\n" id="153"]
150 [label="150 @ N127\nprogram\n" id="150"]
147 [label="147 @ N123\nprogram\n" id="147"]
144 [label="144 @ N119\nprogram\n" id="144"]
141 [label="141 @ N115\nprogram\n" id="141"]
113 [label="113 @ N91\nmemory\n" id="113"]
110 [label="110 @ N87\nmemory\n" id="110"]
107 [label="107 @ N83\nmemory\n" id="107"]
104 [label="104 @ N79\nmemory\n" id="104"]
101 [label="101 @ N75\nmemory\n" id="101"]
98 [label="98 @ N71\nmemory\n" id="98"]
95 [label="95 @ N67\nmemory\n" id="95"]
71 [label="71 @ N62\nmemory\n" id="71"]
68 [label="68 @ N58\nmemory\n" id="68"]
65 [label="65 @ N54\nmemory\n" id="65"]
62 [label="62 @ N50\nmemory\n" id="62"]
59 [label="59 @ N46\nmemory\n" id="59"]
56 [label="56 @ N42\nmemory\n" id="56"]
53 [label="53 @ N38\nmemory\n" id="53"]
8 [label="8 @ N12\nmemory\n" id="8"]
14 [label="14 @ N13\nmemory\n" id="14"]
19 [label="19 @ N16\nmemory\n" id="19"]
24 [label="24 @ N19\nmemory\n" id="24"]
29 [label="29 @ N22\nmemory\n" id="29"]
34 [label="34 @ N25\nmemory\n" id="34"]
39 [label="39 @ N28\nmemory\n" id="39"]
44 [label="44 @ N31\nmemory\n" id="44"]
46 [label="46 @ N34\nmemory\n" id="46"]
45 [label="45 @ N35\nmemory\n" id="45"]
49 [label="49 @ N36\nmemory\n" id="49"]
40 [label="40 @ N32\nmemory\n" id="40"]
42 [label="42 @ N33\nmemory\n" id="42"]
35 [label="35 @ N29\nmemory\n" id="35"]
37 [label="37 @ N30\nmemory\n" id="37"]
30 [label="30 @ N26\nmemory\n" id="30"]
32 [label="32 @ N27\nmemory\n" id="32"]
25 [label="25 @ N23\nmemory\n" id="25"]
27 [label="27 @ N24\nmemory\n" id="27"]
20 [label="20 @ N20\nmemory\n" id="20"]
22 [label="22 @ N21\nmemory\n" id="22"]
15 [label="15 @ N17\nmemory\n" id="15"]
17 [label="17 @ N18\nmemory\n" id="17"]
10 [label="10 @ N14\nmemory\n" id="10"]
12 [label="12 @ N15\nmemory\n" id="12"]
0 -> 1 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [label="Lines 33 - 1021: \ltypedef unsigned long int size_t;\ltypedef unsigned char __u_char;\ltypedef unsigned short int __u_short;\ltypedef unsigned int __u_int;\ltypedef unsigned long int __u_long;\ltypedef signed char __int8_t;\ltypedef unsigned char __uint8_t;\ltypedef signed short int __int16_t;\ltypedef unsigned short int __uint16_t;\ltypedef signed int __int32_t;\ltypedef unsigned int __uint32_t;\ltypedef signed long int __int64_t;\ltypedef unsigned long int __uint64_t;\ltypedef long int __quad_t;\ltypedef unsigned long int __u_quad_t;\ltypedef unsigned long int __dev_t;\ltypedef unsigned int __uid_t;\ltypedef unsigned int __gid_t;\ltypedef unsigned long int __ino_t;\ltypedef unsigned long int __ino64_t;\ltypedef unsigned int __mode_t;\ltypedef unsigned long int __nlink_t;\ltypedef long int __off_t;\ltypedef long int __off64_t;\ltypedef int __pid_t;\lstruct __anon_type___fsid_t {   int __val[2]; } ;\ltypedef struct __anon_type___fsid_t __fsid_t;\ltypedef long int __clock_t;\ltypedef unsigned long int __rlim_t;\ltypedef unsigned long int __rlim64_t;\ltypedef unsigned int __id_t;\ltypedef long int __time_t;\ltypedef unsigned int __useconds_t;\ltypedef long int __suseconds_t;\ltypedef int __daddr_t;\ltypedef int __key_t;\ltypedef int __clockid_t;\ltypedef void *__timer_t;\ltypedef long int __blksize_t;\ltypedef long int __blkcnt_t;\ltypedef long int __blkcnt64_t;\ltypedef unsigned long int __fsblkcnt_t;\ltypedef unsigned long int __fsblkcnt64_t;\ltypedef unsigned long int __fsfilcnt_t;\ltypedef unsigned long int __fsfilcnt64_t;\ltypedef long int __fsword_t;\ltypedef long int __ssize_t;\ltypedef long int __syscall_slong_t;\ltypedef unsigned long int __syscall_ulong_t;\ltypedef __off64_t __loff_t;\ltypedef __quad_t *__qaddr_t;\ltypedef char *__caddr_t;\ltypedef long int __intptr_t;\ltypedef unsigned int __socklen_t;\lstruct _IO_FILE ;\ltypedef struct _IO_FILE FILE;\ltypedef struct _IO_FILE __FILE;\lunion __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;\lstruct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;\ltypedef struct __anon_type___mbstate_t __mbstate_t;\lstruct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos_t;\lstruct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos64_t;\ltypedef __builtin_va_list __gnuc_va_list;\lstruct _IO_jump_t ;\ltypedef void _IO_lock_t;\lstruct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;\lenum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;\lstruct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;\ltypedef struct _IO_FILE _IO_FILE;\lstruct _IO_FILE_plus ;\lextern struct _IO_FILE_plus _IO_2_1_stdin_;\lextern struct _IO_FILE_plus _IO_2_1_stdout_;\lextern struct _IO_FILE_plus _IO_2_1_stderr_;\ltypedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);\ltypedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);\ltypedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);\ltypedef int __io_close_fn(void *__cookie);\lint __underflow(_IO_FILE *);\lint __uflow(_IO_FILE *);\lint __overflow(_IO_FILE *, int);\lint _IO_getc(_IO_FILE *__fp);\lint _IO_putc(int __c, _IO_FILE *__fp);\lint _IO_feof(_IO_FILE *__fp);\lint _IO_ferror(_IO_FILE *__fp);\lint _IO_peekc_locked(_IO_FILE *__fp);\lvoid _IO_flockfile(_IO_FILE *);\lvoid _IO_funlockfile(_IO_FILE *);\lint _IO_ftrylockfile(_IO_FILE *);\lint _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);\lint _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );\l__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );\lsize_t  _IO_sgetn(_IO_FILE *, void *, size_t );\l__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);\l__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);\lvoid _IO_free_backup_area(_IO_FILE *);\ltypedef __gnuc_va_list va_list;\ltypedef __off_t off_t;\ltypedef __ssize_t ssize_t;\ltypedef _G_fpos_t fpos_t;\lextern struct _IO_FILE *stdin;\lextern struct _IO_FILE *stdout;\lextern struct _IO_FILE *stderr;\lint remove(const char *__filename);\lint rename(const char *__old, const char *__new);\lint renameat(int __oldfd, const char *__old, int __newfd, const char *__new);\lFILE * tmpfile();\lchar * tmpnam(char *__s);\lchar * tmpnam_r(char *__s);\lchar * tempnam(const char *__dir, const char *__pfx);\lint fclose(FILE *__stream);\lint fflush(FILE *__stream);\lint fflush_unlocked(FILE *__stream);\lFILE * fopen(const char *__filename, const char *__modes);\lFILE * freopen(const char *__filename, const char *__modes, FILE *__stream);\lFILE * fdopen(int __fd, const char *__modes);\lFILE * fmemopen(void *__s, size_t __len, const char *__modes);\lFILE * open_memstream(char **__bufloc, size_t *__sizeloc);\lvoid setbuf(FILE *__stream, char *__buf);\lint setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);\lvoid setbuffer(FILE *__stream, char *__buf, size_t __size);\lvoid setlinebuf(FILE *__stream);\lint fprintf(FILE *__stream, const char *__format, ...);\lint printf(const char *__format, ...);\lint sprintf(char *__s, const char *__format, ...);\lint vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vprintf(const char *__format, __gnuc_va_list __arg);\lint vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);\lint snprintf(char *__s, size_t __maxlen, const char *__format, ...);\lint vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);\lint vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);\lint dprintf(int __fd, const char *__fmt, ...);\lint fscanf(FILE *__stream, const char *__format, ...);\lint scanf(const char *__format, ...);\lint sscanf(const char *__s, const char *__format, ...);\lint vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vscanf(const char *__format, __gnuc_va_list __arg);\lint vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);\lint fgetc(FILE *__stream);\lint getc(FILE *__stream);\lint getchar();\lint getc_unlocked(FILE *__stream);\lint getchar_unlocked();\lint fgetc_unlocked(FILE *__stream);\lint fputc(int __c, FILE *__stream);\lint putc(int __c, FILE *__stream);\lint putchar(int __c);\lint fputc_unlocked(int __c, FILE *__stream);\lint putc_unlocked(int __c, FILE *__stream);\lint putchar_unlocked(int __c);\lint getw(FILE *__stream);\lint putw(int __w, FILE *__stream);\lchar * fgets(char *__s, int __n, FILE *__stream);\l__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);\lint fputs(const char *__s, FILE *__stream);\lint puts(const char *__s);\lint ungetc(int __c, FILE *__stream);\lsize_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);\lsize_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);\lint fseek(FILE *__stream, long int __off, int __whence);\llong int ftell(FILE *__stream);\lvoid rewind(FILE *__stream);\lint fseeko(FILE *__stream, __off_t __off, int __whence);\l__off_t  ftello(FILE *__stream);\lint fgetpos(FILE *__stream, fpos_t *__pos);\lint fsetpos(FILE *__stream, fpos_t *__pos);\lvoid clearerr(FILE *__stream);\lint feof(FILE *__stream);\lint ferror(FILE *__stream);\lvoid clearerr_unlocked(FILE *__stream);\lint feof_unlocked(FILE *__stream);\lint ferror_unlocked(FILE *__stream);\lvoid perror(const char *__s);\lextern int sys_nerr;\lextern const const char *sys_errlist[];\lint fileno(FILE *__stream);\lint fileno_unlocked(FILE *__stream);\lFILE * popen(const char *__command, const char *__modes);\lint pclose(FILE *__stream);\lchar * ctermid(char *__s);\lvoid flockfile(FILE *__stream);\lint ftrylockfile(FILE *__stream);\lvoid funlockfile(FILE *__stream);\lstruct state_elements_memory {   unsigned char m2;   unsigned char m3;   unsigned char m4;   unsigned char m5;   unsigned char m6;   unsigned char m7;   unsigned char m0;   unsigned char m1; } ;\lstruct state_elements_memory smemory = {  };\lvoid memory(_Bool clk, unsigned char opcode, unsigned char readLoc1, unsigned char readLoc2, unsigned char writeLoc, unsigned char data, unsigned char *memOut1, unsigned char *memOut2);\lvoid program(_Bool clk, unsigned char progCntr, unsigned short int *instruction);\lvoid decodeOpcd(_Bool clk, unsigned short int instruction, unsigned char *opcode);\lvoid decodeLoc1(_Bool clk, unsigned short int instruction, unsigned char *readLoc1);\lvoid decodeLoc2(_Bool clk, unsigned short int instruction, unsigned char *readLoc2);\lvoid decodeLoc3(_Bool clk, unsigned short int instruction, unsigned char *writeLoc);\lvoid alu(_Bool clk, unsigned char opcode, unsigned char operand1, unsigned char operand2, unsigned char *aluOut);\lstruct state_elements_pc {   unsigned char progCntr; } ;\lstruct state_elements_pc spc = {  };\lvoid pc(_Bool clk, unsigned char opcode, unsigned char operand1, unsigned char operand2, unsigned char *progCntr);\lint main();\lFunction start dummy edge\l_Bool clk;\lunsigned char aluOut;\lunsigned char memOut1;\lunsigned char memOut2;\lunsigned char readLoc1;\lunsigned char readLoc2;\lunsigned char writeLoc;\lunsigned char progCntr;\lunsigned short int instruction;\lunsigned char opcode;\l" id="1 -> 2"]
2 -> 4 [label="Line 1022: \lwhile\l" id="2 -> 4"]
251 -> 4 [style="dashed" weight="0" label="covered by"]
4 -> 5 [label="Line 1022: \l\l" id="4 -> 5"]
5 -> 6 [label="Line 1023: \lmemory(clk, opcode, readLoc1, readLoc2, writeLoc, aluOut, &memOut1, &memOut2)\l" id="5 -> 6"]
6 -> 7 [label="Lines 0 - 873: \lFunction start dummy edge\lunsigned char m0_old;\lunsigned char m1_old;\lunsigned char m2_old;\lunsigned char m3_old;\lunsigned char m4_old;\lunsigned char m5_old;\lunsigned char m6_old;\lunsigned char m7_old;\l" id="6 -> 7"]
7 -> 8 [label="Line 874: \l[((unsigned int)opcode) != 1]\l" id="7 -> 8"]
7 -> 51 [label="Line 874: \l[!(((unsigned int)opcode) != 1)]\l" id="7 -> 51"]
51 -> 52 [label="Line 918: \lint __CPAchecker_TMP_0;\l" id="51 -> 52"]
52 -> 53 [label="Line 918: \l[readLoc1 == 0]\l" id="52 -> 53"]
52 -> 54 [label="Line 918: \l[!(readLoc1 == 0)]\l" id="52 -> 54"]
54 -> 55 [label="Line 918: \lint __CPAchecker_TMP_1;\l" id="54 -> 55"]
55 -> 56 [label="Line 919: \l[readLoc1 == 1]\l" id="55 -> 56"]
55 -> 57 [label="Line 919: \l[!(readLoc1 == 1)]\l" id="55 -> 57"]
57 -> 58 [label="Line 919: \lint __CPAchecker_TMP_2;\l" id="57 -> 58"]
58 -> 59 [label="Line 920: \l[readLoc1 == 2]\l" id="58 -> 59"]
58 -> 60 [label="Line 920: \l[!(readLoc1 == 2)]\l" id="58 -> 60"]
60 -> 61 [label="Line 920: \lint __CPAchecker_TMP_3;\l" id="60 -> 61"]
61 -> 62 [label="Line 921: \l[readLoc1 == 3]\l" id="61 -> 62"]
61 -> 63 [label="Line 921: \l[!(readLoc1 == 3)]\l" id="61 -> 63"]
63 -> 64 [label="Line 921: \lint __CPAchecker_TMP_4;\l" id="63 -> 64"]
64 -> 65 [label="Line 922: \l[readLoc1 == 4]\l" id="64 -> 65"]
64 -> 66 [label="Line 922: \l[!(readLoc1 == 4)]\l" id="64 -> 66"]
66 -> 67 [label="Line 922: \lint __CPAchecker_TMP_5;\l" id="66 -> 67"]
67 -> 68 [label="Line 923: \l[readLoc1 == 5]\l" id="67 -> 68"]
67 -> 69 [label="Line 923: \l[!(readLoc1 == 5)]\l" id="67 -> 69"]
69 -> 70 [label="Line 923: \lint __CPAchecker_TMP_6;\l" id="69 -> 70"]
70 -> 71 [label="Line 924: \l[readLoc1 == 6]\l" id="70 -> 71"]
70 -> 72 [label="Line 924: \l[!(readLoc1 == 6)]\l" id="70 -> 72"]
72 -> 75 [label="Line 924: \l__CPAchecker_TMP_6 = smemory.m7;\l" id="72 -> 75"]
75 -> 78 [label="Line 923: \l__CPAchecker_TMP_5 = __CPAchecker_TMP_6;\l" id="75 -> 78"]
78 -> 81 [label="Line 922: \l__CPAchecker_TMP_4 = __CPAchecker_TMP_5;\l" id="78 -> 81"]
81 -> 84 [label="Line 921: \l__CPAchecker_TMP_3 = __CPAchecker_TMP_4;\l" id="81 -> 84"]
84 -> 87 [label="Line 920: \l__CPAchecker_TMP_2 = __CPAchecker_TMP_3;\l" id="84 -> 87"]
87 -> 90 [label="Line 919: \l__CPAchecker_TMP_1 = __CPAchecker_TMP_2;\l" id="87 -> 90"]
90 -> 93 [label="Line 918: \l__CPAchecker_TMP_0 = __CPAchecker_TMP_1;\l" id="90 -> 93"]
93 -> 94 [label="Lines 918 - 926: \l*memOut1 = __CPAchecker_TMP_0;\lint __CPAchecker_TMP_7;\l" id="93 -> 94"]
94 -> 95 [label="Line 926: \l[readLoc2 == 0]\l" id="94 -> 95"]
94 -> 96 [label="Line 926: \l[!(readLoc2 == 0)]\l" id="94 -> 96"]
96 -> 97 [label="Line 926: \lint __CPAchecker_TMP_8;\l" id="96 -> 97"]
97 -> 98 [label="Line 927: \l[readLoc2 == 1]\l" id="97 -> 98"]
97 -> 99 [label="Line 927: \l[!(readLoc2 == 1)]\l" id="97 -> 99"]
99 -> 100 [label="Line 927: \lint __CPAchecker_TMP_9;\l" id="99 -> 100"]
100 -> 101 [label="Line 928: \l[readLoc2 == 2]\l" id="100 -> 101"]
100 -> 102 [label="Line 928: \l[!(readLoc2 == 2)]\l" id="100 -> 102"]
102 -> 103 [label="Line 928: \lint __CPAchecker_TMP_10;\l" id="102 -> 103"]
103 -> 104 [label="Line 929: \l[readLoc2 == 3]\l" id="103 -> 104"]
103 -> 105 [label="Line 929: \l[!(readLoc2 == 3)]\l" id="103 -> 105"]
105 -> 106 [label="Line 929: \lint __CPAchecker_TMP_11;\l" id="105 -> 106"]
106 -> 107 [label="Line 930: \l[readLoc2 == 4]\l" id="106 -> 107"]
106 -> 108 [label="Line 930: \l[!(readLoc2 == 4)]\l" id="106 -> 108"]
108 -> 109 [label="Line 930: \lint __CPAchecker_TMP_12;\l" id="108 -> 109"]
109 -> 110 [label="Line 931: \l[readLoc2 == 5]\l" id="109 -> 110"]
109 -> 111 [label="Line 931: \l[!(readLoc2 == 5)]\l" id="109 -> 111"]
111 -> 112 [label="Line 931: \lint __CPAchecker_TMP_13;\l" id="111 -> 112"]
112 -> 113 [label="Line 932: \l[readLoc2 == 6]\l" id="112 -> 113"]
112 -> 114 [label="Line 932: \l[!(readLoc2 == 6)]\l" id="112 -> 114"]
114 -> 117 [label="Line 932: \l__CPAchecker_TMP_13 = smemory.m7;\l" id="114 -> 117"]
117 -> 120 [label="Line 931: \l__CPAchecker_TMP_12 = __CPAchecker_TMP_13;\l" id="117 -> 120"]
120 -> 123 [label="Line 930: \l__CPAchecker_TMP_11 = __CPAchecker_TMP_12;\l" id="120 -> 123"]
123 -> 126 [label="Line 929: \l__CPAchecker_TMP_10 = __CPAchecker_TMP_11;\l" id="123 -> 126"]
126 -> 129 [label="Line 928: \l__CPAchecker_TMP_9 = __CPAchecker_TMP_10;\l" id="126 -> 129"]
129 -> 132 [label="Line 927: \l__CPAchecker_TMP_8 = __CPAchecker_TMP_9;\l" id="129 -> 132"]
132 -> 135 [label="Line 926: \l__CPAchecker_TMP_7 = __CPAchecker_TMP_8;\l" id="132 -> 135"]
135 -> 136 [label="Line 926: \l*memOut2 = __CPAchecker_TMP_7;\l" id="135 -> 136"]
136 -> 137 [label="Line 0: \ldefault return\l" id="136 -> 137"]
137 -> 138 [label="Line 1023: \lReturn edge from memory to main\l" id="137 -> 138"]
138 -> 139 [label="Line 1024: \lprogram(clk, progCntr, &instruction)\l" id="138 -> 139"]
139 -> 140 [label="Lines 0 - 954: \lFunction start dummy edge\lunsigned short int instr0;\lunsigned short int instr1;\lunsigned short int instr2;\lunsigned short int instr3;\lunsigned short int instr4;\lunsigned short int instr5;\lunsigned short int instr6;\lunsigned short int instr7;\linstr0 = 576;\linstr1 = 1152;\linstr2 = 1728;\linstr3 = 2304;\linstr4 = 505;\linstr5 = 0;\linstr6 = 0;\linstr7 = 0;\lint __CPAchecker_TMP_0;\l" id="139 -> 140"]
140 -> 141 [label="Line 954: \l[progCntr == 0]\l" id="140 -> 141"]
140 -> 142 [label="Line 954: \l[!(progCntr == 0)]\l" id="140 -> 142"]
142 -> 143 [label="Line 954: \lint __CPAchecker_TMP_1;\l" id="142 -> 143"]
143 -> 144 [label="Line 955: \l[progCntr == 1]\l" id="143 -> 144"]
143 -> 145 [label="Line 955: \l[!(progCntr == 1)]\l" id="143 -> 145"]
145 -> 146 [label="Line 955: \lint __CPAchecker_TMP_2;\l" id="145 -> 146"]
146 -> 147 [label="Line 956: \l[progCntr == 2]\l" id="146 -> 147"]
146 -> 148 [label="Line 956: \l[!(progCntr == 2)]\l" id="146 -> 148"]
148 -> 149 [label="Line 956: \lint __CPAchecker_TMP_3;\l" id="148 -> 149"]
149 -> 150 [label="Line 957: \l[progCntr == 3]\l" id="149 -> 150"]
149 -> 151 [label="Line 957: \l[!(progCntr == 3)]\l" id="149 -> 151"]
151 -> 152 [label="Line 957: \lint __CPAchecker_TMP_4;\l" id="151 -> 152"]
152 -> 153 [label="Line 958: \l[progCntr == 4]\l" id="152 -> 153"]
152 -> 154 [label="Line 958: \l[!(progCntr == 4)]\l" id="152 -> 154"]
154 -> 155 [label="Line 958: \lint __CPAchecker_TMP_5;\l" id="154 -> 155"]
155 -> 156 [label="Line 959: \l[progCntr == 5]\l" id="155 -> 156"]
155 -> 157 [label="Line 959: \l[!(progCntr == 5)]\l" id="155 -> 157"]
157 -> 158 [label="Line 959: \lint __CPAchecker_TMP_6;\l" id="157 -> 158"]
158 -> 159 [label="Line 960: \l[progCntr == 6]\l" id="158 -> 159"]
158 -> 160 [label="Line 960: \l[!(progCntr == 6)]\l" id="158 -> 160"]
160 -> 163 [label="Line 960: \l__CPAchecker_TMP_6 = instr7;\l" id="160 -> 163"]
163 -> 166 [label="Line 959: \l__CPAchecker_TMP_5 = __CPAchecker_TMP_6;\l" id="163 -> 166"]
166 -> 169 [label="Line 958: \l__CPAchecker_TMP_4 = __CPAchecker_TMP_5;\l" id="166 -> 169"]
169 -> 172 [label="Line 957: \l__CPAchecker_TMP_3 = __CPAchecker_TMP_4;\l" id="169 -> 172"]
172 -> 175 [label="Line 956: \l__CPAchecker_TMP_2 = __CPAchecker_TMP_3;\l" id="172 -> 175"]
175 -> 178 [label="Line 955: \l__CPAchecker_TMP_1 = __CPAchecker_TMP_2;\l" id="175 -> 178"]
178 -> 181 [label="Line 954: \l__CPAchecker_TMP_0 = __CPAchecker_TMP_1;\l" id="178 -> 181"]
181 -> 182 [label="Line 954: \l*instruction = __CPAchecker_TMP_0;\l" id="181 -> 182"]
182 -> 183 [label="Line 0: \ldefault return\l" id="182 -> 183"]
183 -> 184 [label="Line 1024: \lReturn edge from program to main\l" id="183 -> 184"]
184 -> 185 [label="Line 1025: \ldecodeOpcd(clk, instruction, &opcode)\l" id="184 -> 185"]
185 -> 186 [label="Lines 0 - 965: \lFunction start dummy edge\l*opcode = instruction & 7;\l" id="185 -> 186"]
186 -> 187 [label="Line 0: \ldefault return\l" id="186 -> 187"]
187 -> 188 [label="Line 1025: \lReturn edge from decodeOpcd to main\l" id="187 -> 188"]
188 -> 189 [label="Line 1026: \ldecodeLoc1(clk, instruction, &readLoc1)\l" id="188 -> 189"]
189 -> 190 [label="Lines 0 - 970: \lFunction start dummy edge\l*readLoc1 = (instruction >> 3) & 7;\l" id="189 -> 190"]
190 -> 191 [label="Line 0: \ldefault return\l" id="190 -> 191"]
191 -> 192 [label="Line 1026: \lReturn edge from decodeLoc1 to main\l" id="191 -> 192"]
192 -> 193 [label="Line 1027: \ldecodeLoc2(clk, instruction, &readLoc2)\l" id="192 -> 193"]
193 -> 194 [label="Lines 0 - 975: \lFunction start dummy edge\l*readLoc2 = (instruction >> 6) & 7;\l" id="193 -> 194"]
194 -> 195 [label="Line 0: \ldefault return\l" id="194 -> 195"]
195 -> 196 [label="Line 1027: \lReturn edge from decodeLoc2 to main\l" id="195 -> 196"]
196 -> 197 [label="Line 1028: \ldecodeLoc3(clk, instruction, &writeLoc)\l" id="196 -> 197"]
197 -> 198 [label="Lines 0 - 980: \lFunction start dummy edge\l*writeLoc = (instruction >> 9) & 7;\l" id="197 -> 198"]
198 -> 199 [label="Line 0: \ldefault return\l" id="198 -> 199"]
199 -> 200 [label="Line 1028: \lReturn edge from decodeLoc3 to main\l" id="199 -> 200"]
200 -> 201 [label="Line 1029: \lalu(clk, opcode, memOut1, memOut2, &aluOut)\l" id="200 -> 201"]
201 -> 202 [label="Lines 0 - 985: \lFunction start dummy edge\lint __CPAchecker_TMP_0;\l" id="201 -> 202"]
202 -> 203 [label="Line 985: \l[opcode == 0]\l" id="202 -> 203"]
202 -> 204 [label="Line 985: \l[!(opcode == 0)]\l" id="202 -> 204"]
204 -> 205 [label="Line 985: \lint __CPAchecker_TMP_1;\l" id="204 -> 205"]
205 -> 206 [label="Line 986: \l[opcode == 3]\l" id="205 -> 206"]
205 -> 207 [label="Line 986: \l[!(opcode == 3)]\l" id="205 -> 207"]
207 -> 208 [label="Line 986: \lint __CPAchecker_TMP_2;\l" id="207 -> 208"]
208 -> 209 [label="Line 987: \l[opcode == 2]\l" id="208 -> 209"]
208 -> 210 [label="Line 987: \l[!(opcode == 2)]\l" id="208 -> 210"]
210 -> 213 [label="Line 987: \l__CPAchecker_TMP_2 = 0;\l" id="210 -> 213"]
213 -> 216 [label="Line 986: \l__CPAchecker_TMP_1 = __CPAchecker_TMP_2;\l" id="213 -> 216"]
216 -> 219 [label="Line 985: \l__CPAchecker_TMP_0 = __CPAchecker_TMP_1;\l" id="216 -> 219"]
219 -> 220 [label="Line 985: \l*aluOut = __CPAchecker_TMP_0;\l" id="219 -> 220"]
220 -> 221 [label="Line 0: \ldefault return\l" id="220 -> 221"]
221 -> 222 [label="Line 1029: \lReturn edge from alu to main\l" id="221 -> 222"]
222 -> 223 [label="Line 1030: \lpc(clk, opcode, memOut1, memOut2, &progCntr)\l" id="222 -> 223"]
223 -> 224 [label="Lines 0 - 997: \lFunction start dummy edge\lunsigned char progCntr_old;\l" id="223 -> 224"]
224 -> 225 [label="Line 998: \l[((unsigned int)opcode) == 1]\l" id="224 -> 225"]
224 -> 229 [label="Line 998: \l[!(((unsigned int)opcode) == 1)]\l" id="224 -> 229"]
229 -> 230 [label="Lines 1005 - 1006: \lspc.progCntr = (spc.progCntr) + 1;\l*progCntr = (*progCntr) + 1;\l" id="229 -> 230"]
230 -> 234 [label="Line 0: \l\l" id="230 -> 234"]
234 -> 235 [label="Line 0: \ldefault return\l" id="234 -> 235"]
235 -> 236 [label="Line 1030: \lReturn edge from pc to main\l" id="235 -> 236"]
236 -> 237 [label="Line 1031: \lint __CPAchecker_TMP_0;\l" id="236 -> 237"]
237 -> 238 [label="Line 1031: \l[opcode == 1]\l" id="237 -> 238"]
237 -> 245 [label="Line 1031: \l[!(opcode == 1)]\l" id="237 -> 245"]
245 -> 248 [label="Line 0: \l__CPAchecker_TMP_0 = 1;\l" id="245 -> 248"]
248 -> 249 [label="Line 1031: \lassert(__CPAchecker_TMP_0);\l" id="248 -> 249"]
249 -> 251 [label="Line 0: \l\l" id="249 -> 251"]
238 -> 240 [label="Line 1031: \l[memOut1 == 0]\l" id="238 -> 240"]
238 -> 245 [label="Line 1031: \l[!(memOut1 == 0)]\l" id="238 -> 245"]
240 -> 244 [label="Line 1031: \l[!(progCntr == (memOut2 & 7))]\l" id="240 -> 244"]
240 -> 245 [label="Line 1031: \l[progCntr == (memOut2 & 7)]\l" id="240 -> 245"]
244 -> 248 [label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="244 -> 248"]
225 -> 227 [label="Line 998: \l[((unsigned int)operand1) == 0]\l" id="225 -> 227"]
225 -> 229 [label="Line 998: \l[!(((unsigned int)operand1) == 0)]\l" id="225 -> 229"]
227 -> 232 [label="Lines 1000 - 1001: \lspc.progCntr = operand2 & 7;\l*progCntr = operand2 & 7;\l" id="227 -> 232"]
232 -> 234 [label="Line 0: \l\l" id="232 -> 234"]
209 -> 213 [label="Line 987: \l__CPAchecker_TMP_2 = operand1 & operand2;\l" id="209 -> 213"]
206 -> 216 [label="Line 986: \l__CPAchecker_TMP_1 = operand1 ^ operand2;\l" id="206 -> 216"]
203 -> 219 [label="Line 985: \l__CPAchecker_TMP_0 = operand1 + operand2;\l" id="203 -> 219"]
159 -> 163 [label="Line 960: \l__CPAchecker_TMP_6 = instr6;\l" id="159 -> 163"]
156 -> 166 [label="Line 959: \l__CPAchecker_TMP_5 = instr5;\l" id="156 -> 166"]
153 -> 169 [label="Line 958: \l__CPAchecker_TMP_4 = instr4;\l" id="153 -> 169"]
150 -> 172 [label="Line 957: \l__CPAchecker_TMP_3 = instr3;\l" id="150 -> 172"]
147 -> 175 [label="Line 956: \l__CPAchecker_TMP_2 = instr2;\l" id="147 -> 175"]
144 -> 178 [label="Line 955: \l__CPAchecker_TMP_1 = instr1;\l" id="144 -> 178"]
141 -> 181 [label="Line 954: \l__CPAchecker_TMP_0 = instr0;\l" id="141 -> 181"]
113 -> 117 [label="Line 932: \l__CPAchecker_TMP_13 = smemory.m6;\l" id="113 -> 117"]
110 -> 120 [label="Line 931: \l__CPAchecker_TMP_12 = smemory.m5;\l" id="110 -> 120"]
107 -> 123 [label="Line 930: \l__CPAchecker_TMP_11 = smemory.m5;\l" id="107 -> 123"]
104 -> 126 [label="Line 929: \l__CPAchecker_TMP_10 = smemory.m3;\l" id="104 -> 126"]
101 -> 129 [label="Line 928: \l__CPAchecker_TMP_9 = smemory.m2;\l" id="101 -> 129"]
98 -> 132 [label="Line 927: \l__CPAchecker_TMP_8 = smemory.m1;\l" id="98 -> 132"]
95 -> 135 [label="Line 926: \l__CPAchecker_TMP_7 = smemory.m0;\l" id="95 -> 135"]
71 -> 75 [label="Line 924: \l__CPAchecker_TMP_6 = smemory.m6;\l" id="71 -> 75"]
68 -> 78 [label="Line 923: \l__CPAchecker_TMP_5 = smemory.m5;\l" id="68 -> 78"]
65 -> 81 [label="Line 922: \l__CPAchecker_TMP_4 = smemory.m5;\l" id="65 -> 81"]
62 -> 84 [label="Line 921: \l__CPAchecker_TMP_3 = smemory.m3;\l" id="62 -> 84"]
59 -> 87 [label="Line 920: \l__CPAchecker_TMP_2 = smemory.m2;\l" id="59 -> 87"]
56 -> 90 [label="Line 919: \l__CPAchecker_TMP_1 = smemory.m1;\l" id="56 -> 90"]
53 -> 93 [label="Line 918: \l__CPAchecker_TMP_0 = smemory.m0;\l" id="53 -> 93"]
8 -> 10 [label="Line 876: \l[((unsigned int)writeLoc) == 0]\l" id="8 -> 10"]
8 -> 14 [label="Line 876: \l[!(((unsigned int)writeLoc) == 0)]\l" id="8 -> 14"]
14 -> 15 [label="Line 881: \l[((unsigned int)writeLoc) == 1]\l" id="14 -> 15"]
14 -> 19 [label="Line 881: \l[!(((unsigned int)writeLoc) == 1)]\l" id="14 -> 19"]
19 -> 20 [label="Line 886: \l[((unsigned int)writeLoc) == 2]\l" id="19 -> 20"]
19 -> 24 [label="Line 886: \l[!(((unsigned int)writeLoc) == 2)]\l" id="19 -> 24"]
24 -> 25 [label="Line 891: \l[((unsigned int)writeLoc) == 3]\l" id="24 -> 25"]
24 -> 29 [label="Line 891: \l[!(((unsigned int)writeLoc) == 3)]\l" id="24 -> 29"]
29 -> 30 [label="Line 896: \l[((unsigned int)writeLoc) == 4]\l" id="29 -> 30"]
29 -> 34 [label="Line 896: \l[!(((unsigned int)writeLoc) == 4)]\l" id="29 -> 34"]
34 -> 35 [label="Line 901: \l[((unsigned int)writeLoc) == 5]\l" id="34 -> 35"]
34 -> 39 [label="Line 901: \l[!(((unsigned int)writeLoc) == 5)]\l" id="34 -> 39"]
39 -> 40 [label="Line 906: \l[((unsigned int)writeLoc) == 6]\l" id="39 -> 40"]
39 -> 44 [label="Line 906: \l[!(((unsigned int)writeLoc) == 6)]\l" id="39 -> 44"]
44 -> 45 [label="Line 911: \l[((unsigned int)writeLoc) == 7]\l" id="44 -> 45"]
44 -> 46 [label="Line 911: \l[!(((unsigned int)writeLoc) == 7)]\l" id="44 -> 46"]
46 -> 51 [label="Line 0: \l\l" id="46 -> 51"]
45 -> 49 [label="Line 913: \lsmemory.m7 = data;\l" id="45 -> 49"]
49 -> 51 [label="Line 0: \l\l" id="49 -> 51"]
40 -> 42 [label="Line 908: \lsmemory.m6 = data;\l" id="40 -> 42"]
42 -> 44 [label="Line 0: \l\l" id="42 -> 44"]
35 -> 37 [label="Line 903: \lsmemory.m5 = data;\l" id="35 -> 37"]
37 -> 39 [label="Line 0: \l\l" id="37 -> 39"]
30 -> 32 [label="Line 898: \lsmemory.m4 = data;\l" id="30 -> 32"]
32 -> 34 [label="Line 0: \l\l" id="32 -> 34"]
25 -> 27 [label="Line 893: \lsmemory.m3 = data;\l" id="25 -> 27"]
27 -> 29 [label="Line 0: \l\l" id="27 -> 29"]
20 -> 22 [label="Line 888: \lsmemory.m2 = data;\l" id="20 -> 22"]
22 -> 24 [label="Line 0: \l\l" id="22 -> 24"]
15 -> 17 [label="Line 883: \lsmemory.m1 = data;\l" id="15 -> 17"]
17 -> 19 [label="Line 0: \l\l" id="17 -> 19"]
10 -> 12 [label="Line 878: \lsmemory.m0 = data;\l" id="10 -> 12"]
12 -> 14 [label="Line 0: \l\l" id="12 -> 14"]
}
