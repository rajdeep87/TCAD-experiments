digraph CFA {
188 [shape="circle" label="N188\n230"]
218 [shape="circle" label="N218\n229"]
219 [shape="circle" label="N219\n228"]
220 [shape="circle" label="N220\n227"]
221 [shape="circle" label="N221\n226"]
222 [shape="circle" label="N222\n225"]
223 [shape="circle" label="N223\n224"]
224 [shape="circle" label="N224\n223"]
225 [shape="circle" label="N225\n222"]
226 [shape="circle" label="N226\n221"]
227 [shape="circle" label="N227\n220"]
228 [shape="circle" label="N228\n219"]
229 [shape="circle" label="N229\n218"]
230 [shape="circle" label="N230\n217"]
231 [shape="circle" label="N231\n216"]
232 [shape="circle" label="N232\n215"]
233 [shape="circle" label="N233\n214"]
234 [shape="circle" label="N234\n213"]
235 [shape="circle" label="N235\n212"]
236 [shape="circle" label="N236\n211"]
237 [shape="circle" label="N237\n210"]
238 [shape="circle" label="N238\n209"]
239 [shape="circle" label="N239\n208"]
240 [shape="circle" label="N240\n207"]
241 [shape="circle" label="N241\n206"]
242 [shape="circle" label="N242\n205"]
243 [shape="circle" label="N243\n204"]
244 [shape="circle" label="N244\n203"]
245 [shape="circle" label="N245\n202"]
246 [shape="circle" label="N246\n201"]
247 [shape="circle" label="N247\n200"]
248 [shape="circle" label="N248\n199"]
249 [shape="circle" label="N249\n198"]
250 [shape="circle" label="N250\n197"]
251 [shape="circle" label="N251\n196"]
252 [shape="circle" label="N252\n195"]
253 [shape="circle" label="N253\n194"]
254 [shape="circle" label="N254\n193"]
255 [shape="circle" label="N255\n192"]
256 [shape="circle" label="N256\n191"]
257 [shape="circle" label="N257\n190"]
258 [shape="circle" label="N258\n189"]
259 [shape="circle" label="N259\n188"]
260 [shape="circle" label="N260\n187"]
261 [shape="circle" label="N261\n186"]
262 [shape="circle" label="N262\n185"]
263 [shape="circle" label="N263\n184"]
264 [shape="circle" label="N264\n183"]
265 [shape="circle" label="N265\n182"]
266 [shape="circle" label="N266\n181"]
267 [shape="circle" label="N267\n180"]
268 [shape="circle" label="N268\n179"]
269 [shape="circle" label="N269\n178"]
270 [shape="circle" label="N270\n177"]
271 [shape="circle" label="N271\n176"]
272 [shape="circle" label="N272\n175"]
273 [shape="circle" label="N273\n174"]
274 [shape="circle" label="N274\n173"]
275 [shape="circle" label="N275\n172"]
276 [shape="circle" label="N276\n171"]
277 [shape="circle" label="N277\n170"]
278 [shape="circle" label="N278\n169"]
279 [shape="circle" label="N279\n168"]
280 [shape="circle" label="N280\n167"]
281 [shape="circle" label="N281\n166"]
282 [shape="circle" label="N282\n165"]
283 [shape="circle" label="N283\n164"]
284 [shape="circle" label="N284\n163"]
285 [shape="circle" label="N285\n162"]
286 [shape="circle" label="N286\n161"]
287 [shape="circle" label="N287\n160"]
288 [shape="circle" label="N288\n159"]
289 [shape="circle" label="N289\n158"]
290 [shape="circle" label="N290\n157"]
291 [shape="circle" label="N291\n156"]
292 [shape="circle" label="N292\n155"]
293 [shape="circle" label="N293\n154"]
294 [shape="circle" label="N294\n153"]
295 [shape="circle" label="N295\n152"]
296 [shape="circle" label="N296\n151"]
297 [shape="circle" label="N297\n150"]
298 [shape="circle" label="N298\n149"]
299 [shape="circle" label="N299\n148"]
300 [shape="circle" label="N300\n147"]
301 [shape="circle" label="N301\n146"]
302 [shape="circle" label="N302\n145"]
303 [shape="circle" label="N303\n144"]
304 [shape="circle" label="N304\n143"]
305 [shape="circle" label="N305\n142"]
306 [shape="circle" label="N306\n141"]
307 [shape="circle" label="N307\n140"]
308 [shape="circle" label="N308\n139"]
309 [shape="circle" label="N309\n138"]
310 [shape="circle" label="N310\n137"]
311 [shape="circle" label="N311\n136"]
312 [shape="circle" label="N312\n135"]
313 [shape="circle" label="N313\n134"]
314 [shape="circle" label="N314\n133"]
315 [shape="circle" label="N315\n132"]
316 [shape="circle" label="N316\n131"]
317 [shape="circle" label="N317\n130"]
318 [shape="circle" label="N318\n129"]
319 [shape="circle" label="N319\n128"]
320 [shape="circle" label="N320\n127"]
321 [shape="circle" label="N321\n126"]
322 [shape="circle" label="N322\n125"]
323 [shape="circle" label="N323\n124"]
324 [shape="circle" label="N324\n123"]
325 [shape="circle" label="N325\n122"]
326 [shape="circle" label="N326\n121"]
327 [shape="circle" label="N327\n120"]
328 [shape="circle" label="N328\n119"]
329 [shape="circle" label="N329\n118"]
330 [shape="circle" label="N330\n117"]
331 [shape="circle" label="N331\n116"]
332 [shape="circle" label="N332\n115"]
333 [shape="circle" label="N333\n114"]
334 [shape="circle" label="N334\n113"]
335 [shape="circle" label="N335\n112"]
336 [shape="circle" label="N336\n111"]
337 [shape="circle" label="N337\n110"]
338 [shape="circle" label="N338\n109"]
339 [shape="circle" label="N339\n108"]
340 [shape="circle" label="N340\n107"]
341 [shape="circle" label="N341\n106"]
342 [shape="circle" label="N342\n105"]
343 [shape="circle" label="N343\n104"]
344 [shape="circle" label="N344\n103"]
345 [shape="circle" label="N345\n102"]
346 [shape="circle" label="N346\n101"]
347 [shape="circle" label="N347\n100"]
348 [shape="circle" label="N348\n99"]
349 [shape="circle" label="N349\n98"]
350 [shape="circle" label="N350\n97"]
351 [shape="circle" label="N351\n96"]
352 [shape="circle" label="N352\n95"]
353 [shape="circle" label="N353\n94"]
354 [shape="circle" label="N354\n93"]
355 [shape="circle" label="N355\n92"]
356 [shape="circle" label="N356\n91"]
357 [shape="circle" label="N357\n90"]
358 [shape="circle" label="N358\n89"]
359 [shape="circle" label="N359\n88"]
360 [shape="circle" label="N360\n87"]
361 [shape="circle" label="N361\n86"]
362 [shape="circle" label="N362\n85"]
363 [shape="circle" label="N363\n84"]
364 [shape="circle" label="N364\n83"]
365 [shape="circle" label="N365\n82"]
366 [shape="circle" label="N366\n81"]
367 [shape="circle" label="N367\n80"]
368 [shape="circle" label="N368\n79"]
369 [shape="circle" label="N369\n78"]
370 [shape="circle" label="N370\n77"]
371 [shape="circle" label="N371\n76"]
372 [shape="circle" label="N372\n75"]
373 [shape="circle" label="N373\n74"]
374 [shape="circle" label="N374\n73"]
375 [shape="circle" label="N375\n72"]
376 [shape="circle" label="N376\n71"]
377 [shape="circle" label="N377\n70"]
378 [shape="circle" label="N378\n69"]
379 [shape="circle" label="N379\n68"]
380 [shape="circle" label="N380\n67"]
381 [shape="circle" label="N381\n66"]
382 [shape="circle" label="N382\n65"]
383 [shape="circle" label="N383\n64"]
384 [shape="circle" label="N384\n63"]
385 [shape="circle" label="N385\n62"]
386 [shape="circle" label="N386\n61"]
387 [shape="circle" label="N387\n60"]
388 [shape="circle" label="N388\n59"]
389 [shape="circle" label="N389\n58"]
390 [shape="circle" label="N390\n57"]
391 [shape="circle" label="N391\n56"]
392 [shape="circle" label="N392\n55"]
393 [shape="circle" label="N393\n54"]
394 [shape="circle" label="N394\n53"]
395 [shape="circle" label="N395\n52"]
396 [shape="circle" label="N396\n51"]
397 [shape="circle" label="N397\n50"]
398 [shape="circle" label="N398\n49"]
399 [shape="circle" label="N399\n48"]
400 [shape="circle" label="N400\n47"]
401 [shape="circle" label="N401\n46"]
402 [shape="circle" label="N402\n45"]
403 [shape="circle" label="N403\n44"]
404 [shape="circle" label="N404\n43"]
405 [shape="circle" label="N405\n42"]
406 [shape="circle" label="N406\n41"]
407 [shape="circle" label="N407\n40"]
408 [shape="circle" label="N408\n39"]
409 [shape="circle" label="N409\n38"]
410 [shape="circle" label="N410\n37"]
411 [shape="circle" label="N411\n36"]
412 [shape="circle" label="N412\n35"]
413 [shape="circle" label="N413\n34"]
414 [shape="circle" label="N414\n33"]
415 [shape="circle" label="N415\n32"]
416 [shape="circle" label="N416\n31"]
417 [shape="circle" label="N417\n30"]
418 [shape="circle" label="N418\n29"]
419 [shape="circle" label="N419\n28"]
189 [shape="circle" label="N189\n27"]
190 [shape="circle" label="N190\n26"]
191 [shape="circle" label="N191\n25"]
192 [shape="circle" label="N192\n24"]
193 [shape="circle" label="N193\n23"]
194 [shape="circle" label="N194\n22"]
195 [shape="circle" label="N195\n21"]
196 [shape="circle" label="N196\n20"]
197 [shape="circle" label="N197\n19"]
198 [shape="circle" label="N198\n18"]
199 [shape="circle" label="N199\n17"]
200 [shape="doublecircle" label="N200\n16"]
201 [shape="circle" label="N201\n15"]
1 [shape="circle" label="N1\n94"]
2 [shape="circle" label="N2\n93"]
3 [shape="circle" label="N3\n92"]
4 [shape="circle" label="N4\n91"]
5 [shape="circle" label="N5\n90"]
6 [shape="circle" label="N6\n89"]
7 [shape="circle" label="N7\n88"]
8 [shape="circle" label="N8\n87"]
9 [shape="circle" label="N9\n86"]
10 [shape="diamond" label="N10\n85"]
11 [shape="circle" label="N11\n59"]
37 [shape="diamond" label="N37\n58"]
39 [shape="circle" label="N39\n57"]
41 [shape="diamond" label="N41\n56"]
43 [shape="circle" label="N43\n55"]
45 [shape="diamond" label="N45\n54"]
47 [shape="circle" label="N47\n53"]
49 [shape="diamond" label="N49\n52"]
51 [shape="circle" label="N51\n51"]
53 [shape="diamond" label="N53\n50"]
55 [shape="circle" label="N55\n49"]
57 [shape="diamond" label="N57\n48"]
59 [shape="circle" label="N59\n47"]
61 [shape="diamond" label="N61\n46"]
63 [shape="circle" label="N63\n45"]
64 [shape="circle" label="N64\n43"]
60 [shape="circle" label="N60\n41"]
56 [shape="circle" label="N56\n39"]
52 [shape="circle" label="N52\n37"]
48 [shape="circle" label="N48\n35"]
44 [shape="circle" label="N44\n33"]
40 [shape="circle" label="N40\n31"]
65 [shape="circle" label="N65\n30"]
66 [shape="diamond" label="N66\n29"]
68 [shape="circle" label="N68\n28"]
70 [shape="diamond" label="N70\n27"]
72 [shape="circle" label="N72\n26"]
74 [shape="diamond" label="N74\n25"]
76 [shape="circle" label="N76\n24"]
78 [shape="diamond" label="N78\n23"]
80 [shape="circle" label="N80\n22"]
82 [shape="diamond" label="N82\n21"]
84 [shape="circle" label="N84\n20"]
86 [shape="diamond" label="N86\n19"]
88 [shape="circle" label="N88\n18"]
90 [shape="diamond" label="N90\n17"]
92 [shape="circle" label="N92\n16"]
93 [shape="circle" label="N93\n14"]
89 [shape="circle" label="N89\n12"]
85 [shape="circle" label="N85\n10"]
81 [shape="circle" label="N81\n8"]
77 [shape="circle" label="N77\n6"]
73 [shape="circle" label="N73\n4"]
69 [shape="circle" label="N69\n2"]
94 [shape="circle" label="N94\n1"]
0 [shape="circle" label="N0\n0"]
203 [shape="circle" label="N203\n14"]
96 [shape="circle" label="N96\n47"]
97 [shape="circle" label="N97\n46"]
98 [shape="circle" label="N98\n45"]
99 [shape="circle" label="N99\n44"]
100 [shape="circle" label="N100\n43"]
101 [shape="circle" label="N101\n42"]
102 [shape="circle" label="N102\n41"]
103 [shape="circle" label="N103\n40"]
104 [shape="circle" label="N104\n39"]
105 [shape="circle" label="N105\n38"]
106 [shape="circle" label="N106\n37"]
107 [shape="circle" label="N107\n36"]
108 [shape="circle" label="N108\n35"]
109 [shape="circle" label="N109\n34"]
110 [shape="circle" label="N110\n33"]
111 [shape="circle" label="N111\n32"]
112 [shape="circle" label="N112\n31"]
113 [shape="circle" label="N113\n30"]
114 [shape="diamond" label="N114\n29"]
116 [shape="circle" label="N116\n28"]
118 [shape="diamond" label="N118\n27"]
120 [shape="circle" label="N120\n26"]
122 [shape="diamond" label="N122\n25"]
124 [shape="circle" label="N124\n24"]
126 [shape="diamond" label="N126\n23"]
128 [shape="circle" label="N128\n22"]
130 [shape="diamond" label="N130\n21"]
132 [shape="circle" label="N132\n20"]
134 [shape="diamond" label="N134\n19"]
136 [shape="circle" label="N136\n18"]
138 [shape="diamond" label="N138\n17"]
140 [shape="circle" label="N140\n16"]
141 [shape="circle" label="N141\n14"]
137 [shape="circle" label="N137\n12"]
133 [shape="circle" label="N133\n10"]
129 [shape="circle" label="N129\n8"]
125 [shape="circle" label="N125\n6"]
121 [shape="circle" label="N121\n4"]
117 [shape="circle" label="N117\n2"]
142 [shape="circle" label="N142\n1"]
95 [shape="circle" label="N95\n0"]
204 [shape="circle" label="N204\n13"]
144 [shape="circle" label="N144\n3"]
145 [shape="circle" label="N145\n2"]
146 [shape="circle" label="N146\n1"]
143 [shape="circle" label="N143\n0"]
205 [shape="circle" label="N205\n12"]
148 [shape="circle" label="N148\n3"]
149 [shape="circle" label="N149\n2"]
150 [shape="circle" label="N150\n1"]
147 [shape="circle" label="N147\n0"]
206 [shape="circle" label="N206\n11"]
152 [shape="circle" label="N152\n3"]
153 [shape="circle" label="N153\n2"]
154 [shape="circle" label="N154\n1"]
151 [shape="circle" label="N151\n0"]
207 [shape="circle" label="N207\n10"]
156 [shape="circle" label="N156\n3"]
157 [shape="circle" label="N157\n2"]
158 [shape="circle" label="N158\n1"]
155 [shape="circle" label="N155\n0"]
208 [shape="circle" label="N208\n9"]
160 [shape="circle" label="N160\n15"]
161 [shape="circle" label="N161\n14"]
162 [shape="diamond" label="N162\n13"]
164 [shape="circle" label="N164\n12"]
166 [shape="diamond" label="N166\n11"]
168 [shape="circle" label="N168\n10"]
170 [shape="diamond" label="N170\n9"]
172 [shape="circle" label="N172\n8"]
173 [shape="circle" label="N173\n6"]
169 [shape="circle" label="N169\n4"]
165 [shape="circle" label="N165\n2"]
174 [shape="circle" label="N174\n1"]
159 [shape="circle" label="N159\n0"]
209 [shape="circle" label="N209\n8"]
176 [shape="circle" label="N176\n11"]
177 [shape="circle" label="N177\n10"]
178 [shape="diamond" label="N178\n9"]
181 [shape="circle" label="N181\n7"]
185 [shape="circle" label="N185\n6"]
186 [shape="circle" label="N186\n5"]
179 [shape="circle" label="N179\n1"]
175 [shape="circle" label="N175\n0"]
210 [shape="circle" label="N210\n7"]
211 [shape="diamond" label="N211\n6"]
213 [shape="circle" label="N213\n2"]
216 [shape="circle" label="N216\n1"]
217 [shape="circle" label="N217\n0"]
215 [shape="diamond" label="N215\n5"]
212 [shape="diamond" label="N212\n4"]
214 [shape="circle" label="N214\n3"]
182 [shape="diamond" label="N182\n8"]
180 [shape="circle" label="N180\n4"]
183 [shape="circle" label="N183\n3"]
184 [shape="circle" label="N184\n2"]
171 [shape="circle" label="N171\n7"]
167 [shape="circle" label="N167\n5"]
163 [shape="circle" label="N163\n3"]
139 [shape="circle" label="N139\n15"]
135 [shape="circle" label="N135\n13"]
131 [shape="circle" label="N131\n11"]
127 [shape="circle" label="N127\n9"]
123 [shape="circle" label="N123\n7"]
119 [shape="circle" label="N119\n5"]
115 [shape="circle" label="N115\n3"]
91 [shape="circle" label="N91\n15"]
87 [shape="circle" label="N87\n13"]
83 [shape="circle" label="N83\n11"]
79 [shape="circle" label="N79\n9"]
75 [shape="circle" label="N75\n7"]
71 [shape="circle" label="N71\n5"]
67 [shape="circle" label="N67\n3"]
62 [shape="circle" label="N62\n44"]
58 [shape="circle" label="N58\n42"]
54 [shape="circle" label="N54\n40"]
50 [shape="circle" label="N50\n38"]
46 [shape="circle" label="N46\n36"]
42 [shape="circle" label="N42\n34"]
38 [shape="circle" label="N38\n32"]
12 [shape="diamond" label="N12\n84"]
13 [shape="diamond" label="N13\n81"]
16 [shape="diamond" label="N16\n78"]
19 [shape="diamond" label="N19\n75"]
22 [shape="diamond" label="N22\n72"]
25 [shape="diamond" label="N25\n69"]
28 [shape="diamond" label="N28\n66"]
31 [shape="diamond" label="N31\n63"]
34 [shape="circle" label="N34\n62"]
35 [shape="circle" label="N35\n61"]
36 [shape="circle" label="N36\n60"]
32 [shape="circle" label="N32\n65"]
33 [shape="circle" label="N33\n64"]
29 [shape="circle" label="N29\n68"]
30 [shape="circle" label="N30\n67"]
26 [shape="circle" label="N26\n71"]
27 [shape="circle" label="N27\n70"]
23 [shape="circle" label="N23\n74"]
24 [shape="circle" label="N24\n73"]
20 [shape="circle" label="N20\n77"]
21 [shape="circle" label="N21\n76"]
17 [shape="circle" label="N17\n80"]
18 [shape="circle" label="N18\n79"]
14 [shape="circle" label="N14\n83"]
15 [shape="circle" label="N15\n82"]
node [shape="circle"]
subgraph cluster_alu {
label="alu()"
160 -> 161 [label="Function start dummy edge"]
161 -> 162 [label="int __CPAchecker_TMP_0;"]
162 -> 163 [label="[opcode == 0]"]
162 -> 164 [label="[!(opcode == 0)]"]
164 -> 166 [label="int __CPAchecker_TMP_1;"]
166 -> 167 [label="[opcode == 3]"]
166 -> 168 [label="[!(opcode == 3)]"]
168 -> 170 [label="int __CPAchecker_TMP_2;"]
170 -> 171 [label="[opcode == 2]"]
170 -> 172 [label="[!(opcode == 2)]"]
172 -> 173 [label="__CPAchecker_TMP_2 = 0;"]
173 -> 169 [label="__CPAchecker_TMP_1 = __CPAchecker_TMP_2;"]
169 -> 165 [label="__CPAchecker_TMP_0 = __CPAchecker_TMP_1;"]
165 -> 174 [label="*aluOut = __CPAchecker_TMP_0;"]
174 -> 159 [label="default return"]
171 -> 173 [label="__CPAchecker_TMP_2 = operand1 & operand2;"]
167 -> 169 [label="__CPAchecker_TMP_1 = operand1 ^ operand2;"]
163 -> 165 [label="__CPAchecker_TMP_0 = operand1 + operand2;"]}
subgraph cluster_decodeLoc1 {
label="decodeLoc1()"
148 -> 149 [label="Function start dummy edge"]
149 -> 150 [label="*readLoc1 = (instruction >> 3) & 7;"]
150 -> 147 [label="default return"]}
subgraph cluster_decodeLoc2 {
label="decodeLoc2()"
152 -> 153 [label="Function start dummy edge"]
153 -> 154 [label="*readLoc2 = (instruction >> 6) & 7;"]
154 -> 151 [label="default return"]}
subgraph cluster_decodeLoc3 {
label="decodeLoc3()"
156 -> 157 [label="Function start dummy edge"]
157 -> 158 [label="*writeLoc = (instruction >> 9) & 7;"]
158 -> 155 [label="default return"]}
subgraph cluster_decodeOpcd {
label="decodeOpcd()"
144 -> 145 [label="Function start dummy edge"]
145 -> 146 [label="*opcode = instruction & 7;"]
146 -> 143 [label="default return"]}
subgraph cluster_main {
label="main()"
188 -> 218 [label="INIT GLOBAL VARS"]
218 -> 219 [label="typedef unsigned long int size_t;"]
219 -> 220 [label="typedef unsigned char __u_char;"]
220 -> 221 [label="typedef unsigned short int __u_short;"]
221 -> 222 [label="typedef unsigned int __u_int;"]
222 -> 223 [label="typedef unsigned long int __u_long;"]
223 -> 224 [label="typedef signed char __int8_t;"]
224 -> 225 [label="typedef unsigned char __uint8_t;"]
225 -> 226 [label="typedef signed short int __int16_t;"]
226 -> 227 [label="typedef unsigned short int __uint16_t;"]
227 -> 228 [label="typedef signed int __int32_t;"]
228 -> 229 [label="typedef unsigned int __uint32_t;"]
229 -> 230 [label="typedef signed long int __int64_t;"]
230 -> 231 [label="typedef unsigned long int __uint64_t;"]
231 -> 232 [label="typedef long int __quad_t;"]
232 -> 233 [label="typedef unsigned long int __u_quad_t;"]
233 -> 234 [label="typedef unsigned long int __dev_t;"]
234 -> 235 [label="typedef unsigned int __uid_t;"]
235 -> 236 [label="typedef unsigned int __gid_t;"]
236 -> 237 [label="typedef unsigned long int __ino_t;"]
237 -> 238 [label="typedef unsigned long int __ino64_t;"]
238 -> 239 [label="typedef unsigned int __mode_t;"]
239 -> 240 [label="typedef unsigned long int __nlink_t;"]
240 -> 241 [label="typedef long int __off_t;"]
241 -> 242 [label="typedef long int __off64_t;"]
242 -> 243 [label="typedef int __pid_t;"]
243 -> 244 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
244 -> 245 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
245 -> 246 [label="typedef long int __clock_t;"]
246 -> 247 [label="typedef unsigned long int __rlim_t;"]
247 -> 248 [label="typedef unsigned long int __rlim64_t;"]
248 -> 249 [label="typedef unsigned int __id_t;"]
249 -> 250 [label="typedef long int __time_t;"]
250 -> 251 [label="typedef unsigned int __useconds_t;"]
251 -> 252 [label="typedef long int __suseconds_t;"]
252 -> 253 [label="typedef int __daddr_t;"]
253 -> 254 [label="typedef int __key_t;"]
254 -> 255 [label="typedef int __clockid_t;"]
255 -> 256 [label="typedef void *__timer_t;"]
256 -> 257 [label="typedef long int __blksize_t;"]
257 -> 258 [label="typedef long int __blkcnt_t;"]
258 -> 259 [label="typedef long int __blkcnt64_t;"]
259 -> 260 [label="typedef unsigned long int __fsblkcnt_t;"]
260 -> 261 [label="typedef unsigned long int __fsblkcnt64_t;"]
261 -> 262 [label="typedef unsigned long int __fsfilcnt_t;"]
262 -> 263 [label="typedef unsigned long int __fsfilcnt64_t;"]
263 -> 264 [label="typedef long int __fsword_t;"]
264 -> 265 [label="typedef long int __ssize_t;"]
265 -> 266 [label="typedef long int __syscall_slong_t;"]
266 -> 267 [label="typedef unsigned long int __syscall_ulong_t;"]
267 -> 268 [label="typedef __off64_t __loff_t;"]
268 -> 269 [label="typedef __quad_t *__qaddr_t;"]
269 -> 270 [label="typedef char *__caddr_t;"]
270 -> 271 [label="typedef long int __intptr_t;"]
271 -> 272 [label="typedef unsigned int __socklen_t;"]
272 -> 273 [label="struct _IO_FILE ;"]
273 -> 274 [label="typedef struct _IO_FILE FILE;"]
274 -> 275 [label="typedef struct _IO_FILE __FILE;"]
275 -> 276 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
276 -> 277 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
277 -> 278 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
278 -> 279 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
279 -> 280 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
280 -> 281 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
281 -> 282 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
282 -> 283 [label="typedef __builtin_va_list __gnuc_va_list;"]
283 -> 284 [label="struct _IO_jump_t ;"]
284 -> 285 [label="typedef void _IO_lock_t;"]
285 -> 286 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
286 -> 287 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
287 -> 288 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
288 -> 289 [label="typedef struct _IO_FILE _IO_FILE;"]
289 -> 290 [label="struct _IO_FILE_plus ;"]
290 -> 291 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
291 -> 292 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
292 -> 293 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
293 -> 294 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
294 -> 295 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
295 -> 296 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
296 -> 297 [label="typedef int __io_close_fn(void *__cookie);"]
297 -> 298 [label="int __underflow(_IO_FILE *);"]
298 -> 299 [label="int __uflow(_IO_FILE *);"]
299 -> 300 [label="int __overflow(_IO_FILE *, int);"]
300 -> 301 [label="int _IO_getc(_IO_FILE *__fp);"]
301 -> 302 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
302 -> 303 [label="int _IO_feof(_IO_FILE *__fp);"]
303 -> 304 [label="int _IO_ferror(_IO_FILE *__fp);"]
304 -> 305 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
305 -> 306 [label="void _IO_flockfile(_IO_FILE *);"]
306 -> 307 [label="void _IO_funlockfile(_IO_FILE *);"]
307 -> 308 [label="int _IO_ftrylockfile(_IO_FILE *);"]
308 -> 309 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
309 -> 310 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
310 -> 311 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
311 -> 312 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
312 -> 313 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
313 -> 314 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
314 -> 315 [label="void _IO_free_backup_area(_IO_FILE *);"]
315 -> 316 [label="typedef __gnuc_va_list va_list;"]
316 -> 317 [label="typedef __off_t off_t;"]
317 -> 318 [label="typedef __ssize_t ssize_t;"]
318 -> 319 [label="typedef _G_fpos_t fpos_t;"]
319 -> 320 [label="extern struct _IO_FILE *stdin;"]
320 -> 321 [label="extern struct _IO_FILE *stdout;"]
321 -> 322 [label="extern struct _IO_FILE *stderr;"]
322 -> 323 [label="int remove(const char *__filename);"]
323 -> 324 [label="int rename(const char *__old, const char *__new);"]
324 -> 325 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
325 -> 326 [label="FILE * tmpfile();"]
326 -> 327 [label="char * tmpnam(char *__s);"]
327 -> 328 [label="char * tmpnam_r(char *__s);"]
328 -> 329 [label="char * tempnam(const char *__dir, const char *__pfx);"]
329 -> 330 [label="int fclose(FILE *__stream);"]
330 -> 331 [label="int fflush(FILE *__stream);"]
331 -> 332 [label="int fflush_unlocked(FILE *__stream);"]
332 -> 333 [label="FILE * fopen(const char *__filename, const char *__modes);"]
333 -> 334 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
334 -> 335 [label="FILE * fdopen(int __fd, const char *__modes);"]
335 -> 336 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
336 -> 337 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
337 -> 338 [label="void setbuf(FILE *__stream, char *__buf);"]
338 -> 339 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
339 -> 340 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
340 -> 341 [label="void setlinebuf(FILE *__stream);"]
341 -> 342 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
342 -> 343 [label="int printf(const char *__format, ...);"]
343 -> 344 [label="int sprintf(char *__s, const char *__format, ...);"]
344 -> 345 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
345 -> 346 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
346 -> 347 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
347 -> 348 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
348 -> 349 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
349 -> 350 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
350 -> 351 [label="int dprintf(int __fd, const char *__fmt, ...);"]
351 -> 352 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
352 -> 353 [label="int scanf(const char *__format, ...);"]
353 -> 354 [label="int sscanf(const char *__s, const char *__format, ...);"]
354 -> 355 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
355 -> 356 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
356 -> 357 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
357 -> 358 [label="int fgetc(FILE *__stream);"]
358 -> 359 [label="int getc(FILE *__stream);"]
359 -> 360 [label="int getchar();"]
360 -> 361 [label="int getc_unlocked(FILE *__stream);"]
361 -> 362 [label="int getchar_unlocked();"]
362 -> 363 [label="int fgetc_unlocked(FILE *__stream);"]
363 -> 364 [label="int fputc(int __c, FILE *__stream);"]
364 -> 365 [label="int putc(int __c, FILE *__stream);"]
365 -> 366 [label="int putchar(int __c);"]
366 -> 367 [label="int fputc_unlocked(int __c, FILE *__stream);"]
367 -> 368 [label="int putc_unlocked(int __c, FILE *__stream);"]
368 -> 369 [label="int putchar_unlocked(int __c);"]
369 -> 370 [label="int getw(FILE *__stream);"]
370 -> 371 [label="int putw(int __w, FILE *__stream);"]
371 -> 372 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
372 -> 373 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
373 -> 374 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
374 -> 375 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
375 -> 376 [label="int fputs(const char *__s, FILE *__stream);"]
376 -> 377 [label="int puts(const char *__s);"]
377 -> 378 [label="int ungetc(int __c, FILE *__stream);"]
378 -> 379 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
379 -> 380 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
380 -> 381 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
381 -> 382 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
382 -> 383 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
383 -> 384 [label="long int ftell(FILE *__stream);"]
384 -> 385 [label="void rewind(FILE *__stream);"]
385 -> 386 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
386 -> 387 [label="__off_t  ftello(FILE *__stream);"]
387 -> 388 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
388 -> 389 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
389 -> 390 [label="void clearerr(FILE *__stream);"]
390 -> 391 [label="int feof(FILE *__stream);"]
391 -> 392 [label="int ferror(FILE *__stream);"]
392 -> 393 [label="void clearerr_unlocked(FILE *__stream);"]
393 -> 394 [label="int feof_unlocked(FILE *__stream);"]
394 -> 395 [label="int ferror_unlocked(FILE *__stream);"]
395 -> 396 [label="void perror(const char *__s);"]
396 -> 397 [label="extern int sys_nerr;"]
397 -> 398 [label="extern const const char *sys_errlist[];"]
398 -> 399 [label="int fileno(FILE *__stream);"]
399 -> 400 [label="int fileno_unlocked(FILE *__stream);"]
400 -> 401 [label="FILE * popen(const char *__command, const char *__modes);"]
401 -> 402 [label="int pclose(FILE *__stream);"]
402 -> 403 [label="char * ctermid(char *__s);"]
403 -> 404 [label="void flockfile(FILE *__stream);"]
404 -> 405 [label="int ftrylockfile(FILE *__stream);"]
405 -> 406 [label="void funlockfile(FILE *__stream);"]
406 -> 407 [label="struct state_elements_memory {   unsigned char m2;   unsigned char m3;   unsigned char m4;   unsigned char m5;   unsigned char m6;   unsigned char m7;   unsigned char m0;   unsigned char m1; } ;"]
407 -> 408 [label="struct state_elements_memory smemory = {  };"]
408 -> 409 [label="void memory(_Bool clk, unsigned char opcode, unsigned char readLoc1, unsigned char readLoc2, unsigned char writeLoc, unsigned char data, unsigned char *memOut1, unsigned char *memOut2);"]
409 -> 410 [label="void program(_Bool clk, unsigned char progCntr, unsigned short int *instruction);"]
410 -> 411 [label="void decodeOpcd(_Bool clk, unsigned short int instruction, unsigned char *opcode);"]
411 -> 412 [label="void decodeLoc1(_Bool clk, unsigned short int instruction, unsigned char *readLoc1);"]
412 -> 413 [label="void decodeLoc2(_Bool clk, unsigned short int instruction, unsigned char *readLoc2);"]
413 -> 414 [label="void decodeLoc3(_Bool clk, unsigned short int instruction, unsigned char *writeLoc);"]
414 -> 415 [label="void alu(_Bool clk, unsigned char opcode, unsigned char operand1, unsigned char operand2, unsigned char *aluOut);"]
415 -> 416 [label="struct state_elements_pc {   unsigned char progCntr; } ;"]
416 -> 417 [label="struct state_elements_pc spc = {  };"]
417 -> 418 [label="void pc(_Bool clk, unsigned char opcode, unsigned char operand1, unsigned char operand2, unsigned char *progCntr);"]
418 -> 419 [label="int main();"]
419 -> 189 [label="Function start dummy edge"]
189 -> 190 [label="_Bool clk;"]
190 -> 191 [label="unsigned char aluOut;"]
191 -> 192 [label="unsigned char memOut1;"]
192 -> 193 [label="unsigned char memOut2;"]
193 -> 194 [label="unsigned char readLoc1;"]
194 -> 195 [label="unsigned char readLoc2;"]
195 -> 196 [label="unsigned char writeLoc;"]
196 -> 197 [label="unsigned char progCntr;"]
197 -> 198 [label="unsigned short int instruction;"]
198 -> 199 [label="unsigned char opcode;"]
199 -> 200 [label="while"]
200 -> 201 [label=""]
201 -> 203 [label="memory(clk, opcode, readLoc1, readLoc2, writeLoc, aluOut, &memOut1, &memOut2);" style="dotted" arrowhead="empty"]
203 -> 204 [label="program(clk, progCntr, &instruction);" style="dotted" arrowhead="empty"]
204 -> 205 [label="decodeOpcd(clk, instruction, &opcode);" style="dotted" arrowhead="empty"]
205 -> 206 [label="decodeLoc1(clk, instruction, &readLoc1);" style="dotted" arrowhead="empty"]
206 -> 207 [label="decodeLoc2(clk, instruction, &readLoc2);" style="dotted" arrowhead="empty"]
207 -> 208 [label="decodeLoc3(clk, instruction, &writeLoc);" style="dotted" arrowhead="empty"]
208 -> 209 [label="alu(clk, opcode, memOut1, memOut2, &aluOut);" style="dotted" arrowhead="empty"]
209 -> 210 [label="pc(clk, opcode, memOut1, memOut2, &progCntr);" style="dotted" arrowhead="empty"]
210 -> 211 [label="int __CPAchecker_TMP_0;"]
211 -> 215 [label="[opcode == 1]"]
211 -> 213 [label="[!(opcode == 1)]"]
213 -> 216 [label="__CPAchecker_TMP_0 = 1;"]
216 -> 217 [label="assert(__CPAchecker_TMP_0);"]
217 -> 200 [label=""]
215 -> 212 [label="[memOut1 == 0]"]
215 -> 213 [label="[!(memOut1 == 0)]"]
212 -> 213 [label="[progCntr == (memOut2 & 7)]"]
212 -> 214 [label="[!(progCntr == (memOut2 & 7))]"]
214 -> 216 [label="__CPAchecker_TMP_0 = 0;"]}
subgraph cluster_memory {
label="memory()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="unsigned char m0_old;"]
3 -> 4 [label="unsigned char m1_old;"]
4 -> 5 [label="unsigned char m2_old;"]
5 -> 6 [label="unsigned char m3_old;"]
6 -> 7 [label="unsigned char m4_old;"]
7 -> 8 [label="unsigned char m5_old;"]
8 -> 9 [label="unsigned char m6_old;"]
9 -> 10 [label="unsigned char m7_old;"]
10 -> 12 [label="[((unsigned int)opcode) != 1]"]
10 -> 11 [label="[!(((unsigned int)opcode) != 1)]"]
11 -> 37 [label="int __CPAchecker_TMP_0;"]
37 -> 38 [label="[readLoc1 == 0]"]
37 -> 39 [label="[!(readLoc1 == 0)]"]
39 -> 41 [label="int __CPAchecker_TMP_1;"]
41 -> 42 [label="[readLoc1 == 1]"]
41 -> 43 [label="[!(readLoc1 == 1)]"]
43 -> 45 [label="int __CPAchecker_TMP_2;"]
45 -> 46 [label="[readLoc1 == 2]"]
45 -> 47 [label="[!(readLoc1 == 2)]"]
47 -> 49 [label="int __CPAchecker_TMP_3;"]
49 -> 50 [label="[readLoc1 == 3]"]
49 -> 51 [label="[!(readLoc1 == 3)]"]
51 -> 53 [label="int __CPAchecker_TMP_4;"]
53 -> 54 [label="[readLoc1 == 4]"]
53 -> 55 [label="[!(readLoc1 == 4)]"]
55 -> 57 [label="int __CPAchecker_TMP_5;"]
57 -> 58 [label="[readLoc1 == 5]"]
57 -> 59 [label="[!(readLoc1 == 5)]"]
59 -> 61 [label="int __CPAchecker_TMP_6;"]
61 -> 62 [label="[readLoc1 == 6]"]
61 -> 63 [label="[!(readLoc1 == 6)]"]
63 -> 64 [label="__CPAchecker_TMP_6 = smemory.m7;"]
64 -> 60 [label="__CPAchecker_TMP_5 = __CPAchecker_TMP_6;"]
60 -> 56 [label="__CPAchecker_TMP_4 = __CPAchecker_TMP_5;"]
56 -> 52 [label="__CPAchecker_TMP_3 = __CPAchecker_TMP_4;"]
52 -> 48 [label="__CPAchecker_TMP_2 = __CPAchecker_TMP_3;"]
48 -> 44 [label="__CPAchecker_TMP_1 = __CPAchecker_TMP_2;"]
44 -> 40 [label="__CPAchecker_TMP_0 = __CPAchecker_TMP_1;"]
40 -> 65 [label="*memOut1 = __CPAchecker_TMP_0;"]
65 -> 66 [label="int __CPAchecker_TMP_7;"]
66 -> 67 [label="[readLoc2 == 0]"]
66 -> 68 [label="[!(readLoc2 == 0)]"]
68 -> 70 [label="int __CPAchecker_TMP_8;"]
70 -> 71 [label="[readLoc2 == 1]"]
70 -> 72 [label="[!(readLoc2 == 1)]"]
72 -> 74 [label="int __CPAchecker_TMP_9;"]
74 -> 75 [label="[readLoc2 == 2]"]
74 -> 76 [label="[!(readLoc2 == 2)]"]
76 -> 78 [label="int __CPAchecker_TMP_10;"]
78 -> 79 [label="[readLoc2 == 3]"]
78 -> 80 [label="[!(readLoc2 == 3)]"]
80 -> 82 [label="int __CPAchecker_TMP_11;"]
82 -> 83 [label="[readLoc2 == 4]"]
82 -> 84 [label="[!(readLoc2 == 4)]"]
84 -> 86 [label="int __CPAchecker_TMP_12;"]
86 -> 87 [label="[readLoc2 == 5]"]
86 -> 88 [label="[!(readLoc2 == 5)]"]
88 -> 90 [label="int __CPAchecker_TMP_13;"]
90 -> 91 [label="[readLoc2 == 6]"]
90 -> 92 [label="[!(readLoc2 == 6)]"]
92 -> 93 [label="__CPAchecker_TMP_13 = smemory.m7;"]
93 -> 89 [label="__CPAchecker_TMP_12 = __CPAchecker_TMP_13;"]
89 -> 85 [label="__CPAchecker_TMP_11 = __CPAchecker_TMP_12;"]
85 -> 81 [label="__CPAchecker_TMP_10 = __CPAchecker_TMP_11;"]
81 -> 77 [label="__CPAchecker_TMP_9 = __CPAchecker_TMP_10;"]
77 -> 73 [label="__CPAchecker_TMP_8 = __CPAchecker_TMP_9;"]
73 -> 69 [label="__CPAchecker_TMP_7 = __CPAchecker_TMP_8;"]
69 -> 94 [label="*memOut2 = __CPAchecker_TMP_7;"]
94 -> 0 [label="default return"]
91 -> 93 [label="__CPAchecker_TMP_13 = smemory.m6;"]
87 -> 89 [label="__CPAchecker_TMP_12 = smemory.m5;"]
83 -> 85 [label="__CPAchecker_TMP_11 = smemory.m5;"]
79 -> 81 [label="__CPAchecker_TMP_10 = smemory.m3;"]
75 -> 77 [label="__CPAchecker_TMP_9 = smemory.m2;"]
71 -> 73 [label="__CPAchecker_TMP_8 = smemory.m1;"]
67 -> 69 [label="__CPAchecker_TMP_7 = smemory.m0;"]
62 -> 64 [label="__CPAchecker_TMP_6 = smemory.m6;"]
58 -> 60 [label="__CPAchecker_TMP_5 = smemory.m5;"]
54 -> 56 [label="__CPAchecker_TMP_4 = smemory.m5;"]
50 -> 52 [label="__CPAchecker_TMP_3 = smemory.m3;"]
46 -> 48 [label="__CPAchecker_TMP_2 = smemory.m2;"]
42 -> 44 [label="__CPAchecker_TMP_1 = smemory.m1;"]
38 -> 40 [label="__CPAchecker_TMP_0 = smemory.m0;"]
12 -> 14 [label="[((unsigned int)writeLoc) == 0]"]
12 -> 13 [label="[!(((unsigned int)writeLoc) == 0)]"]
13 -> 17 [label="[((unsigned int)writeLoc) == 1]"]
13 -> 16 [label="[!(((unsigned int)writeLoc) == 1)]"]
16 -> 20 [label="[((unsigned int)writeLoc) == 2]"]
16 -> 19 [label="[!(((unsigned int)writeLoc) == 2)]"]
19 -> 23 [label="[((unsigned int)writeLoc) == 3]"]
19 -> 22 [label="[!(((unsigned int)writeLoc) == 3)]"]
22 -> 26 [label="[((unsigned int)writeLoc) == 4]"]
22 -> 25 [label="[!(((unsigned int)writeLoc) == 4)]"]
25 -> 29 [label="[((unsigned int)writeLoc) == 5]"]
25 -> 28 [label="[!(((unsigned int)writeLoc) == 5)]"]
28 -> 32 [label="[((unsigned int)writeLoc) == 6]"]
28 -> 31 [label="[!(((unsigned int)writeLoc) == 6)]"]
31 -> 35 [label="[((unsigned int)writeLoc) == 7]"]
31 -> 34 [label="[!(((unsigned int)writeLoc) == 7)]"]
34 -> 11 [label=""]
35 -> 36 [label="smemory.m7 = data;"]
36 -> 11 [label=""]
32 -> 33 [label="smemory.m6 = data;"]
33 -> 31 [label=""]
29 -> 30 [label="smemory.m5 = data;"]
30 -> 28 [label=""]
26 -> 27 [label="smemory.m4 = data;"]
27 -> 25 [label=""]
23 -> 24 [label="smemory.m3 = data;"]
24 -> 22 [label=""]
20 -> 21 [label="smemory.m2 = data;"]
21 -> 19 [label=""]
17 -> 18 [label="smemory.m1 = data;"]
18 -> 16 [label=""]
14 -> 15 [label="smemory.m0 = data;"]
15 -> 13 [label=""]}
subgraph cluster_pc {
label="pc()"
176 -> 177 [label="Function start dummy edge"]
177 -> 178 [label="unsigned char progCntr_old;"]
178 -> 182 [label="[((unsigned int)opcode) == 1]"]
178 -> 181 [label="[!(((unsigned int)opcode) == 1)]"]
181 -> 185 [label="spc.progCntr = (spc.progCntr) + 1;"]
185 -> 186 [label="*progCntr = (*progCntr) + 1;"]
186 -> 179 [label=""]
179 -> 175 [label="default return"]
182 -> 180 [label="[((unsigned int)operand1) == 0]"]
182 -> 181 [label="[!(((unsigned int)operand1) == 0)]"]
180 -> 183 [label="spc.progCntr = operand2 & 7;"]
183 -> 184 [label="*progCntr = operand2 & 7;"]
184 -> 179 [label=""]}
subgraph cluster_program {
label="program()"
96 -> 97 [label="Function start dummy edge"]
97 -> 98 [label="unsigned short int instr0;"]
98 -> 99 [label="unsigned short int instr1;"]
99 -> 100 [label="unsigned short int instr2;"]
100 -> 101 [label="unsigned short int instr3;"]
101 -> 102 [label="unsigned short int instr4;"]
102 -> 103 [label="unsigned short int instr5;"]
103 -> 104 [label="unsigned short int instr6;"]
104 -> 105 [label="unsigned short int instr7;"]
105 -> 106 [label="instr0 = 576;"]
106 -> 107 [label="instr1 = 1152;"]
107 -> 108 [label="instr2 = 1728;"]
108 -> 109 [label="instr3 = 2304;"]
109 -> 110 [label="instr4 = 505;"]
110 -> 111 [label="instr5 = 0;"]
111 -> 112 [label="instr6 = 0;"]
112 -> 113 [label="instr7 = 0;"]
113 -> 114 [label="int __CPAchecker_TMP_0;"]
114 -> 115 [label="[progCntr == 0]"]
114 -> 116 [label="[!(progCntr == 0)]"]
116 -> 118 [label="int __CPAchecker_TMP_1;"]
118 -> 119 [label="[progCntr == 1]"]
118 -> 120 [label="[!(progCntr == 1)]"]
120 -> 122 [label="int __CPAchecker_TMP_2;"]
122 -> 123 [label="[progCntr == 2]"]
122 -> 124 [label="[!(progCntr == 2)]"]
124 -> 126 [label="int __CPAchecker_TMP_3;"]
126 -> 127 [label="[progCntr == 3]"]
126 -> 128 [label="[!(progCntr == 3)]"]
128 -> 130 [label="int __CPAchecker_TMP_4;"]
130 -> 131 [label="[progCntr == 4]"]
130 -> 132 [label="[!(progCntr == 4)]"]
132 -> 134 [label="int __CPAchecker_TMP_5;"]
134 -> 135 [label="[progCntr == 5]"]
134 -> 136 [label="[!(progCntr == 5)]"]
136 -> 138 [label="int __CPAchecker_TMP_6;"]
138 -> 139 [label="[progCntr == 6]"]
138 -> 140 [label="[!(progCntr == 6)]"]
140 -> 141 [label="__CPAchecker_TMP_6 = instr7;"]
141 -> 137 [label="__CPAchecker_TMP_5 = __CPAchecker_TMP_6;"]
137 -> 133 [label="__CPAchecker_TMP_4 = __CPAchecker_TMP_5;"]
133 -> 129 [label="__CPAchecker_TMP_3 = __CPAchecker_TMP_4;"]
129 -> 125 [label="__CPAchecker_TMP_2 = __CPAchecker_TMP_3;"]
125 -> 121 [label="__CPAchecker_TMP_1 = __CPAchecker_TMP_2;"]
121 -> 117 [label="__CPAchecker_TMP_0 = __CPAchecker_TMP_1;"]
117 -> 142 [label="*instruction = __CPAchecker_TMP_0;"]
142 -> 95 [label="default return"]
139 -> 141 [label="__CPAchecker_TMP_6 = instr6;"]
135 -> 137 [label="__CPAchecker_TMP_5 = instr5;"]
131 -> 133 [label="__CPAchecker_TMP_4 = instr4;"]
127 -> 129 [label="__CPAchecker_TMP_3 = instr3;"]
123 -> 125 [label="__CPAchecker_TMP_2 = instr2;"]
119 -> 121 [label="__CPAchecker_TMP_1 = instr1;"]
115 -> 117 [label="__CPAchecker_TMP_0 = instr0;"]}
201 -> 1 [label="memory(clk, opcode, readLoc1, readLoc2, writeLoc, aluOut, &memOut1, &memOut2)"]
0 -> 203 [label="Return edge from memory to main"]
203 -> 96 [label="program(clk, progCntr, &instruction)"]
95 -> 204 [label="Return edge from program to main"]
204 -> 144 [label="decodeOpcd(clk, instruction, &opcode)"]
143 -> 205 [label="Return edge from decodeOpcd to main"]
205 -> 148 [label="decodeLoc1(clk, instruction, &readLoc1)"]
147 -> 206 [label="Return edge from decodeLoc1 to main"]
206 -> 152 [label="decodeLoc2(clk, instruction, &readLoc2)"]
151 -> 207 [label="Return edge from decodeLoc2 to main"]
207 -> 156 [label="decodeLoc3(clk, instruction, &writeLoc)"]
155 -> 208 [label="Return edge from decodeLoc3 to main"]
208 -> 160 [label="alu(clk, opcode, memOut1, memOut2, &aluOut)"]
159 -> 209 [label="Return edge from alu to main"]
209 -> 176 [label="pc(clk, opcode, memOut1, memOut2, &progCntr)"]
175 -> 210 [label="Return edge from pc to main"]}