<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>cpa.c</default>
 </key>
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="namedValue" attr.type="string" for="node" id="named"/>
 <key attr.name="nodeType" attr.type="string" for="node" id="nodetype">
  <default>path</default>
 </key>
 <key attr.name="isFrontierNode" attr.type="boolean" for="node" id="frontier">
  <default>false</default>
 </key>
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="isLoopHead" attr.type="boolean" for="node" id="loopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="threadId" attr.type="string" for="edge" id="threadId"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="sourcecode" attr.type="string" for="edge" id="sourcecode"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="lineColSet" attr.type="string" for="edge" id="lineCols"/>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="predecessor" attr.type="string" for="edge" id="predecessor"/>
 <key attr.name="successor" attr.type="string" for="edge" id="successor"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.6.1</data>
  <data key="programfile">cpa.c</data>
  <data key="programhash">e4294f1842f1b73112bb1e79bf047e6a2be77974</data>
  <data key="memorymodel">precise</data>
  <data key="architecture">32bit</data>
  <node id="A0">
   <data key="entry">true</data>
  </node>
  <node id="A2_72_1"/>
  <edge source="A0" target="A2_72_1">
   <data key="sourcecode">extern struct _IO_FILE_plus _IO_2_1_stdin_;</data>
   <data key="startline">315</data>
   <data key="startoffset">5302</data>
   <data key="originfile">/usr/include/libio.h</data>
  </edge>
  <node id="A2_73_1"/>
  <edge source="A2_72_1" target="A2_73_1">
   <data key="sourcecode">extern struct _IO_FILE_plus _IO_2_1_stdout_;</data>
   <data key="startline">316</data>
   <data key="startoffset">5346</data>
   <data key="originfile">/usr/include/libio.h</data>
  </edge>
  <node id="A2_74_1"/>
  <edge source="A2_73_1" target="A2_74_1">
   <data key="sourcecode">extern struct _IO_FILE_plus _IO_2_1_stderr_;</data>
   <data key="startline">317</data>
   <data key="startoffset">5391</data>
   <data key="originfile">/usr/include/libio.h</data>
  </edge>
  <node id="A2_101_1"/>
  <edge source="A2_74_1" target="A2_101_1">
   <data key="sourcecode">extern struct _IO_FILE *stdin;</data>
   <data key="startline">170</data>
   <data key="startoffset">7377</data>
   <data key="originfile">/usr/include/stdio.h</data>
  </edge>
  <node id="A2_102_1"/>
  <edge source="A2_101_1" target="A2_102_1">
   <data key="sourcecode">extern struct _IO_FILE *stdout;</data>
   <data key="startline">171</data>
   <data key="startoffset">7408</data>
   <data key="originfile">/usr/include/stdio.h</data>
  </edge>
  <node id="A2_103_1"/>
  <edge source="A2_102_1" target="A2_103_1">
   <data key="sourcecode">extern struct _IO_FILE *stderr;</data>
   <data key="startline">172</data>
   <data key="startoffset">7440</data>
   <data key="originfile">/usr/include/stdio.h</data>
  </edge>
  <node id="A2_178_1"/>
  <edge source="A2_103_1" target="A2_178_1">
   <data key="sourcecode">extern int sys_nerr;</data>
   <data key="startline">26</data>
   <data key="startoffset">15964</data>
   <data key="originfile">/usr/include/bits/sys_errlist.h</data>
  </edge>
  <node id="A2_179_1"/>
  <edge source="A2_178_1" target="A2_179_1">
   <data key="sourcecode">extern const char *const sys_errlist[];</data>
   <data key="startline">27</data>
   <data key="startoffset">15985</data>
   <data key="originfile">/usr/include/bits/sys_errlist.h</data>
  </edge>
  <node id="A2_191_1"/>
  <edge source="A2_179_1" target="A2_191_1">
   <data key="sourcecode">int A = 0;</data>
   <data key="startline">15</data>
   <data key="startoffset">17462</data>
  </edge>
  <node id="A2_192_1"/>
  <edge source="A2_191_1" target="A2_192_1">
   <data key="sourcecode">int B = 1;</data>
   <data key="startline">16</data>
   <data key="startoffset">17481</data>
  </edge>
  <node id="A2_193_1"/>
  <edge source="A2_192_1" target="A2_193_1">
   <data key="sourcecode">int C = 2;</data>
   <data key="startline">17</data>
   <data key="startoffset">17484</data>
  </edge>
  <node id="A2_194_1"/>
  <edge source="A2_193_1" target="A2_194_1">
   <data key="sourcecode">int X = 3;</data>
   <data key="startline">18</data>
   <data key="startoffset">17503</data>
  </edge>
  <node id="A2_196_1"/>
  <edge source="A2_194_1" target="A2_196_1">
   <data key="sourcecode">struct state_elements_controller scontroller;</data>
   <data key="startline">25</data>
   <data key="startoffset">17600</data>
  </edge>
  <node id="A2_200_1"/>
  <edge source="A2_196_1" target="A2_200_1">
   <data key="sourcecode">struct state_elements_arbiter sarbiter;</data>
   <data key="startline">74</data>
   <data key="startoffset">18543</data>
  </edge>
  <node id="A2_204_1"/>
  <edge source="A2_200_1" target="A2_204_1">
   <data key="sourcecode">struct state_elements_client sclient;</data>
   <data key="startline">99</data>
   <data key="startoffset">18990</data>
  </edge>
  <node id="A2_209_1"/>
  <edge source="A2_204_1" target="A2_209_1">
   <data key="sourcecode">_Bool clk, ackA, ackB, ackC;</data>
   <data key="startline">132</data>
   <data key="startoffset">19507</data>
  </edge>
  <node id="A2_213_1"/>
  <edge source="A2_209_1" target="A2_213_1">
   <data key="sourcecode">unsigned char sel;</data>
   <data key="startline">133</data>
   <data key="startoffset">19538</data>
  </edge>
  <node id="A2_214_1"/>
  <edge source="A2_213_1" target="A2_214_1">
   <data key="sourcecode">_Bool active;</data>
   <data key="startline">134</data>
   <data key="startoffset">19559</data>
  </edge>
  <node id="A2_215_1"/>
  <edge source="A2_214_1" target="A2_215_1">
   <data key="sourcecode">_Bool reqA, reqB, reqC;</data>
   <data key="startline">135</data>
   <data key="startoffset">19575</data>
  </edge>
  <node id="A2_218_1"/>
  <edge source="A2_215_1" target="A2_218_1">
   <data key="sourcecode">_Bool pass_tokenA, pass_tokenB, pass_tokenC;</data>
   <data key="startline">136</data>
   <data key="startoffset">19601</data>
  </edge>
  <node id="A3"/>
  <edge source="A2_218_1" target="A3">
   <data key="sourcecode">client_initial();</data>
   <data key="startline">139</data>
   <data key="startoffset">19650</data>
   <data key="enterFunction">client_initial</data>
  </edge>
  <node id="A4_1_2"/>
  <edge source="A3" target="A4_1_2">
   <data key="sourcecode">sclient.state = 0;</data>
   <data key="startline">103</data>
   <data key="startoffset">19055</data>
  </edge>
  <node id="A4"/>
  <edge source="A4_1_2" target="A4">
   <data key="sourcecode">sclient.req = 0;</data>
   <data key="startline">104</data>
   <data key="startoffset">19076</data>
  </edge>
  <node id="A6"/>
  <edge source="A4" target="A6">
   <data key="startline">139</data>
   <data key="startoffset">19650</data>
   <data key="returnFrom">client_initial</data>
  </edge>
  <node id="A7"/>
  <edge source="A6" target="A7">
   <data key="sourcecode">controller_initial();</data>
   <data key="startline">140</data>
   <data key="startoffset">19670</data>
   <data key="enterFunction">controller_initial</data>
  </edge>
  <node id="A8_1_3"/>
  <edge source="A7" target="A8_1_3">
   <data key="sourcecode">scontroller.state = 0;</data>
   <data key="startline">29</data>
   <data key="startoffset">17697</data>
  </edge>
  <node id="A8_2_3"/>
  <edge source="A8_1_3" target="A8_2_3">
   <data key="sourcecode">scontroller.ack = 0;</data>
   <data key="startline">30</data>
   <data key="startoffset">17702</data>
  </edge>
  <node id="A8"/>
  <edge source="A8_2_3" target="A8">
   <data key="sourcecode">scontroller.pass_token = 1;</data>
   <data key="startline">31</data>
   <data key="startoffset">17725</data>
  </edge>
  <node id="A10"/>
  <edge source="A8" target="A10">
   <data key="startline">140</data>
   <data key="startoffset">19670</data>
   <data key="returnFrom">controller_initial</data>
  </edge>
  <node id="A11"/>
  <edge source="A10" target="A11">
   <data key="sourcecode">arbiter_initial();</data>
   <data key="startline">141</data>
   <data key="startoffset">19694</data>
   <data key="enterFunction">arbiter_initial</data>
  </edge>
  <node id="A12"/>
  <edge source="A11" target="A12">
   <data key="sourcecode">sarbiter.state = A;</data>
   <data key="startline">78</data>
   <data key="startoffset">18611</data>
  </edge>
  <node id="A14">
   <data key="loopHead">true</data>
  </node>
  <edge source="A12" target="A14">
   <data key="startline">141</data>
   <data key="startoffset">19694</data>
   <data key="returnFrom">arbiter_initial</data>
  </edge>
  <node id="A18"/>
  <edge source="A14" target="A18">
   <data key="sourcecode">client(clk, &amp;reqA, ackA);</data>
   <data key="startline">144</data>
   <data key="startoffset">19731</data>
   <data key="enterFunction">client</data>
  </edge>
  <node id="A19"/>
  <edge source="A18" target="A19">
   <data key="sourcecode">_Bool rand_choice = 0;</data>
   <data key="startline">108</data>
   <data key="startoffset">19145</data>
  </edge>
  <node id="A20"/>
  <edge source="A19" target="A20">
   <data key="sourcecode">[(sclient.state) == 0]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A19" target="sink">
   <data key="sourcecode">[!((sclient.state) == 0)]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A45"/>
  <edge source="A20" target="A45">
   <data key="sourcecode">[rand_choice == 0]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A20" target="sink">
   <data key="sourcecode">[!(rand_choice == 0)]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A48"/>
  <edge source="A45" target="A48">
   <data key="sourcecode">*req = sclient.req;</data>
   <data key="startline">127</data>
   <data key="startoffset">19475</data>
  </edge>
  <node id="A50"/>
  <edge source="A48" target="A50">
   <data key="startline">144</data>
   <data key="startoffset">19731</data>
   <data key="returnFrom">client</data>
  </edge>
  <node id="A51"/>
  <edge source="A50" target="A51">
   <data key="sourcecode">client(clk, &amp;reqB, ackB);</data>
   <data key="startline">145</data>
   <data key="startoffset">19768</data>
   <data key="enterFunction">client</data>
  </edge>
  <node id="A52"/>
  <edge source="A51" target="A52">
   <data key="sourcecode">_Bool rand_choice = 0;</data>
   <data key="startline">108</data>
   <data key="startoffset">19145</data>
  </edge>
  <node id="A53"/>
  <edge source="A52" target="A53">
   <data key="sourcecode">[(sclient.state) == 0]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A52" target="sink">
   <data key="sourcecode">[!((sclient.state) == 0)]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A78"/>
  <edge source="A53" target="A78">
   <data key="sourcecode">[rand_choice == 0]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A53" target="sink">
   <data key="sourcecode">[!(rand_choice == 0)]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A81"/>
  <edge source="A78" target="A81">
   <data key="sourcecode">*req = sclient.req;</data>
   <data key="startline">127</data>
   <data key="startoffset">19475</data>
  </edge>
  <node id="A83"/>
  <edge source="A81" target="A83">
   <data key="startline">145</data>
   <data key="startoffset">19761</data>
   <data key="returnFrom">client</data>
  </edge>
  <node id="A84"/>
  <edge source="A83" target="A84">
   <data key="sourcecode">client(clk, &amp;reqC, ackC);</data>
   <data key="startline">146</data>
   <data key="startoffset">19791</data>
   <data key="enterFunction">client</data>
  </edge>
  <node id="A85"/>
  <edge source="A84" target="A85">
   <data key="sourcecode">_Bool rand_choice = 0;</data>
   <data key="startline">108</data>
   <data key="startoffset">19145</data>
  </edge>
  <node id="A86"/>
  <edge source="A85" target="A86">
   <data key="sourcecode">[(sclient.state) == 0]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A85" target="sink">
   <data key="sourcecode">[!((sclient.state) == 0)]</data>
   <data key="startline">109</data>
   <data key="startoffset">19173</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A111"/>
  <edge source="A86" target="A111">
   <data key="sourcecode">[rand_choice == 0]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A86" target="sink">
   <data key="sourcecode">[!(rand_choice == 0)]</data>
   <data key="startline">110</data>
   <data key="startoffset">19203</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A114"/>
  <edge source="A111" target="A114">
   <data key="sourcecode">*req = sclient.req;</data>
   <data key="startline">127</data>
   <data key="startoffset">19475</data>
  </edge>
  <node id="A116"/>
  <edge source="A114" target="A116">
   <data key="startline">146</data>
   <data key="startoffset">19791</data>
   <data key="returnFrom">client</data>
  </edge>
  <node id="A117"/>
  <edge source="A116" target="A117">
   <data key="sourcecode">controller(clk, reqA, &amp;ackA, sel, &amp;pass_tokenA, A);</data>
   <data key="startline">148</data>
   <data key="startoffset">19844</data>
   <data key="enterFunction">controller</data>
  </edge>
  <node id="A118_1_8"/>
  <edge source="A117" target="A118_1_8">
   <data key="sourcecode">_Bool is_selected;</data>
   <data key="startline">36</data>
   <data key="startoffset">17866</data>
  </edge>
  <node id="A118"/>
  <edge source="A118_1_8" target="A118">
   <data key="sourcecode">is_selected = (sel&amp;0x3 == id&amp;0x3);</data>
   <data key="startline">37</data>
   <data key="startoffset">17887</data>
  </edge>
  <node id="A119"/>
  <edge source="A118" target="A119">
   <data key="sourcecode">[(scontroller.state) == 0]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A118" target="sink">
   <data key="sourcecode">[!((scontroller.state) == 0)]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A136"/>
  <edge source="A119" target="A136">
   <data key="sourcecode">[is_selected == 0]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A119" target="sink">
   <data key="sourcecode">[!(is_selected == 0)]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A146"/>
  <edge source="A136" target="A146">
   <data key="sourcecode">scontroller.pass_token = 0;</data>
   <data key="startline">50</data>
   <data key="startoffset">18159</data>
  </edge>
  <node id="A151_0_9"/>
  <edge source="A146" target="A151_0_9">
   <data key="sourcecode">*ack = scontroller.ack;</data>
   <data key="startline">66</data>
   <data key="startoffset">18419</data>
  </edge>
  <node id="A151"/>
  <edge source="A151_0_9" target="A151">
   <data key="sourcecode">*pass_token = scontroller.pass_token;</data>
   <data key="startline">67</data>
   <data key="startoffset">18445</data>
  </edge>
  <node id="A153"/>
  <edge source="A151" target="A153">
   <data key="startline">148</data>
   <data key="startoffset">19822</data>
   <data key="returnFrom">controller</data>
  </edge>
  <node id="A154"/>
  <edge source="A153" target="A154">
   <data key="sourcecode">controller(clk, reqB, &amp;ackB, sel, &amp;pass_tokenB, B);</data>
   <data key="startline">149</data>
   <data key="startoffset">19926</data>
   <data key="enterFunction">controller</data>
  </edge>
  <node id="A155_1_10"/>
  <edge source="A154" target="A155_1_10">
   <data key="sourcecode">_Bool is_selected;</data>
   <data key="startline">36</data>
   <data key="startoffset">17866</data>
  </edge>
  <node id="A155"/>
  <edge source="A155_1_10" target="A155">
   <data key="sourcecode">is_selected = (sel&amp;0x3 == id&amp;0x3);</data>
   <data key="startline">37</data>
   <data key="startoffset">17887</data>
  </edge>
  <node id="A156"/>
  <edge source="A155" target="A156">
   <data key="sourcecode">[(scontroller.state) == 0]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A155" target="sink">
   <data key="sourcecode">[!((scontroller.state) == 0)]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A173"/>
  <edge source="A156" target="A173">
   <data key="sourcecode">[is_selected == 0]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A156" target="sink">
   <data key="sourcecode">[!(is_selected == 0)]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A183"/>
  <edge source="A173" target="A183">
   <data key="sourcecode">scontroller.pass_token = 0;</data>
   <data key="startline">50</data>
   <data key="startoffset">18159</data>
  </edge>
  <node id="A188_0_11"/>
  <edge source="A183" target="A188_0_11">
   <data key="sourcecode">*ack = scontroller.ack;</data>
   <data key="startline">66</data>
   <data key="startoffset">18419</data>
  </edge>
  <node id="A188"/>
  <edge source="A188_0_11" target="A188">
   <data key="sourcecode">*pass_token = scontroller.pass_token;</data>
   <data key="startline">67</data>
   <data key="startoffset">18445</data>
  </edge>
  <node id="A190"/>
  <edge source="A188" target="A190">
   <data key="startline">149</data>
   <data key="startoffset">19878</data>
   <data key="returnFrom">controller</data>
  </edge>
  <node id="A191"/>
  <edge source="A190" target="A191">
   <data key="sourcecode">controller(clk, reqC, &amp;ackC, sel, &amp;pass_tokenC, C);</data>
   <data key="startline">150</data>
   <data key="startoffset">19963</data>
   <data key="enterFunction">controller</data>
  </edge>
  <node id="A192_1_12"/>
  <edge source="A191" target="A192_1_12">
   <data key="sourcecode">_Bool is_selected;</data>
   <data key="startline">36</data>
   <data key="startoffset">17866</data>
  </edge>
  <node id="A192"/>
  <edge source="A192_1_12" target="A192">
   <data key="sourcecode">is_selected = (sel&amp;0x3 == id&amp;0x3);</data>
   <data key="startline">37</data>
   <data key="startoffset">17887</data>
  </edge>
  <node id="A193"/>
  <edge source="A192" target="A193">
   <data key="sourcecode">[(scontroller.state) == 0]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A192" target="sink">
   <data key="sourcecode">[!((scontroller.state) == 0)]</data>
   <data key="startline">40</data>
   <data key="startoffset">17929</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A210"/>
  <edge source="A193" target="A210">
   <data key="sourcecode">[is_selected == 0]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A193" target="sink">
   <data key="sourcecode">[!(is_selected == 0)]</data>
   <data key="startline">41</data>
   <data key="startoffset">17962</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A220"/>
  <edge source="A210" target="A220">
   <data key="sourcecode">scontroller.pass_token = 0;</data>
   <data key="startline">50</data>
   <data key="startoffset">18159</data>
  </edge>
  <node id="A225_0_13"/>
  <edge source="A220" target="A225_0_13">
   <data key="sourcecode">*ack = scontroller.ack;</data>
   <data key="startline">66</data>
   <data key="startoffset">18419</data>
  </edge>
  <node id="A225"/>
  <edge source="A225_0_13" target="A225">
   <data key="sourcecode">*pass_token = scontroller.pass_token;</data>
   <data key="startline">67</data>
   <data key="startoffset">18445</data>
  </edge>
  <node id="A227"/>
  <edge source="A225" target="A227">
   <data key="startline">150</data>
   <data key="startoffset">19934</data>
   <data key="returnFrom">controller</data>
  </edge>
  <node id="A228"/>
  <edge source="A227" target="A228">
   <data key="sourcecode">arbiter(clk, &amp;sel, active);</data>
   <data key="startline">152</data>
   <data key="startoffset">20004</data>
   <data key="enterFunction">arbiter</data>
  </edge>
  <node id="A249"/>
  <edge source="A228" target="A249">
   <data key="sourcecode">[active == 0]</data>
   <data key="startline">83</data>
   <data key="startoffset">18699</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A228" target="sink">
   <data key="sourcecode">[!(active == 0)]</data>
   <data key="startline">83</data>
   <data key="startoffset">18699</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A251"/>
  <edge source="A249" target="A251">
   <data key="sourcecode">[active == 0]</data>
   <data key="startline">92</data>
   <data key="startoffset">18890</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A249" target="sink">
   <data key="sourcecode">[!(active == 0)]</data>
   <data key="startline">92</data>
   <data key="startoffset">18890</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A255"/>
  <edge source="A251" target="A255">
   <data key="sourcecode">X</data>
   <data key="startline">92</data>
   <data key="startoffset">18915</data>
  </edge>
  <node id="A256"/>
  <edge source="A255" target="A256">
   <data key="sourcecode">*sel = active ? sarbiter.state: X;</data>
   <data key="startline">92</data>
   <data key="startoffset">18883</data>
  </edge>
  <node id="A258"/>
  <edge source="A256" target="A258">
   <data key="startline">152</data>
   <data key="startoffset">19991</data>
   <data key="returnFrom">arbiter</data>
  </edge>
  <node id="A260"/>
  <edge source="A258" target="A260">
   <data key="sourcecode">[pass_tokenA == 0]</data>
   <data key="startline">154</data>
   <data key="startoffset">20033</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A258" target="sink">
   <data key="sourcecode">[!(pass_tokenA == 0)]</data>
   <data key="startline">154</data>
   <data key="startoffset">20033</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A262"/>
  <edge source="A260" target="A262">
   <data key="sourcecode">[pass_tokenB == 0]</data>
   <data key="startline">154</data>
   <data key="startoffset">20048</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A260" target="sink">
   <data key="sourcecode">[!(pass_tokenB == 0)]</data>
   <data key="startline">154</data>
   <data key="startoffset">20048</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A265"/>
  <edge source="A262" target="A265">
   <data key="sourcecode">[pass_tokenC == 0]</data>
   <data key="startline">154</data>
   <data key="startoffset">20063</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A262" target="sink">
   <data key="sourcecode">[!(pass_tokenC == 0)]</data>
   <data key="startline">154</data>
   <data key="startoffset">20063</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A270"/>
  <edge source="A265" target="A270">
   <data key="sourcecode">pass_tokenA || pass_tokenB || pass_tokenC</data>
   <data key="startline">154</data>
   <data key="startoffset">20033</data>
  </edge>
  <node id="A271_0_14"/>
  <edge source="A270" target="A271_0_14">
   <data key="sourcecode">active = pass_tokenA || pass_tokenB || pass_tokenC;</data>
   <data key="startline">154</data>
   <data key="startoffset">20024</data>
  </edge>
  <node id="A276"/>
  <edge source="A271_0_14" target="A276">
   <data key="sourcecode">[!(ackA == 1)]</data>
   <data key="startline">156</data>
   <data key="startoffset">20104</data>
   <data key="control">condition-false</data>
  </edge>
  <edge source="A271_0_14" target="sink">
   <data key="sourcecode">[ackA == 1]</data>
   <data key="startline">156</data>
   <data key="startoffset">20104</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A282"/>
  <edge source="A276" target="A282">
   <data key="sourcecode">[!(ackB == 1)]</data>
   <data key="startline">156</data>
   <data key="startoffset">20158</data>
   <data key="control">condition-false</data>
  </edge>
  <edge source="A276" target="sink">
   <data key="sourcecode">[ackB == 1]</data>
   <data key="startline">156</data>
   <data key="startoffset">20158</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A288"/>
  <edge source="A282" target="A288">
   <data key="sourcecode">[!(ackC == 1)]</data>
   <data key="startline">156</data>
   <data key="startoffset">20104</data>
   <data key="control">condition-false</data>
  </edge>
  <edge source="A282" target="sink">
   <data key="sourcecode">[ackC == 1]</data>
   <data key="startline">156</data>
   <data key="startoffset">20104</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A290">
   <data key="violation">true</data>
   <data key="violatedProperty">assertion in cpa.c, lines 156-164</data>
  </node>
  <edge source="A288" target="A290">
   <data key="sourcecode">__assert_fail (
# 156 "cpa.c"
   "(ackA == 1 &amp;&amp; ackB == 1 || ackB == 1 &amp;&amp; ackC == 1 || ackC == 1 &amp;&amp; ackA ==1)"
# 156 "cpa.c" 3 4
   , "cpa.c", 156, __PRETTY_FUNCTION__)</data>
   <data key="startline">156</data>
   <data key="startoffset">20104</data>
  </edge>
 </graph>
</graphml>
