digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N92\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N136\nmain\n" id="1"]
2 [label="2 @ N105\nmain\n" id="2"]
3 [label="3 @ N63\nclient_initial entry\n" id="3"]
4 [label="4 @ N66\nclient_initial\n" id="4"]
5 [label="5 @ N62\nclient_initial exit\n" id="5"]
6 [label="6 @ N106\nmain\n" id="6"]
7 [label="7 @ N1\ncontroller_initial entry\n" id="7"]
8 [label="8 @ N5\ncontroller_initial\n" id="8"]
9 [label="9 @ N0\ncontroller_initial exit\n" id="9"]
10 [label="10 @ N107\nmain\n" id="10"]
11 [label="11 @ N39\narbiter_initial entry\n" id="11"]
12 [label="12 @ N41\narbiter_initial\n" id="12"]
13 [label="13 @ N38\narbiter_initial exit\n" id="13"]
14 [label="14 @ N108\nmain\n" id="14"]
16 [fillcolor="cornflowerblue" label="16 @ N109\nmain\nAbstractionState: ABS1: true\n" id="16"]
17 [label="17 @ N110\nmain\n" id="17"]
18 [label="18 @ N68\nclient entry\n" id="18"]
19 [label="19 @ N70\nclient\n" id="19"]
20 [label="20 @ N72\nclient\n" id="20"]
45 [label="45 @ N74\nclient\n" id="45"]
47 [label="47 @ N71\nclient\n" id="47"]
48 [label="48 @ N90\nclient\n" id="48"]
49 [label="49 @ N67\nclient exit\n" id="49"]
50 [label="50 @ N112\nmain\n" id="50"]
51 [label="51 @ N68\nclient entry\n" id="51"]
52 [label="52 @ N70\nclient\n" id="52"]
53 [label="53 @ N72\nclient\n" id="53"]
78 [label="78 @ N74\nclient\n" id="78"]
80 [label="80 @ N71\nclient\n" id="80"]
81 [label="81 @ N90\nclient\n" id="81"]
82 [label="82 @ N67\nclient exit\n" id="82"]
83 [label="83 @ N113\nmain\n" id="83"]
84 [label="84 @ N68\nclient entry\n" id="84"]
85 [label="85 @ N70\nclient\n" id="85"]
86 [label="86 @ N72\nclient\n" id="86"]
111 [label="111 @ N74\nclient\n" id="111"]
113 [label="113 @ N71\nclient\n" id="113"]
114 [label="114 @ N90\nclient\n" id="114"]
115 [label="115 @ N67\nclient exit\n" id="115"]
116 [label="116 @ N114\nmain\n" id="116"]
117 [label="117 @ N7\ncontroller entry\n" id="117"]
118 [label="118 @ N10\ncontroller\n" id="118"]
119 [label="119 @ N12\ncontroller\n" id="119"]
136 [label="136 @ N16\ncontroller\n" id="136"]
146 [label="146 @ N23\ncontroller\n" id="146"]
148 [label="148 @ N14\ncontroller\n" id="148"]
150 [label="150 @ N11\ncontroller\n" id="150"]
151 [label="151 @ N37\ncontroller\n" id="151"]
152 [label="152 @ N6\ncontroller exit\n" id="152"]
153 [label="153 @ N115\nmain\n" id="153"]
154 [label="154 @ N7\ncontroller entry\n" id="154"]
155 [label="155 @ N10\ncontroller\n" id="155"]
156 [label="156 @ N12\ncontroller\n" id="156"]
173 [label="173 @ N16\ncontroller\n" id="173"]
183 [label="183 @ N23\ncontroller\n" id="183"]
185 [label="185 @ N14\ncontroller\n" id="185"]
187 [label="187 @ N11\ncontroller\n" id="187"]
188 [label="188 @ N37\ncontroller\n" id="188"]
189 [label="189 @ N6\ncontroller exit\n" id="189"]
190 [label="190 @ N116\nmain\n" id="190"]
191 [label="191 @ N7\ncontroller entry\n" id="191"]
192 [label="192 @ N10\ncontroller\n" id="192"]
193 [label="193 @ N12\ncontroller\n" id="193"]
210 [label="210 @ N16\ncontroller\n" id="210"]
220 [label="220 @ N23\ncontroller\n" id="220"]
222 [label="222 @ N14\ncontroller\n" id="222"]
224 [label="224 @ N11\ncontroller\n" id="224"]
225 [label="225 @ N37\ncontroller\n" id="225"]
226 [label="226 @ N6\ncontroller exit\n" id="226"]
227 [label="227 @ N117\nmain\n" id="227"]
228 [label="228 @ N43\narbiter entry\n" id="228"]
229 [label="229 @ N44\narbiter\n" id="229"]
249 [label="249 @ N45\narbiter\n" id="249"]
250 [label="250 @ N57\narbiter\n" id="250"]
251 [label="251 @ N59\narbiter\n" id="251"]
255 [label="255 @ N60\narbiter\n" id="255"]
256 [label="256 @ N61\narbiter\n" id="256"]
257 [label="257 @ N42\narbiter exit\n" id="257"]
258 [label="258 @ N118\nmain\n" id="258"]
259 [label="259 @ N119\nmain\n" id="259"]
260 [label="260 @ N123\nmain\n" id="260"]
262 [label="262 @ N120\nmain\n" id="262"]
265 [label="265 @ N122\nmain\n" id="265"]
270 [label="270 @ N124\nmain\n" id="270"]
271 [label="271 @ N126\nmain\n" id="271"]
276 [label="276 @ N130\nmain\n" id="276"]
282 [label="282 @ N129\nmain\n" id="282"]
288 [label="288 @ N128\nmain\n" id="288"]
290 [fillcolor="red" label="290 @ N134\nmain\nAbstractionState: ABS2: true\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="290"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 33 - 996: \ltypedef unsigned long int size_t;\ltypedef unsigned char __u_char;\ltypedef unsigned short int __u_short;\ltypedef unsigned int __u_int;\ltypedef unsigned long int __u_long;\ltypedef signed char __int8_t;\ltypedef unsigned char __uint8_t;\ltypedef signed short int __int16_t;\ltypedef unsigned short int __uint16_t;\ltypedef signed int __int32_t;\ltypedef unsigned int __uint32_t;\ltypedef signed long int __int64_t;\ltypedef unsigned long int __uint64_t;\ltypedef long int __quad_t;\ltypedef unsigned long int __u_quad_t;\ltypedef unsigned long int __dev_t;\ltypedef unsigned int __uid_t;\ltypedef unsigned int __gid_t;\ltypedef unsigned long int __ino_t;\ltypedef unsigned long int __ino64_t;\ltypedef unsigned int __mode_t;\ltypedef unsigned long int __nlink_t;\ltypedef long int __off_t;\ltypedef long int __off64_t;\ltypedef int __pid_t;\lstruct __anon_type___fsid_t {   int __val[2]; } ;\ltypedef struct __anon_type___fsid_t __fsid_t;\ltypedef long int __clock_t;\ltypedef unsigned long int __rlim_t;\ltypedef unsigned long int __rlim64_t;\ltypedef unsigned int __id_t;\ltypedef long int __time_t;\ltypedef unsigned int __useconds_t;\ltypedef long int __suseconds_t;\ltypedef int __daddr_t;\ltypedef int __key_t;\ltypedef int __clockid_t;\ltypedef void *__timer_t;\ltypedef long int __blksize_t;\ltypedef long int __blkcnt_t;\ltypedef long int __blkcnt64_t;\ltypedef unsigned long int __fsblkcnt_t;\ltypedef unsigned long int __fsblkcnt64_t;\ltypedef unsigned long int __fsfilcnt_t;\ltypedef unsigned long int __fsfilcnt64_t;\ltypedef long int __fsword_t;\ltypedef long int __ssize_t;\ltypedef long int __syscall_slong_t;\ltypedef unsigned long int __syscall_ulong_t;\ltypedef __off64_t __loff_t;\ltypedef __quad_t *__qaddr_t;\ltypedef char *__caddr_t;\ltypedef long int __intptr_t;\ltypedef unsigned int __socklen_t;\lstruct _IO_FILE ;\ltypedef struct _IO_FILE FILE;\ltypedef struct _IO_FILE __FILE;\lunion __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;\lstruct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;\ltypedef struct __anon_type___mbstate_t __mbstate_t;\lstruct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos_t;\lstruct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos64_t;\ltypedef __builtin_va_list __gnuc_va_list;\lstruct _IO_jump_t ;\ltypedef void _IO_lock_t;\lstruct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;\lenum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;\lstruct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;\ltypedef struct _IO_FILE _IO_FILE;\lstruct _IO_FILE_plus ;\lextern struct _IO_FILE_plus _IO_2_1_stdin_;\lextern struct _IO_FILE_plus _IO_2_1_stdout_;\lextern struct _IO_FILE_plus _IO_2_1_stderr_;\ltypedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);\ltypedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);\ltypedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);\ltypedef int __io_close_fn(void *__cookie);\lint __underflow(_IO_FILE *);\lint __uflow(_IO_FILE *);\lint __overflow(_IO_FILE *, int);\lint _IO_getc(_IO_FILE *__fp);\lint _IO_putc(int __c, _IO_FILE *__fp);\lint _IO_feof(_IO_FILE *__fp);\lint _IO_ferror(_IO_FILE *__fp);\lint _IO_peekc_locked(_IO_FILE *__fp);\lvoid _IO_flockfile(_IO_FILE *);\lvoid _IO_funlockfile(_IO_FILE *);\lint _IO_ftrylockfile(_IO_FILE *);\lint _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);\lint _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );\l__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );\lsize_t  _IO_sgetn(_IO_FILE *, void *, size_t );\l__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);\l__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);\lvoid _IO_free_backup_area(_IO_FILE *);\ltypedef __gnuc_va_list va_list;\ltypedef __off_t off_t;\ltypedef __ssize_t ssize_t;\ltypedef _G_fpos_t fpos_t;\lextern struct _IO_FILE *stdin;\lextern struct _IO_FILE *stdout;\lextern struct _IO_FILE *stderr;\lint remove(const char *__filename);\lint rename(const char *__old, const char *__new);\lint renameat(int __oldfd, const char *__old, int __newfd, const char *__new);\lFILE * tmpfile();\lchar * tmpnam(char *__s);\lchar * tmpnam_r(char *__s);\lchar * tempnam(const char *__dir, const char *__pfx);\lint fclose(FILE *__stream);\lint fflush(FILE *__stream);\lint fflush_unlocked(FILE *__stream);\lFILE * fopen(const char *__filename, const char *__modes);\lFILE * freopen(const char *__filename, const char *__modes, FILE *__stream);\lFILE * fdopen(int __fd, const char *__modes);\lFILE * fmemopen(void *__s, size_t __len, const char *__modes);\lFILE * open_memstream(char **__bufloc, size_t *__sizeloc);\lvoid setbuf(FILE *__stream, char *__buf);\lint setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);\lvoid setbuffer(FILE *__stream, char *__buf, size_t __size);\lvoid setlinebuf(FILE *__stream);\lint fprintf(FILE *__stream, const char *__format, ...);\lint printf(const char *__format, ...);\lint sprintf(char *__s, const char *__format, ...);\lint vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vprintf(const char *__format, __gnuc_va_list __arg);\lint vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);\lint snprintf(char *__s, size_t __maxlen, const char *__format, ...);\lint vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);\lint vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);\lint dprintf(int __fd, const char *__fmt, ...);\lint fscanf(FILE *__stream, const char *__format, ...);\lint scanf(const char *__format, ...);\lint sscanf(const char *__s, const char *__format, ...);\lint vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vscanf(const char *__format, __gnuc_va_list __arg);\lint vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);\lint fgetc(FILE *__stream);\lint getc(FILE *__stream);\lint getchar();\lint getc_unlocked(FILE *__stream);\lint getchar_unlocked();\lint fgetc_unlocked(FILE *__stream);\lint fputc(int __c, FILE *__stream);\lint putc(int __c, FILE *__stream);\lint putchar(int __c);\lint fputc_unlocked(int __c, FILE *__stream);\lint putc_unlocked(int __c, FILE *__stream);\lint putchar_unlocked(int __c);\lint getw(FILE *__stream);\lint putw(int __w, FILE *__stream);\lchar * fgets(char *__s, int __n, FILE *__stream);\l__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);\lint fputs(const char *__s, FILE *__stream);\lint puts(const char *__s);\lint ungetc(int __c, FILE *__stream);\lsize_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);\lsize_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);\lint fseek(FILE *__stream, long int __off, int __whence);\llong int ftell(FILE *__stream);\lvoid rewind(FILE *__stream);\lint fseeko(FILE *__stream, __off_t __off, int __whence);\l__off_t  ftello(FILE *__stream);\lint fgetpos(FILE *__stream, fpos_t *__pos);\lint fsetpos(FILE *__stream, fpos_t *__pos);\lvoid clearerr(FILE *__stream);\lint feof(FILE *__stream);\lint ferror(FILE *__stream);\lvoid clearerr_unlocked(FILE *__stream);\lint feof_unlocked(FILE *__stream);\lint ferror_unlocked(FILE *__stream);\lvoid perror(const char *__s);\lextern int sys_nerr;\lextern const const char *sys_errlist[];\lint fileno(FILE *__stream);\lint fileno_unlocked(FILE *__stream);\lFILE * popen(const char *__command, const char *__modes);\lint pclose(FILE *__stream);\lchar * ctermid(char *__s);\lvoid flockfile(FILE *__stream);\lint ftrylockfile(FILE *__stream);\lvoid funlockfile(FILE *__stream);\lvoid __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);\lvoid __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);\lvoid __assert(const char *__assertion, const char *__file, int __line);\lint A = 0;\lint B = 1;\lint C = 2;\lint X = 3;\lstruct state_elements_controller {   _Bool ack;   unsigned char state;   _Bool pass_token; } ;\lstruct state_elements_controller scontroller = {  };\lvoid controller_initial();\lvoid controller(_Bool clk, _Bool req, _Bool *ack, unsigned char sel, _Bool *pass_token, unsigned char id);\lstruct state_elements_arbiter {   unsigned char state; } ;\lstruct state_elements_arbiter sarbiter = {  };\lvoid arbiter_initial();\lvoid arbiter(_Bool clk, unsigned char *sel, _Bool active);\lstruct state_elements_client {   unsigned char state;   _Bool req; } ;\lstruct state_elements_client sclient = {  };\lvoid client_initial();\lvoid client(_Bool clk, _Bool *req, _Bool ack);\lvoid main();\lFunction start dummy edge\l_Bool clk;\l_Bool ackA;\l_Bool ackB;\l_Bool ackC;\lunsigned char sel;\l_Bool active;\l_Bool reqA;\l_Bool reqB;\l_Bool reqC;\l_Bool pass_tokenA;\l_Bool pass_tokenB;\l_Bool pass_tokenC;\l" id="1 -> 2"]
2 -> 3 [color="red" label="Line 999: \lclient_initial()\l" id="2 -> 3"]
3 -> 4 [color="red" label="Lines 0 - 964: \lFunction start dummy edge\lsclient.state = 0;\lsclient.req = 0;\l" id="3 -> 4"]
4 -> 5 [color="red" label="Line 0: \ldefault return\l" id="4 -> 5"]
5 -> 6 [color="red" label="Line 999: \lReturn edge from client_initial to main\l" id="5 -> 6"]
6 -> 7 [color="red" label="Line 1000: \lcontroller_initial()\l" id="6 -> 7"]
7 -> 8 [color="red" label="Lines 0 - 891: \lFunction start dummy edge\lscontroller.state = 0;\lscontroller.ack = 0;\lscontroller.pass_token = 1;\l" id="7 -> 8"]
8 -> 9 [color="red" label="Line 0: \ldefault return\l" id="8 -> 9"]
9 -> 10 [color="red" label="Line 1000: \lReturn edge from controller_initial to main\l" id="9 -> 10"]
10 -> 11 [color="red" label="Line 1001: \larbiter_initial()\l" id="10 -> 11"]
11 -> 12 [color="red" label="Lines 0 - 938: \lFunction start dummy edge\lsarbiter.state = A;\l" id="11 -> 12"]
12 -> 13 [color="red" label="Line 0: \ldefault return\l" id="12 -> 13"]
13 -> 14 [color="red" label="Line 1001: \lReturn edge from arbiter_initial to main\l" id="13 -> 14"]
14 -> 16 [color="red" label="Line 1003: \lwhile\l" id="14 -> 16"]
16 -> 17 [color="red" label="Line 1003: \l\l" id="16 -> 17"]
17 -> 18 [color="red" label="Line 1004: \lclient(clk, &reqA, ackA)\l" id="17 -> 18"]
18 -> 19 [color="red" label="Lines 0 - 968: \lFunction start dummy edge\l_Bool rand_choice = 0;\l" id="18 -> 19"]
19 -> 20 [color="red" label="Line 969: \l[(sclient.state) == 0]\l" id="19 -> 20"]
19 -> 21 [label="Line 969: \l[!((sclient.state) == 0)]\l" id="19 -> 21"]
20 -> 42 [label="Line 970: \l[!(rand_choice == 0)]\l" id="20 -> 42"]
20 -> 45 [color="red" label="Line 970: \l[rand_choice == 0]\l" id="20 -> 45"]
45 -> 47 [color="red" label="Line 0: \l\l" id="45 -> 47"]
47 -> 48 [color="red" label="Line 987: \l*req = sclient.req;\l" id="47 -> 48"]
48 -> 49 [color="red" label="Line 0: \ldefault return\l" id="48 -> 49"]
49 -> 50 [color="red" label="Line 1004: \lReturn edge from client to main\l" id="49 -> 50"]
50 -> 51 [color="red" label="Line 1005: \lclient(clk, &reqB, ackB)\l" id="50 -> 51"]
51 -> 52 [color="red" label="Lines 0 - 968: \lFunction start dummy edge\l_Bool rand_choice = 0;\l" id="51 -> 52"]
52 -> 53 [color="red" label="Line 969: \l[(sclient.state) == 0]\l" id="52 -> 53"]
52 -> 54 [label="Line 969: \l[!((sclient.state) == 0)]\l" id="52 -> 54"]
53 -> 75 [label="Line 970: \l[!(rand_choice == 0)]\l" id="53 -> 75"]
53 -> 78 [color="red" label="Line 970: \l[rand_choice == 0]\l" id="53 -> 78"]
78 -> 80 [color="red" label="Line 0: \l\l" id="78 -> 80"]
80 -> 81 [color="red" label="Line 987: \l*req = sclient.req;\l" id="80 -> 81"]
81 -> 82 [color="red" label="Line 0: \ldefault return\l" id="81 -> 82"]
82 -> 83 [color="red" label="Line 1005: \lReturn edge from client to main\l" id="82 -> 83"]
83 -> 84 [color="red" label="Line 1006: \lclient(clk, &reqC, ackC)\l" id="83 -> 84"]
84 -> 85 [color="red" label="Lines 0 - 968: \lFunction start dummy edge\l_Bool rand_choice = 0;\l" id="84 -> 85"]
85 -> 86 [color="red" label="Line 969: \l[(sclient.state) == 0]\l" id="85 -> 86"]
85 -> 87 [label="Line 969: \l[!((sclient.state) == 0)]\l" id="85 -> 87"]
86 -> 108 [label="Line 970: \l[!(rand_choice == 0)]\l" id="86 -> 108"]
86 -> 111 [color="red" label="Line 970: \l[rand_choice == 0]\l" id="86 -> 111"]
111 -> 113 [color="red" label="Line 0: \l\l" id="111 -> 113"]
113 -> 114 [color="red" label="Line 987: \l*req = sclient.req;\l" id="113 -> 114"]
114 -> 115 [color="red" label="Line 0: \ldefault return\l" id="114 -> 115"]
115 -> 116 [color="red" label="Line 1006: \lReturn edge from client to main\l" id="115 -> 116"]
116 -> 117 [color="red" label="Line 1008: \lcontroller(clk, reqA, &ackA, sel, &pass_tokenA, A)\l" id="116 -> 117"]
117 -> 118 [color="red" label="Lines 0 - 897: \lFunction start dummy edge\l_Bool is_selected;\lis_selected = (sel & (3 == id)) & 3;\l" id="117 -> 118"]
118 -> 119 [color="red" label="Line 900: \l[(scontroller.state) == 0]\l" id="118 -> 119"]
118 -> 120 [label="Line 900: \l[!((scontroller.state) == 0)]\l" id="118 -> 120"]
119 -> 136 [color="red" label="Line 901: \l[is_selected == 0]\l" id="119 -> 136"]
119 -> 137 [label="Line 901: \l[!(is_selected == 0)]\l" id="119 -> 137"]
136 -> 146 [color="red" label="Line 910: \lscontroller.pass_token = 0;\l" id="136 -> 146"]
146 -> 148 [color="red" label="Line 0: \l\l" id="146 -> 148"]
148 -> 150 [color="red" label="Line 0: \l\l" id="148 -> 150"]
150 -> 151 [color="red" label="Lines 926 - 927: \l*ack = scontroller.ack;\l*pass_token = scontroller.pass_token;\l" id="150 -> 151"]
151 -> 152 [color="red" label="Line 0: \ldefault return\l" id="151 -> 152"]
152 -> 153 [color="red" label="Line 1008: \lReturn edge from controller to main\l" id="152 -> 153"]
153 -> 154 [color="red" label="Line 1009: \lcontroller(clk, reqB, &ackB, sel, &pass_tokenB, B)\l" id="153 -> 154"]
154 -> 155 [color="red" label="Lines 0 - 897: \lFunction start dummy edge\l_Bool is_selected;\lis_selected = (sel & (3 == id)) & 3;\l" id="154 -> 155"]
155 -> 156 [color="red" label="Line 900: \l[(scontroller.state) == 0]\l" id="155 -> 156"]
155 -> 157 [label="Line 900: \l[!((scontroller.state) == 0)]\l" id="155 -> 157"]
156 -> 173 [color="red" label="Line 901: \l[is_selected == 0]\l" id="156 -> 173"]
156 -> 174 [label="Line 901: \l[!(is_selected == 0)]\l" id="156 -> 174"]
173 -> 183 [color="red" label="Line 910: \lscontroller.pass_token = 0;\l" id="173 -> 183"]
183 -> 185 [color="red" label="Line 0: \l\l" id="183 -> 185"]
185 -> 187 [color="red" label="Line 0: \l\l" id="185 -> 187"]
187 -> 188 [color="red" label="Lines 926 - 927: \l*ack = scontroller.ack;\l*pass_token = scontroller.pass_token;\l" id="187 -> 188"]
188 -> 189 [color="red" label="Line 0: \ldefault return\l" id="188 -> 189"]
189 -> 190 [color="red" label="Line 1009: \lReturn edge from controller to main\l" id="189 -> 190"]
190 -> 191 [color="red" label="Line 1010: \lcontroller(clk, reqC, &ackC, sel, &pass_tokenC, C)\l" id="190 -> 191"]
191 -> 192 [color="red" label="Lines 0 - 897: \lFunction start dummy edge\l_Bool is_selected;\lis_selected = (sel & (3 == id)) & 3;\l" id="191 -> 192"]
192 -> 193 [color="red" label="Line 900: \l[(scontroller.state) == 0]\l" id="192 -> 193"]
192 -> 194 [label="Line 900: \l[!((scontroller.state) == 0)]\l" id="192 -> 194"]
193 -> 210 [color="red" label="Line 901: \l[is_selected == 0]\l" id="193 -> 210"]
193 -> 211 [label="Line 901: \l[!(is_selected == 0)]\l" id="193 -> 211"]
210 -> 220 [color="red" label="Line 910: \lscontroller.pass_token = 0;\l" id="210 -> 220"]
220 -> 222 [color="red" label="Line 0: \l\l" id="220 -> 222"]
222 -> 224 [color="red" label="Line 0: \l\l" id="222 -> 224"]
224 -> 225 [color="red" label="Lines 926 - 927: \l*ack = scontroller.ack;\l*pass_token = scontroller.pass_token;\l" id="224 -> 225"]
225 -> 226 [color="red" label="Line 0: \ldefault return\l" id="225 -> 226"]
226 -> 227 [color="red" label="Line 1010: \lReturn edge from controller to main\l" id="226 -> 227"]
227 -> 228 [color="red" label="Line 1012: \larbiter(clk, &sel, active)\l" id="227 -> 228"]
228 -> 229 [color="red" label="Line 0: \lFunction start dummy edge\l" id="228 -> 229"]
229 -> 231 [label="Line 943: \l[!(active == 0)]\l" id="229 -> 231"]
229 -> 249 [color="red" label="Line 943: \l[active == 0]\l" id="229 -> 249"]
249 -> 250 [color="red" label="Line 952: \lint __CPAchecker_TMP_0;\l" id="249 -> 250"]
250 -> 251 [color="red" label="Line 952: \l[active == 0]\l" id="250 -> 251"]
250 -> 252 [label="Line 952: \l[!(active == 0)]\l" id="250 -> 252"]
251 -> 255 [color="red" label="Line 952: \l__CPAchecker_TMP_0 = X;\l" id="251 -> 255"]
255 -> 256 [color="red" label="Line 952: \l*sel = __CPAchecker_TMP_0;\l" id="255 -> 256"]
256 -> 257 [color="red" label="Line 0: \ldefault return\l" id="256 -> 257"]
257 -> 258 [color="red" label="Line 1012: \lReturn edge from arbiter to main\l" id="257 -> 258"]
258 -> 259 [color="red" label="Line 1014: \lint __CPAchecker_TMP_0;\l" id="258 -> 259"]
259 -> 260 [color="red" label="Line 1014: \l[pass_tokenA == 0]\l" id="259 -> 260"]
259 -> 267 [label="Line 1014: \l[!(pass_tokenA == 0)]\l" id="259 -> 267"]
260 -> 262 [color="red" label="Line 1014: \l[pass_tokenB == 0]\l" id="260 -> 262"]
260 -> 267 [label="Line 1014: \l[!(pass_tokenB == 0)]\l" id="260 -> 267"]
262 -> 265 [color="red" label="Line 1014: \l[pass_tokenC == 0]\l" id="262 -> 265"]
262 -> 267 [label="Line 1014: \l[!(pass_tokenC == 0)]\l" id="262 -> 267"]
265 -> 270 [color="red" label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="265 -> 270"]
270 -> 271 [color="red" label="Lines 1014 - 1018: \lactive = __CPAchecker_TMP_0;\lvoid __CPAchecker_TMP_2;\l" id="270 -> 271"]
271 -> 272 [label="Line 1018: \l[ackA == 1]\l" id="271 -> 272"]
271 -> 276 [color="red" label="Line 1018: \l[!(ackA == 1)]\l" id="271 -> 276"]
276 -> 277 [label="Line 1018: \l[ackB == 1]\l" id="276 -> 277"]
276 -> 282 [color="red" label="Line 1018: \l[!(ackB == 1)]\l" id="276 -> 282"]
282 -> 283 [label="Line 1018: \l[ackC == 1]\l" id="282 -> 283"]
282 -> 288 [color="red" label="Line 1018: \l[!(ackC == 1)]\l" id="282 -> 288"]
288 -> 290 [color="red" label="Line 1018: \l__assert_fail('(ackA == 1 && ackB == 1 || ackB == 1 && ackC == 1 || ackC == 1 && ackA ==1)', 'cpa.c', 156, '__PRETTY_FUNCTION__');\l" id="288 -> 290"]
}
