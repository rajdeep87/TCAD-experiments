digraph CFA {
95 [shape="circle" label="N95\n215"]
108 [shape="circle" label="N108\n214"]
109 [shape="circle" label="N109\n213"]
110 [shape="circle" label="N110\n212"]
111 [shape="circle" label="N111\n211"]
112 [shape="circle" label="N112\n210"]
113 [shape="circle" label="N113\n209"]
114 [shape="circle" label="N114\n208"]
115 [shape="circle" label="N115\n207"]
116 [shape="circle" label="N116\n206"]
117 [shape="circle" label="N117\n205"]
118 [shape="circle" label="N118\n204"]
119 [shape="circle" label="N119\n203"]
120 [shape="circle" label="N120\n202"]
121 [shape="circle" label="N121\n201"]
122 [shape="circle" label="N122\n200"]
123 [shape="circle" label="N123\n199"]
124 [shape="circle" label="N124\n198"]
125 [shape="circle" label="N125\n197"]
126 [shape="circle" label="N126\n196"]
127 [shape="circle" label="N127\n195"]
128 [shape="circle" label="N128\n194"]
129 [shape="circle" label="N129\n193"]
130 [shape="circle" label="N130\n192"]
131 [shape="circle" label="N131\n191"]
132 [shape="circle" label="N132\n190"]
133 [shape="circle" label="N133\n189"]
134 [shape="circle" label="N134\n188"]
135 [shape="circle" label="N135\n187"]
136 [shape="circle" label="N136\n186"]
137 [shape="circle" label="N137\n185"]
138 [shape="circle" label="N138\n184"]
139 [shape="circle" label="N139\n183"]
140 [shape="circle" label="N140\n182"]
141 [shape="circle" label="N141\n181"]
142 [shape="circle" label="N142\n180"]
143 [shape="circle" label="N143\n179"]
144 [shape="circle" label="N144\n178"]
145 [shape="circle" label="N145\n177"]
146 [shape="circle" label="N146\n176"]
147 [shape="circle" label="N147\n175"]
148 [shape="circle" label="N148\n174"]
149 [shape="circle" label="N149\n173"]
150 [shape="circle" label="N150\n172"]
151 [shape="circle" label="N151\n171"]
152 [shape="circle" label="N152\n170"]
153 [shape="circle" label="N153\n169"]
154 [shape="circle" label="N154\n168"]
155 [shape="circle" label="N155\n167"]
156 [shape="circle" label="N156\n166"]
157 [shape="circle" label="N157\n165"]
158 [shape="circle" label="N158\n164"]
159 [shape="circle" label="N159\n163"]
160 [shape="circle" label="N160\n162"]
161 [shape="circle" label="N161\n161"]
162 [shape="circle" label="N162\n160"]
163 [shape="circle" label="N163\n159"]
164 [shape="circle" label="N164\n158"]
165 [shape="circle" label="N165\n157"]
166 [shape="circle" label="N166\n156"]
167 [shape="circle" label="N167\n155"]
168 [shape="circle" label="N168\n154"]
169 [shape="circle" label="N169\n153"]
170 [shape="circle" label="N170\n152"]
171 [shape="circle" label="N171\n151"]
172 [shape="circle" label="N172\n150"]
173 [shape="circle" label="N173\n149"]
174 [shape="circle" label="N174\n148"]
175 [shape="circle" label="N175\n147"]
176 [shape="circle" label="N176\n146"]
177 [shape="circle" label="N177\n145"]
178 [shape="circle" label="N178\n144"]
179 [shape="circle" label="N179\n143"]
180 [shape="circle" label="N180\n142"]
181 [shape="circle" label="N181\n141"]
182 [shape="circle" label="N182\n140"]
183 [shape="circle" label="N183\n139"]
184 [shape="circle" label="N184\n138"]
185 [shape="circle" label="N185\n137"]
186 [shape="circle" label="N186\n136"]
187 [shape="circle" label="N187\n135"]
188 [shape="circle" label="N188\n134"]
189 [shape="circle" label="N189\n133"]
190 [shape="circle" label="N190\n132"]
191 [shape="circle" label="N191\n131"]
192 [shape="circle" label="N192\n130"]
193 [shape="circle" label="N193\n129"]
194 [shape="circle" label="N194\n128"]
195 [shape="circle" label="N195\n127"]
196 [shape="circle" label="N196\n126"]
197 [shape="circle" label="N197\n125"]
198 [shape="circle" label="N198\n124"]
199 [shape="circle" label="N199\n123"]
200 [shape="circle" label="N200\n122"]
201 [shape="circle" label="N201\n121"]
202 [shape="circle" label="N202\n120"]
203 [shape="circle" label="N203\n119"]
204 [shape="circle" label="N204\n118"]
205 [shape="circle" label="N205\n117"]
206 [shape="circle" label="N206\n116"]
207 [shape="circle" label="N207\n115"]
208 [shape="circle" label="N208\n114"]
209 [shape="circle" label="N209\n113"]
210 [shape="circle" label="N210\n112"]
211 [shape="circle" label="N211\n111"]
212 [shape="circle" label="N212\n110"]
213 [shape="circle" label="N213\n109"]
214 [shape="circle" label="N214\n108"]
215 [shape="circle" label="N215\n107"]
216 [shape="circle" label="N216\n106"]
217 [shape="circle" label="N217\n105"]
218 [shape="circle" label="N218\n104"]
219 [shape="circle" label="N219\n103"]
220 [shape="circle" label="N220\n102"]
221 [shape="circle" label="N221\n101"]
222 [shape="circle" label="N222\n100"]
223 [shape="circle" label="N223\n99"]
224 [shape="circle" label="N224\n98"]
225 [shape="circle" label="N225\n97"]
226 [shape="circle" label="N226\n96"]
227 [shape="circle" label="N227\n95"]
228 [shape="circle" label="N228\n94"]
229 [shape="circle" label="N229\n93"]
230 [shape="circle" label="N230\n92"]
231 [shape="circle" label="N231\n91"]
232 [shape="circle" label="N232\n90"]
233 [shape="circle" label="N233\n89"]
234 [shape="circle" label="N234\n88"]
235 [shape="circle" label="N235\n87"]
236 [shape="circle" label="N236\n86"]
237 [shape="circle" label="N237\n85"]
238 [shape="circle" label="N238\n84"]
239 [shape="circle" label="N239\n83"]
240 [shape="circle" label="N240\n82"]
241 [shape="circle" label="N241\n81"]
242 [shape="circle" label="N242\n80"]
243 [shape="circle" label="N243\n79"]
244 [shape="circle" label="N244\n78"]
245 [shape="circle" label="N245\n77"]
246 [shape="circle" label="N246\n76"]
247 [shape="circle" label="N247\n75"]
248 [shape="circle" label="N248\n74"]
249 [shape="circle" label="N249\n73"]
250 [shape="circle" label="N250\n72"]
251 [shape="circle" label="N251\n71"]
252 [shape="circle" label="N252\n70"]
253 [shape="circle" label="N253\n69"]
254 [shape="circle" label="N254\n68"]
255 [shape="circle" label="N255\n67"]
256 [shape="circle" label="N256\n66"]
257 [shape="circle" label="N257\n65"]
258 [shape="circle" label="N258\n64"]
259 [shape="circle" label="N259\n63"]
260 [shape="circle" label="N260\n62"]
261 [shape="circle" label="N261\n61"]
262 [shape="circle" label="N262\n60"]
263 [shape="circle" label="N263\n59"]
264 [shape="circle" label="N264\n58"]
265 [shape="circle" label="N265\n57"]
266 [shape="circle" label="N266\n56"]
267 [shape="circle" label="N267\n55"]
268 [shape="circle" label="N268\n54"]
269 [shape="circle" label="N269\n53"]
270 [shape="circle" label="N270\n52"]
271 [shape="circle" label="N271\n51"]
272 [shape="circle" label="N272\n50"]
273 [shape="circle" label="N273\n49"]
274 [shape="circle" label="N274\n48"]
275 [shape="circle" label="N275\n47"]
276 [shape="circle" label="N276\n46"]
277 [shape="circle" label="N277\n45"]
278 [shape="circle" label="N278\n44"]
279 [shape="circle" label="N279\n43"]
280 [shape="circle" label="N280\n42"]
281 [shape="circle" label="N281\n41"]
282 [shape="circle" label="N282\n40"]
283 [shape="circle" label="N283\n39"]
284 [shape="circle" label="N284\n38"]
285 [shape="circle" label="N285\n37"]
286 [shape="circle" label="N286\n36"]
287 [shape="circle" label="N287\n35"]
288 [shape="circle" label="N288\n34"]
289 [shape="circle" label="N289\n33"]
290 [shape="circle" label="N290\n32"]
291 [shape="circle" label="N291\n31"]
292 [shape="circle" label="N292\n30"]
293 [shape="circle" label="N293\n29"]
294 [shape="circle" label="N294\n28"]
295 [shape="circle" label="N295\n27"]
296 [shape="circle" label="N296\n26"]
297 [shape="circle" label="N297\n25"]
298 [shape="circle" label="N298\n24"]
299 [shape="circle" label="N299\n23"]
300 [shape="circle" label="N300\n22"]
301 [shape="circle" label="N301\n21"]
302 [shape="circle" label="N302\n20"]
303 [shape="circle" label="N303\n19"]
304 [shape="circle" label="N304\n18"]
305 [shape="circle" label="N305\n17"]
306 [shape="circle" label="N306\n16"]
307 [shape="circle" label="N307\n15"]
308 [shape="circle" label="N308\n14"]
309 [shape="circle" label="N309\n13"]
310 [shape="circle" label="N310\n12"]
311 [shape="circle" label="N311\n11"]
96 [shape="circle" label="N96\n10"]
97 [shape="circle" label="N97\n9"]
98 [shape="circle" label="N98\n8"]
99 [shape="circle" label="N99\n7"]
100 [shape="circle" label="N100\n6"]
35 [shape="circle" label="N35\n7"]
36 [shape="circle" label="N36\n6"]
37 [shape="circle" label="N37\n5"]
38 [shape="circle" label="N38\n4"]
39 [shape="circle" label="N39\n3"]
40 [shape="circle" label="N40\n2"]
41 [shape="circle" label="N41\n1"]
34 [shape="circle" label="N34\n0"]
101 [shape="circle" label="N101\n5"]
102 [shape="doublecircle" label="N102\n4"]
103 [shape="circle" label="N103\n3"]
105 [shape="circle" label="N105\n2"]
106 [shape="circle" label="N106\n1"]
43 [shape="circle" label="N43\n46"]
44 [shape="circle" label="N44\n45"]
45 [shape="circle" label="N45\n44"]
46 [shape="circle" label="N46\n43"]
47 [shape="circle" label="N47\n42"]
48 [shape="circle" label="N48\n41"]
49 [shape="diamond" label="N49\n40"]
53 [shape="diamond" label="N53\n39"]
59 [shape="diamond" label="N59\n38"]
66 [shape="diamond" label="N66\n37"]
73 [shape="circle" label="N73\n36"]
50 [shape="circle" label="N50\n11"]
1 [shape="circle" label="N1\n26"]
2 [shape="circle" label="N2\n25"]
3 [shape="diamond" label="N3\n24"]
6 [shape="diamond" label="N6\n23"]
10 [shape="diamond" label="N10\n22"]
14 [shape="diamond" label="N14\n21"]
18 [shape="diamond" label="N18\n20"]
22 [shape="diamond" label="N22\n19"]
26 [shape="diamond" label="N26\n18"]
30 [shape="circle" label="N30\n17"]
32 [shape="circle" label="N32\n16"]
4 [shape="circle" label="N4\n1"]
0 [shape="circle" label="N0\n0"]
84 [shape="circle" label="N84\n10"]
85 [shape="circle" label="N85\n9"]
86 [shape="circle" label="N86\n8"]
87 [shape="circle" label="N87\n7"]
88 [shape="diamond" label="N88\n6"]
90 [shape="circle" label="N90\n5"]
91 [shape="circle" label="N91\n3"]
92 [shape="circle" label="N92\n2"]
93 [shape="circle" label="N93\n1"]
42 [shape="circle" label="N42\n0"]
107 [shape="circle" label="N107\n0"]
89 [shape="circle" label="N89\n4"]
29 [shape="circle" label="N29\n15"]
31 [shape="circle" label="N31\n14"]
25 [shape="circle" label="N25\n13"]
27 [shape="circle" label="N27\n12"]
21 [shape="circle" label="N21\n11"]
23 [shape="circle" label="N23\n10"]
17 [shape="circle" label="N17\n9"]
19 [shape="circle" label="N19\n8"]
13 [shape="circle" label="N13\n7"]
15 [shape="circle" label="N15\n6"]
9 [shape="circle" label="N9\n5"]
11 [shape="circle" label="N11\n4"]
5 [shape="circle" label="N5\n3"]
7 [shape="circle" label="N7\n2"]
72 [shape="diamond" label="N72\n35"]
76 [shape="diamond" label="N76\n34"]
79 [shape="circle" label="N79\n33"]
74 [shape="circle" label="N74\n26"]
80 [shape="circle" label="N80\n32"]
81 [shape="circle" label="N81\n31"]
82 [shape="circle" label="N82\n30"]
75 [shape="circle" label="N75\n29"]
77 [shape="circle" label="N77\n28"]
78 [shape="circle" label="N78\n27"]
65 [shape="diamond" label="N65\n25"]
67 [shape="circle" label="N67\n22"]
70 [shape="circle" label="N70\n21"]
68 [shape="circle" label="N68\n24"]
69 [shape="circle" label="N69\n23"]
58 [shape="circle" label="N58\n20"]
60 [shape="circle" label="N60\n19"]
61 [shape="circle" label="N61\n18"]
62 [shape="circle" label="N62\n17"]
63 [shape="circle" label="N63\n16"]
52 [shape="diamond" label="N52\n15"]
55 [shape="circle" label="N55\n14"]
56 [shape="circle" label="N56\n13"]
54 [shape="circle" label="N54\n12"]
node [shape="circle"]
subgraph cluster_ROMS {
label="ROMS()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="unsigned int ROM;"]
3 -> 5 [label="[a == 0]"]
3 -> 6 [label="[!(a == 0)]"]
6 -> 9 [label="[a == 1]"]
6 -> 10 [label="[!(a == 1)]"]
10 -> 13 [label="[a == 2]"]
10 -> 14 [label="[!(a == 2)]"]
14 -> 17 [label="[a == 3]"]
14 -> 18 [label="[!(a == 3)]"]
18 -> 21 [label="[a == 4]"]
18 -> 22 [label="[!(a == 4)]"]
22 -> 25 [label="[a == 5]"]
22 -> 26 [label="[!(a == 5)]"]
26 -> 29 [label="[a == 6]"]
26 -> 30 [label="[!(a == 6)]"]
30 -> 32 [label="ROM = 196596;"]
32 -> 4 [label=""]
4 -> 0 [label="return ROM;"]
29 -> 31 [label="ROM = 829275;"]
31 -> 4 [label=""]
25 -> 27 [label="ROM = 1047464;"]
27 -> 4 [label=""]
21 -> 23 [label="ROM = 1048430;"]
23 -> 4 [label=""]
17 -> 19 [label="ROM = 1046202;"]
19 -> 4 [label=""]
13 -> 15 [label="ROM = 692223;"]
15 -> 4 [label=""]
9 -> 11 [label="ROM = 236130;"]
11 -> 4 [label=""]
5 -> 7 [label="ROM = 522618;"]
7 -> 4 [label=""]}
subgraph cluster_b08 {
label="b08()"
43 -> 44 [label="Function start dummy edge"]
44 -> 45 [label="unsigned char ROM_1;"]
45 -> 46 [label="unsigned char ROM_2;"]
46 -> 47 [label="unsigned char ROM_OR;"]
47 -> 48 [label="unsigned int ROM_OUT;"]
48 -> 49 [label="switch (sb.STATO)"]
49 -> 52 [label="[(sb.STATO) == start_st]"]
49 -> 53 [label="[!((sb.STATO) == start_st)]"]
53 -> 58 [label="[(sb.STATO) == init]"]
53 -> 59 [label="[!((sb.STATO) == init)]"]
59 -> 65 [label="[(sb.STATO) == loop_st]"]
59 -> 66 [label="[!((sb.STATO) == loop_st)]"]
66 -> 72 [label="[(sb.STATO) == the_end]"]
66 -> 73 [label="[!((sb.STATO) == the_end)]"]
73 -> 50 [label=""]
50 -> 84 [label="ROM_OUT = ROMS(sb.MAR);" style="dotted" arrowhead="empty"]
84 -> 85 [label="ROM_1 = (ROM_OUT >> 12) & 255;"]
85 -> 86 [label="ROM_2 = (ROM_OUT >> 4) & 255;"]
86 -> 87 [label="ROM_OR = ROM_OUT & 15;"]
87 -> 88 [label="void __CPAchecker_TMP_0;"]
88 -> 89 [label="[(ROM_OR & 15) != 0]"]
88 -> 90 [label="[!((ROM_OR & 15) != 0)]"]
90 -> 91 [label="__assert_fail(\"(ROM_OR&0xF)!=0\", \"main.c\", 93, \"__PRETTY_FUNCTION__\");"]
91 -> 92 [label="0;"]
92 -> 93 [label="*O = sb.O;"]
93 -> 42 [label="default return"]
89 -> 91 [label="0;"]
72 -> 75 [label="[(sb.MAR) != 7]"]
72 -> 76 [label="[!((sb.MAR) != 7)]"]
76 -> 80 [label="[START == 0]"]
76 -> 79 [label="[!(START == 0)]"]
79 -> 74 [label=""]
74 -> 50 [label="break"]
80 -> 81 [label="sb.O = sb.OUT_R;"]
81 -> 82 [label="sb.STATO = start_st;"]
82 -> 74 [label=""]
75 -> 77 [label="sb.MAR = (sb.MAR) + 1;"]
77 -> 78 [label="sb.STATO = loop_st;"]
78 -> 74 [label=""]
65 -> 68 [label="[(((ROM_2 & (~(sb.IN_R))) | (ROM_1 & (sb.IN_R))) | (ROM_2 & ROM_1)) == 255]"]
65 -> 67 [label="[!((((ROM_2 & (~(sb.IN_R))) | (ROM_1 & (sb.IN_R))) | (ROM_2 & ROM_1)) == 255)]"]
67 -> 70 [label="sb.STATO = the_end;"]
70 -> 50 [label="break"]
68 -> 69 [label="sb.OUT_R = (sb.OUT_R) | ROM_OR;"]
69 -> 67 [label=""]
58 -> 60 [label="sb.IN_R = I;"]
60 -> 61 [label="sb.OUT_R = 0;"]
61 -> 62 [label="sb.MAR = 0;"]
62 -> 63 [label="sb.STATO = loop_st;"]
63 -> 50 [label="break"]
52 -> 54 [label="[START == 0]"]
52 -> 55 [label="[!(START == 0)]"]
55 -> 56 [label="sb.STATO = init;"]
56 -> 54 [label=""]
54 -> 50 [label="break"]}
subgraph cluster_initial {
label="initial()"
35 -> 36 [label="Function start dummy edge"]
36 -> 37 [label="sb.STATO = start_st;"]
37 -> 38 [label="sb.MAR = 0;"]
38 -> 39 [label="sb.IN_R = 0;"]
39 -> 40 [label="sb.OUT_R = 0;"]
40 -> 41 [label="sb.O = 0;"]
41 -> 34 [label="default return"]}
subgraph cluster_main {
label="main()"
95 -> 108 [label="INIT GLOBAL VARS"]
108 -> 109 [label="typedef unsigned long int size_t;"]
109 -> 110 [label="typedef unsigned char __u_char;"]
110 -> 111 [label="typedef unsigned short int __u_short;"]
111 -> 112 [label="typedef unsigned int __u_int;"]
112 -> 113 [label="typedef unsigned long int __u_long;"]
113 -> 114 [label="typedef signed char __int8_t;"]
114 -> 115 [label="typedef unsigned char __uint8_t;"]
115 -> 116 [label="typedef signed short int __int16_t;"]
116 -> 117 [label="typedef unsigned short int __uint16_t;"]
117 -> 118 [label="typedef signed int __int32_t;"]
118 -> 119 [label="typedef unsigned int __uint32_t;"]
119 -> 120 [label="typedef signed long int __int64_t;"]
120 -> 121 [label="typedef unsigned long int __uint64_t;"]
121 -> 122 [label="typedef long int __quad_t;"]
122 -> 123 [label="typedef unsigned long int __u_quad_t;"]
123 -> 124 [label="typedef unsigned long int __dev_t;"]
124 -> 125 [label="typedef unsigned int __uid_t;"]
125 -> 126 [label="typedef unsigned int __gid_t;"]
126 -> 127 [label="typedef unsigned long int __ino_t;"]
127 -> 128 [label="typedef unsigned long int __ino64_t;"]
128 -> 129 [label="typedef unsigned int __mode_t;"]
129 -> 130 [label="typedef unsigned long int __nlink_t;"]
130 -> 131 [label="typedef long int __off_t;"]
131 -> 132 [label="typedef long int __off64_t;"]
132 -> 133 [label="typedef int __pid_t;"]
133 -> 134 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
134 -> 135 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
135 -> 136 [label="typedef long int __clock_t;"]
136 -> 137 [label="typedef unsigned long int __rlim_t;"]
137 -> 138 [label="typedef unsigned long int __rlim64_t;"]
138 -> 139 [label="typedef unsigned int __id_t;"]
139 -> 140 [label="typedef long int __time_t;"]
140 -> 141 [label="typedef unsigned int __useconds_t;"]
141 -> 142 [label="typedef long int __suseconds_t;"]
142 -> 143 [label="typedef int __daddr_t;"]
143 -> 144 [label="typedef int __key_t;"]
144 -> 145 [label="typedef int __clockid_t;"]
145 -> 146 [label="typedef void *__timer_t;"]
146 -> 147 [label="typedef long int __blksize_t;"]
147 -> 148 [label="typedef long int __blkcnt_t;"]
148 -> 149 [label="typedef long int __blkcnt64_t;"]
149 -> 150 [label="typedef unsigned long int __fsblkcnt_t;"]
150 -> 151 [label="typedef unsigned long int __fsblkcnt64_t;"]
151 -> 152 [label="typedef unsigned long int __fsfilcnt_t;"]
152 -> 153 [label="typedef unsigned long int __fsfilcnt64_t;"]
153 -> 154 [label="typedef long int __fsword_t;"]
154 -> 155 [label="typedef long int __ssize_t;"]
155 -> 156 [label="typedef long int __syscall_slong_t;"]
156 -> 157 [label="typedef unsigned long int __syscall_ulong_t;"]
157 -> 158 [label="typedef __off64_t __loff_t;"]
158 -> 159 [label="typedef __quad_t *__qaddr_t;"]
159 -> 160 [label="typedef char *__caddr_t;"]
160 -> 161 [label="typedef long int __intptr_t;"]
161 -> 162 [label="typedef unsigned int __socklen_t;"]
162 -> 163 [label="struct _IO_FILE ;"]
163 -> 164 [label="typedef struct _IO_FILE FILE;"]
164 -> 165 [label="typedef struct _IO_FILE __FILE;"]
165 -> 166 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
166 -> 167 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
167 -> 168 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
168 -> 169 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
169 -> 170 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
170 -> 171 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
171 -> 172 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
172 -> 173 [label="typedef __builtin_va_list __gnuc_va_list;"]
173 -> 174 [label="struct _IO_jump_t ;"]
174 -> 175 [label="typedef void _IO_lock_t;"]
175 -> 176 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
176 -> 177 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
177 -> 178 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
178 -> 179 [label="typedef struct _IO_FILE _IO_FILE;"]
179 -> 180 [label="struct _IO_FILE_plus ;"]
180 -> 181 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
181 -> 182 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
182 -> 183 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
183 -> 184 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
184 -> 185 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
185 -> 186 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
186 -> 187 [label="typedef int __io_close_fn(void *__cookie);"]
187 -> 188 [label="int __underflow(_IO_FILE *);"]
188 -> 189 [label="int __uflow(_IO_FILE *);"]
189 -> 190 [label="int __overflow(_IO_FILE *, int);"]
190 -> 191 [label="int _IO_getc(_IO_FILE *__fp);"]
191 -> 192 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
192 -> 193 [label="int _IO_feof(_IO_FILE *__fp);"]
193 -> 194 [label="int _IO_ferror(_IO_FILE *__fp);"]
194 -> 195 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
195 -> 196 [label="void _IO_flockfile(_IO_FILE *);"]
196 -> 197 [label="void _IO_funlockfile(_IO_FILE *);"]
197 -> 198 [label="int _IO_ftrylockfile(_IO_FILE *);"]
198 -> 199 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
199 -> 200 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
200 -> 201 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
201 -> 202 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
202 -> 203 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
203 -> 204 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
204 -> 205 [label="void _IO_free_backup_area(_IO_FILE *);"]
205 -> 206 [label="typedef __gnuc_va_list va_list;"]
206 -> 207 [label="typedef __off_t off_t;"]
207 -> 208 [label="typedef __ssize_t ssize_t;"]
208 -> 209 [label="typedef _G_fpos_t fpos_t;"]
209 -> 210 [label="extern struct _IO_FILE *stdin;"]
210 -> 211 [label="extern struct _IO_FILE *stdout;"]
211 -> 212 [label="extern struct _IO_FILE *stderr;"]
212 -> 213 [label="int remove(const char *__filename);"]
213 -> 214 [label="int rename(const char *__old, const char *__new);"]
214 -> 215 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
215 -> 216 [label="FILE * tmpfile();"]
216 -> 217 [label="char * tmpnam(char *__s);"]
217 -> 218 [label="char * tmpnam_r(char *__s);"]
218 -> 219 [label="char * tempnam(const char *__dir, const char *__pfx);"]
219 -> 220 [label="int fclose(FILE *__stream);"]
220 -> 221 [label="int fflush(FILE *__stream);"]
221 -> 222 [label="int fflush_unlocked(FILE *__stream);"]
222 -> 223 [label="FILE * fopen(const char *__filename, const char *__modes);"]
223 -> 224 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
224 -> 225 [label="FILE * fdopen(int __fd, const char *__modes);"]
225 -> 226 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
226 -> 227 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
227 -> 228 [label="void setbuf(FILE *__stream, char *__buf);"]
228 -> 229 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
229 -> 230 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
230 -> 231 [label="void setlinebuf(FILE *__stream);"]
231 -> 232 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
232 -> 233 [label="int printf(const char *__format, ...);"]
233 -> 234 [label="int sprintf(char *__s, const char *__format, ...);"]
234 -> 235 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
235 -> 236 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
236 -> 237 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
237 -> 238 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
238 -> 239 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
239 -> 240 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
240 -> 241 [label="int dprintf(int __fd, const char *__fmt, ...);"]
241 -> 242 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
242 -> 243 [label="int scanf(const char *__format, ...);"]
243 -> 244 [label="int sscanf(const char *__s, const char *__format, ...);"]
244 -> 245 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
245 -> 246 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
246 -> 247 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
247 -> 248 [label="int fgetc(FILE *__stream);"]
248 -> 249 [label="int getc(FILE *__stream);"]
249 -> 250 [label="int getchar();"]
250 -> 251 [label="int getc_unlocked(FILE *__stream);"]
251 -> 252 [label="int getchar_unlocked();"]
252 -> 253 [label="int fgetc_unlocked(FILE *__stream);"]
253 -> 254 [label="int fputc(int __c, FILE *__stream);"]
254 -> 255 [label="int putc(int __c, FILE *__stream);"]
255 -> 256 [label="int putchar(int __c);"]
256 -> 257 [label="int fputc_unlocked(int __c, FILE *__stream);"]
257 -> 258 [label="int putc_unlocked(int __c, FILE *__stream);"]
258 -> 259 [label="int putchar_unlocked(int __c);"]
259 -> 260 [label="int getw(FILE *__stream);"]
260 -> 261 [label="int putw(int __w, FILE *__stream);"]
261 -> 262 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
262 -> 263 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
263 -> 264 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
264 -> 265 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
265 -> 266 [label="int fputs(const char *__s, FILE *__stream);"]
266 -> 267 [label="int puts(const char *__s);"]
267 -> 268 [label="int ungetc(int __c, FILE *__stream);"]
268 -> 269 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
269 -> 270 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
270 -> 271 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
271 -> 272 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
272 -> 273 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
273 -> 274 [label="long int ftell(FILE *__stream);"]
274 -> 275 [label="void rewind(FILE *__stream);"]
275 -> 276 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
276 -> 277 [label="__off_t  ftello(FILE *__stream);"]
277 -> 278 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
278 -> 279 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
279 -> 280 [label="void clearerr(FILE *__stream);"]
280 -> 281 [label="int feof(FILE *__stream);"]
281 -> 282 [label="int ferror(FILE *__stream);"]
282 -> 283 [label="void clearerr_unlocked(FILE *__stream);"]
283 -> 284 [label="int feof_unlocked(FILE *__stream);"]
284 -> 285 [label="int ferror_unlocked(FILE *__stream);"]
285 -> 286 [label="void perror(const char *__s);"]
286 -> 287 [label="extern int sys_nerr;"]
287 -> 288 [label="extern const const char *sys_errlist[];"]
288 -> 289 [label="int fileno(FILE *__stream);"]
289 -> 290 [label="int fileno_unlocked(FILE *__stream);"]
290 -> 291 [label="FILE * popen(const char *__command, const char *__modes);"]
291 -> 292 [label="int pclose(FILE *__stream);"]
292 -> 293 [label="char * ctermid(char *__s);"]
293 -> 294 [label="void flockfile(FILE *__stream);"]
294 -> 295 [label="int ftrylockfile(FILE *__stream);"]
295 -> 296 [label="void funlockfile(FILE *__stream);"]
296 -> 297 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
297 -> 298 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
298 -> 299 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
299 -> 300 [label="_Bool nondet_bool();"]
300 -> 301 [label="unsigned char nondet_char();"]
301 -> 302 [label="int start_st = 0;"]
302 -> 303 [label="int init = 1;"]
303 -> 304 [label="int loop_st = 2;"]
304 -> 305 [label="int the_end = 3;"]
305 -> 306 [label="struct state_elements_b08 {   unsigned char O;   _Bool STATO;   unsigned char IN_R;   unsigned char MAR;   unsigned char OUT_R; } ;"]
306 -> 307 [label="struct state_elements_b08 sb = {  };"]
307 -> 308 [label="unsigned char ROMS(unsigned char a);"]
308 -> 309 [label="void initial();"]
309 -> 310 [label="void b08(_Bool CLOCK, _Bool START, unsigned char I, unsigned char *O);"]
310 -> 311 [label="void main();"]
311 -> 96 [label="Function start dummy edge"]
96 -> 97 [label="_Bool CLOCK;"]
97 -> 98 [label="_Bool START;"]
98 -> 99 [label="unsigned char I;"]
99 -> 100 [label="unsigned char O;"]
100 -> 101 [label="initial();" style="dotted" arrowhead="empty"]
101 -> 102 [label="while"]
102 -> 103 [label=""]
103 -> 105 [label="START = nondet_bool();"]
105 -> 106 [label="I = nondet_char();"]
106 -> 107 [label="b08(CLOCK, START, I, &O);" style="dotted" arrowhead="empty"]
107 -> 102 [label=""]}
100 -> 35 [label="initial()"]
34 -> 101 [label="Return edge from initial to main"]
106 -> 43 [label="b08(CLOCK, START, I, &O)"]
50 -> 1 [label="ROMS(sb.MAR)"]
0 -> 84 [label="Return edge from ROMS to b08"]
42 -> 107 [label="Return edge from b08 to main"]}