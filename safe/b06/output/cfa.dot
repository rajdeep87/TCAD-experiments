digraph CFA {
106 [shape="circle" label="N106\n234"]
132 [shape="circle" label="N132\n233"]
133 [shape="circle" label="N133\n232"]
134 [shape="circle" label="N134\n231"]
135 [shape="circle" label="N135\n230"]
136 [shape="circle" label="N136\n229"]
137 [shape="circle" label="N137\n228"]
138 [shape="circle" label="N138\n227"]
139 [shape="circle" label="N139\n226"]
140 [shape="circle" label="N140\n225"]
141 [shape="circle" label="N141\n224"]
142 [shape="circle" label="N142\n223"]
143 [shape="circle" label="N143\n222"]
144 [shape="circle" label="N144\n221"]
145 [shape="circle" label="N145\n220"]
146 [shape="circle" label="N146\n219"]
147 [shape="circle" label="N147\n218"]
148 [shape="circle" label="N148\n217"]
149 [shape="circle" label="N149\n216"]
150 [shape="circle" label="N150\n215"]
151 [shape="circle" label="N151\n214"]
152 [shape="circle" label="N152\n213"]
153 [shape="circle" label="N153\n212"]
154 [shape="circle" label="N154\n211"]
155 [shape="circle" label="N155\n210"]
156 [shape="circle" label="N156\n209"]
157 [shape="circle" label="N157\n208"]
158 [shape="circle" label="N158\n207"]
159 [shape="circle" label="N159\n206"]
160 [shape="circle" label="N160\n205"]
161 [shape="circle" label="N161\n204"]
162 [shape="circle" label="N162\n203"]
163 [shape="circle" label="N163\n202"]
164 [shape="circle" label="N164\n201"]
165 [shape="circle" label="N165\n200"]
166 [shape="circle" label="N166\n199"]
167 [shape="circle" label="N167\n198"]
168 [shape="circle" label="N168\n197"]
169 [shape="circle" label="N169\n196"]
170 [shape="circle" label="N170\n195"]
171 [shape="circle" label="N171\n194"]
172 [shape="circle" label="N172\n193"]
173 [shape="circle" label="N173\n192"]
174 [shape="circle" label="N174\n191"]
175 [shape="circle" label="N175\n190"]
176 [shape="circle" label="N176\n189"]
177 [shape="circle" label="N177\n188"]
178 [shape="circle" label="N178\n187"]
179 [shape="circle" label="N179\n186"]
180 [shape="circle" label="N180\n185"]
181 [shape="circle" label="N181\n184"]
182 [shape="circle" label="N182\n183"]
183 [shape="circle" label="N183\n182"]
184 [shape="circle" label="N184\n181"]
185 [shape="circle" label="N185\n180"]
186 [shape="circle" label="N186\n179"]
187 [shape="circle" label="N187\n178"]
188 [shape="circle" label="N188\n177"]
189 [shape="circle" label="N189\n176"]
190 [shape="circle" label="N190\n175"]
191 [shape="circle" label="N191\n174"]
192 [shape="circle" label="N192\n173"]
193 [shape="circle" label="N193\n172"]
194 [shape="circle" label="N194\n171"]
195 [shape="circle" label="N195\n170"]
196 [shape="circle" label="N196\n169"]
197 [shape="circle" label="N197\n168"]
198 [shape="circle" label="N198\n167"]
199 [shape="circle" label="N199\n166"]
200 [shape="circle" label="N200\n165"]
201 [shape="circle" label="N201\n164"]
202 [shape="circle" label="N202\n163"]
203 [shape="circle" label="N203\n162"]
204 [shape="circle" label="N204\n161"]
205 [shape="circle" label="N205\n160"]
206 [shape="circle" label="N206\n159"]
207 [shape="circle" label="N207\n158"]
208 [shape="circle" label="N208\n157"]
209 [shape="circle" label="N209\n156"]
210 [shape="circle" label="N210\n155"]
211 [shape="circle" label="N211\n154"]
212 [shape="circle" label="N212\n153"]
213 [shape="circle" label="N213\n152"]
214 [shape="circle" label="N214\n151"]
215 [shape="circle" label="N215\n150"]
216 [shape="circle" label="N216\n149"]
217 [shape="circle" label="N217\n148"]
218 [shape="circle" label="N218\n147"]
219 [shape="circle" label="N219\n146"]
220 [shape="circle" label="N220\n145"]
221 [shape="circle" label="N221\n144"]
222 [shape="circle" label="N222\n143"]
223 [shape="circle" label="N223\n142"]
224 [shape="circle" label="N224\n141"]
225 [shape="circle" label="N225\n140"]
226 [shape="circle" label="N226\n139"]
227 [shape="circle" label="N227\n138"]
228 [shape="circle" label="N228\n137"]
229 [shape="circle" label="N229\n136"]
230 [shape="circle" label="N230\n135"]
231 [shape="circle" label="N231\n134"]
232 [shape="circle" label="N232\n133"]
233 [shape="circle" label="N233\n132"]
234 [shape="circle" label="N234\n131"]
235 [shape="circle" label="N235\n130"]
236 [shape="circle" label="N236\n129"]
237 [shape="circle" label="N237\n128"]
238 [shape="circle" label="N238\n127"]
239 [shape="circle" label="N239\n126"]
240 [shape="circle" label="N240\n125"]
241 [shape="circle" label="N241\n124"]
242 [shape="circle" label="N242\n123"]
243 [shape="circle" label="N243\n122"]
244 [shape="circle" label="N244\n121"]
245 [shape="circle" label="N245\n120"]
246 [shape="circle" label="N246\n119"]
247 [shape="circle" label="N247\n118"]
248 [shape="circle" label="N248\n117"]
249 [shape="circle" label="N249\n116"]
250 [shape="circle" label="N250\n115"]
251 [shape="circle" label="N251\n114"]
252 [shape="circle" label="N252\n113"]
253 [shape="circle" label="N253\n112"]
254 [shape="circle" label="N254\n111"]
255 [shape="circle" label="N255\n110"]
256 [shape="circle" label="N256\n109"]
257 [shape="circle" label="N257\n108"]
258 [shape="circle" label="N258\n107"]
259 [shape="circle" label="N259\n106"]
260 [shape="circle" label="N260\n105"]
261 [shape="circle" label="N261\n104"]
262 [shape="circle" label="N262\n103"]
263 [shape="circle" label="N263\n102"]
264 [shape="circle" label="N264\n101"]
265 [shape="circle" label="N265\n100"]
266 [shape="circle" label="N266\n99"]
267 [shape="circle" label="N267\n98"]
268 [shape="circle" label="N268\n97"]
269 [shape="circle" label="N269\n96"]
270 [shape="circle" label="N270\n95"]
271 [shape="circle" label="N271\n94"]
272 [shape="circle" label="N272\n93"]
273 [shape="circle" label="N273\n92"]
274 [shape="circle" label="N274\n91"]
275 [shape="circle" label="N275\n90"]
276 [shape="circle" label="N276\n89"]
277 [shape="circle" label="N277\n88"]
278 [shape="circle" label="N278\n87"]
279 [shape="circle" label="N279\n86"]
280 [shape="circle" label="N280\n85"]
281 [shape="circle" label="N281\n84"]
282 [shape="circle" label="N282\n83"]
283 [shape="circle" label="N283\n82"]
284 [shape="circle" label="N284\n81"]
285 [shape="circle" label="N285\n80"]
286 [shape="circle" label="N286\n79"]
287 [shape="circle" label="N287\n78"]
288 [shape="circle" label="N288\n77"]
289 [shape="circle" label="N289\n76"]
290 [shape="circle" label="N290\n75"]
291 [shape="circle" label="N291\n74"]
292 [shape="circle" label="N292\n73"]
293 [shape="circle" label="N293\n72"]
294 [shape="circle" label="N294\n71"]
295 [shape="circle" label="N295\n70"]
296 [shape="circle" label="N296\n69"]
297 [shape="circle" label="N297\n68"]
298 [shape="circle" label="N298\n67"]
299 [shape="circle" label="N299\n66"]
300 [shape="circle" label="N300\n65"]
301 [shape="circle" label="N301\n64"]
302 [shape="circle" label="N302\n63"]
303 [shape="circle" label="N303\n62"]
304 [shape="circle" label="N304\n61"]
305 [shape="circle" label="N305\n60"]
306 [shape="circle" label="N306\n59"]
307 [shape="circle" label="N307\n58"]
308 [shape="circle" label="N308\n57"]
309 [shape="circle" label="N309\n56"]
310 [shape="circle" label="N310\n55"]
311 [shape="circle" label="N311\n54"]
312 [shape="circle" label="N312\n53"]
313 [shape="circle" label="N313\n52"]
314 [shape="circle" label="N314\n51"]
315 [shape="circle" label="N315\n50"]
316 [shape="circle" label="N316\n49"]
317 [shape="circle" label="N317\n48"]
318 [shape="circle" label="N318\n47"]
319 [shape="circle" label="N319\n46"]
320 [shape="circle" label="N320\n45"]
321 [shape="circle" label="N321\n44"]
322 [shape="circle" label="N322\n43"]
323 [shape="circle" label="N323\n42"]
324 [shape="circle" label="N324\n41"]
325 [shape="circle" label="N325\n40"]
326 [shape="circle" label="N326\n39"]
327 [shape="circle" label="N327\n38"]
328 [shape="circle" label="N328\n37"]
329 [shape="circle" label="N329\n36"]
330 [shape="circle" label="N330\n35"]
331 [shape="circle" label="N331\n34"]
332 [shape="circle" label="N332\n33"]
333 [shape="circle" label="N333\n32"]
334 [shape="circle" label="N334\n31"]
335 [shape="circle" label="N335\n30"]
336 [shape="circle" label="N336\n29"]
337 [shape="circle" label="N337\n28"]
338 [shape="circle" label="N338\n27"]
339 [shape="circle" label="N339\n26"]
340 [shape="circle" label="N340\n25"]
341 [shape="circle" label="N341\n24"]
107 [shape="circle" label="N107\n23"]
108 [shape="circle" label="N108\n22"]
109 [shape="circle" label="N109\n21"]
110 [shape="circle" label="N110\n20"]
111 [shape="circle" label="N111\n19"]
112 [shape="circle" label="N112\n18"]
113 [shape="circle" label="N113\n17"]
114 [shape="circle" label="N114\n16"]
1 [shape="circle" label="N1\n7"]
2 [shape="circle" label="N2\n6"]
3 [shape="circle" label="N3\n5"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
6 [shape="circle" label="N6\n2"]
7 [shape="circle" label="N7\n1"]
0 [shape="circle" label="N0\n0"]
115 [shape="circle" label="N115\n15"]
116 [shape="doublecircle" label="N116\n14"]
117 [shape="circle" label="N117\n13"]
119 [shape="circle" label="N119\n12"]
120 [shape="circle" label="N120\n11"]
9 [shape="circle" label="N9\n88"]
10 [shape="diamond" label="N10\n87"]
12 [shape="circle" label="N12\n86"]
14 [shape="circle" label="N14\n85"]
15 [shape="circle" label="N15\n84"]
11 [shape="circle" label="N11\n80"]
18 [shape="diamond" label="N18\n79"]
22 [shape="diamond" label="N22\n78"]
28 [shape="diamond" label="N28\n77"]
40 [shape="diamond" label="N40\n76"]
52 [shape="diamond" label="N52\n75"]
66 [shape="diamond" label="N66\n74"]
78 [shape="diamond" label="N78\n73"]
90 [shape="circle" label="N90\n72"]
19 [shape="circle" label="N19\n5"]
101 [shape="circle" label="N101\n4"]
102 [shape="circle" label="N102\n3"]
103 [shape="circle" label="N103\n2"]
104 [shape="circle" label="N104\n1"]
8 [shape="circle" label="N8\n0"]
121 [shape="circle" label="N121\n10"]
122 [shape="diamond" label="N122\n9"]
124 [shape="circle" label="N124\n8"]
125 [shape="circle" label="N125\n6"]
126 [shape="circle" label="N126\n5"]
127 [shape="diamond" label="N127\n4"]
129 [shape="circle" label="N129\n3"]
130 [shape="circle" label="N130\n1"]
131 [shape="circle" label="N131\n0"]
128 [shape="circle" label="N128\n2"]
123 [shape="circle" label="N123\n7"]
89 [shape="diamond" label="N89\n71"]
92 [shape="circle" label="N92\n70"]
94 [shape="circle" label="N94\n69"]
95 [shape="circle" label="N95\n68"]
96 [shape="circle" label="N96\n67"]
91 [shape="circle" label="N91\n62"]
93 [shape="circle" label="N93\n66"]
97 [shape="circle" label="N97\n65"]
98 [shape="circle" label="N98\n64"]
99 [shape="circle" label="N99\n63"]
77 [shape="diamond" label="N77\n61"]
80 [shape="circle" label="N80\n60"]
82 [shape="circle" label="N82\n59"]
83 [shape="circle" label="N83\n58"]
84 [shape="circle" label="N84\n57"]
79 [shape="circle" label="N79\n52"]
81 [shape="circle" label="N81\n56"]
85 [shape="circle" label="N85\n55"]
86 [shape="circle" label="N86\n54"]
87 [shape="circle" label="N87\n53"]
65 [shape="diamond" label="N65\n51"]
68 [shape="circle" label="N68\n50"]
70 [shape="circle" label="N70\n49"]
71 [shape="circle" label="N71\n48"]
72 [shape="circle" label="N72\n47"]
67 [shape="circle" label="N67\n42"]
69 [shape="circle" label="N69\n46"]
73 [shape="circle" label="N73\n45"]
74 [shape="circle" label="N74\n44"]
75 [shape="circle" label="N75\n43"]
51 [shape="diamond" label="N51\n41"]
54 [shape="circle" label="N54\n40"]
56 [shape="circle" label="N56\n39"]
57 [shape="circle" label="N57\n38"]
58 [shape="circle" label="N58\n37"]
53 [shape="circle" label="N53\n30"]
55 [shape="circle" label="N55\n36"]
59 [shape="circle" label="N59\n35"]
60 [shape="circle" label="N60\n34"]
61 [shape="circle" label="N61\n33"]
62 [shape="circle" label="N62\n32"]
63 [shape="circle" label="N63\n31"]
39 [shape="diamond" label="N39\n29"]
42 [shape="circle" label="N42\n28"]
44 [shape="circle" label="N44\n27"]
45 [shape="circle" label="N45\n26"]
46 [shape="circle" label="N46\n25"]
41 [shape="circle" label="N41\n20"]
43 [shape="circle" label="N43\n24"]
47 [shape="circle" label="N47\n23"]
48 [shape="circle" label="N48\n22"]
49 [shape="circle" label="N49\n21"]
27 [shape="diamond" label="N27\n19"]
30 [shape="circle" label="N30\n18"]
32 [shape="circle" label="N32\n17"]
33 [shape="circle" label="N33\n16"]
34 [shape="circle" label="N34\n15"]
29 [shape="circle" label="N29\n10"]
31 [shape="circle" label="N31\n14"]
35 [shape="circle" label="N35\n13"]
36 [shape="circle" label="N36\n12"]
37 [shape="circle" label="N37\n11"]
21 [shape="circle" label="N21\n9"]
23 [shape="circle" label="N23\n8"]
24 [shape="circle" label="N24\n7"]
25 [shape="circle" label="N25\n6"]
13 [shape="circle" label="N13\n83"]
16 [shape="circle" label="N16\n82"]
17 [shape="circle" label="N17\n81"]
node [shape="circle"]
subgraph cluster_b06 {
label="b06()"
9 -> 10 [label="Function start dummy edge"]
10 -> 13 [label="[CONT_EQL == 0]"]
10 -> 12 [label="[!(CONT_EQL == 0)]"]
12 -> 14 [label="*ACKOUT = 0;"]
14 -> 15 [label="*ENABLE_COUNT = 0;"]
15 -> 11 [label=""]
11 -> 18 [label="switch (sb.state)"]
18 -> 21 [label="[(sb.state) == s_init]"]
18 -> 22 [label="[!((sb.state) == s_init)]"]
22 -> 27 [label="[(sb.state) == s_wait]"]
22 -> 28 [label="[!((sb.state) == s_wait)]"]
28 -> 39 [label="[(sb.state) == s_intr_1]"]
28 -> 40 [label="[!((sb.state) == s_intr_1)]"]
40 -> 51 [label="[(sb.state) == s_enin]"]
40 -> 52 [label="[!((sb.state) == s_enin)]"]
52 -> 65 [label="[(sb.state) == s_enin_w]"]
52 -> 66 [label="[!((sb.state) == s_enin_w)]"]
66 -> 77 [label="[(sb.state) == s_intr]"]
66 -> 78 [label="[!((sb.state) == s_intr)]"]
78 -> 89 [label="[(sb.state) == s_intr_w]"]
78 -> 90 [label="[!((sb.state) == s_intr_w)]"]
90 -> 19 [label=""]
19 -> 101 [label="*USCITE = sb.USCITE;"]
101 -> 102 [label="*CC_MUX = sb.CC_MUX;"]
102 -> 103 [label="*ENABLE_COUNT = sb.ENABLE_COUNT;"]
103 -> 104 [label="*ACKOUT = sb.ACKOUT;"]
104 -> 8 [label="default return"]
89 -> 93 [label="[EQL == 0]"]
89 -> 92 [label="[!(EQL == 0)]"]
92 -> 94 [label="sb.USCITE = 3;"]
94 -> 95 [label="sb.CC_MUX = cc_intr;"]
95 -> 96 [label="sb.state = s_intr_w;"]
96 -> 91 [label=""]
91 -> 19 [label="break"]
93 -> 97 [label="sb.USCITE = out_norm;"]
97 -> 98 [label="sb.CC_MUX = cc_enin;"]
98 -> 99 [label="sb.state = s_wait;"]
99 -> 91 [label=""]
77 -> 81 [label="[EQL == 0]"]
77 -> 80 [label="[!(EQL == 0)]"]
80 -> 82 [label="sb.USCITE = 0;"]
82 -> 83 [label="sb.CC_MUX = cc_ackin;"]
83 -> 84 [label="sb.state = s_intr;"]
84 -> 79 [label=""]
79 -> 19 [label="break"]
81 -> 85 [label="sb.USCITE = 3;"]
85 -> 86 [label="sb.CC_MUX = cc_intr;"]
86 -> 87 [label="sb.state = s_intr_w;"]
87 -> 79 [label=""]
65 -> 69 [label="[EQL == 0]"]
65 -> 68 [label="[!(EQL == 0)]"]
68 -> 70 [label="sb.USCITE = 1;"]
70 -> 71 [label="sb.CC_MUX = cc_enin;"]
71 -> 72 [label="sb.state = s_enin_w;"]
72 -> 67 [label=""]
67 -> 19 [label="break"]
69 -> 73 [label="sb.USCITE = out_norm;"]
73 -> 74 [label="sb.CC_MUX = cc_enin;"]
74 -> 75 [label="sb.state = s_wait;"]
75 -> 67 [label=""]
51 -> 55 [label="[EQL == 0]"]
51 -> 54 [label="[!(EQL == 0)]"]
54 -> 56 [label="sb.USCITE = 0;"]
56 -> 57 [label="sb.CC_MUX = cc_ackin;"]
57 -> 58 [label="sb.state = s_enin;"]
58 -> 53 [label=""]
53 -> 19 [label="break"]
55 -> 59 [label="sb.USCITE = 1;"]
59 -> 60 [label="sb.ACKOUT = 1;"]
60 -> 61 [label="sb.ENABLE_COUNT = 1;"]
61 -> 62 [label="sb.CC_MUX = cc_enin;"]
62 -> 63 [label="sb.state = s_enin_w;"]
63 -> 53 [label=""]
39 -> 43 [label="[EQL == 0]"]
39 -> 42 [label="[!(EQL == 0)]"]
42 -> 44 [label="sb.USCITE = 0;"]
44 -> 45 [label="sb.CC_MUX = cc_ackin;"]
45 -> 46 [label="sb.state = s_intr;"]
46 -> 41 [label=""]
41 -> 19 [label="break"]
43 -> 47 [label="sb.USCITE = out_norm;"]
47 -> 48 [label="sb.CC_MUX = cc_enin;"]
48 -> 49 [label="sb.state = s_wait;"]
49 -> 41 [label=""]
27 -> 31 [label="[EQL == 0]"]
27 -> 30 [label="[!(EQL == 0)]"]
30 -> 32 [label="sb.USCITE = 0;"]
32 -> 33 [label="sb.CC_MUX = cc_ackin;"]
33 -> 34 [label="sb.state = s_enin;"]
34 -> 29 [label=""]
29 -> 19 [label="break"]
31 -> 35 [label="sb.USCITE = out_norm;"]
35 -> 36 [label="sb.CC_MUX = cc_intr;"]
36 -> 37 [label="sb.state = s_intr_1;"]
37 -> 29 [label=""]
21 -> 23 [label="sb.CC_MUX = cc_enin;"]
23 -> 24 [label="sb.USCITE = out_norm;"]
24 -> 25 [label="sb.state = s_wait;"]
25 -> 19 [label="break"]
13 -> 16 [label="*ACKOUT = 1;"]
16 -> 17 [label="*ENABLE_COUNT = 1;"]
17 -> 11 [label=""]}
subgraph cluster_initial {
label="initial()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="sb.state = s_init;"]
3 -> 4 [label="sb.CC_MUX = 0;"]
4 -> 5 [label="sb.ENABLE_COUNT = 0;"]
5 -> 6 [label="sb.ACKOUT = 0;"]
6 -> 7 [label="sb.USCITE = 0;"]
7 -> 0 [label="default return"]}
subgraph cluster_main {
label="main()"
106 -> 132 [label="INIT GLOBAL VARS"]
132 -> 133 [label="typedef unsigned long int size_t;"]
133 -> 134 [label="typedef unsigned char __u_char;"]
134 -> 135 [label="typedef unsigned short int __u_short;"]
135 -> 136 [label="typedef unsigned int __u_int;"]
136 -> 137 [label="typedef unsigned long int __u_long;"]
137 -> 138 [label="typedef signed char __int8_t;"]
138 -> 139 [label="typedef unsigned char __uint8_t;"]
139 -> 140 [label="typedef signed short int __int16_t;"]
140 -> 141 [label="typedef unsigned short int __uint16_t;"]
141 -> 142 [label="typedef signed int __int32_t;"]
142 -> 143 [label="typedef unsigned int __uint32_t;"]
143 -> 144 [label="typedef signed long int __int64_t;"]
144 -> 145 [label="typedef unsigned long int __uint64_t;"]
145 -> 146 [label="typedef long int __quad_t;"]
146 -> 147 [label="typedef unsigned long int __u_quad_t;"]
147 -> 148 [label="typedef unsigned long int __dev_t;"]
148 -> 149 [label="typedef unsigned int __uid_t;"]
149 -> 150 [label="typedef unsigned int __gid_t;"]
150 -> 151 [label="typedef unsigned long int __ino_t;"]
151 -> 152 [label="typedef unsigned long int __ino64_t;"]
152 -> 153 [label="typedef unsigned int __mode_t;"]
153 -> 154 [label="typedef unsigned long int __nlink_t;"]
154 -> 155 [label="typedef long int __off_t;"]
155 -> 156 [label="typedef long int __off64_t;"]
156 -> 157 [label="typedef int __pid_t;"]
157 -> 158 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
158 -> 159 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
159 -> 160 [label="typedef long int __clock_t;"]
160 -> 161 [label="typedef unsigned long int __rlim_t;"]
161 -> 162 [label="typedef unsigned long int __rlim64_t;"]
162 -> 163 [label="typedef unsigned int __id_t;"]
163 -> 164 [label="typedef long int __time_t;"]
164 -> 165 [label="typedef unsigned int __useconds_t;"]
165 -> 166 [label="typedef long int __suseconds_t;"]
166 -> 167 [label="typedef int __daddr_t;"]
167 -> 168 [label="typedef int __key_t;"]
168 -> 169 [label="typedef int __clockid_t;"]
169 -> 170 [label="typedef void *__timer_t;"]
170 -> 171 [label="typedef long int __blksize_t;"]
171 -> 172 [label="typedef long int __blkcnt_t;"]
172 -> 173 [label="typedef long int __blkcnt64_t;"]
173 -> 174 [label="typedef unsigned long int __fsblkcnt_t;"]
174 -> 175 [label="typedef unsigned long int __fsblkcnt64_t;"]
175 -> 176 [label="typedef unsigned long int __fsfilcnt_t;"]
176 -> 177 [label="typedef unsigned long int __fsfilcnt64_t;"]
177 -> 178 [label="typedef long int __fsword_t;"]
178 -> 179 [label="typedef long int __ssize_t;"]
179 -> 180 [label="typedef long int __syscall_slong_t;"]
180 -> 181 [label="typedef unsigned long int __syscall_ulong_t;"]
181 -> 182 [label="typedef __off64_t __loff_t;"]
182 -> 183 [label="typedef __quad_t *__qaddr_t;"]
183 -> 184 [label="typedef char *__caddr_t;"]
184 -> 185 [label="typedef long int __intptr_t;"]
185 -> 186 [label="typedef unsigned int __socklen_t;"]
186 -> 187 [label="struct _IO_FILE ;"]
187 -> 188 [label="typedef struct _IO_FILE FILE;"]
188 -> 189 [label="typedef struct _IO_FILE __FILE;"]
189 -> 190 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
190 -> 191 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
191 -> 192 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
192 -> 193 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
193 -> 194 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
194 -> 195 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
195 -> 196 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
196 -> 197 [label="typedef __builtin_va_list __gnuc_va_list;"]
197 -> 198 [label="struct _IO_jump_t ;"]
198 -> 199 [label="typedef void _IO_lock_t;"]
199 -> 200 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
200 -> 201 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
201 -> 202 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
202 -> 203 [label="typedef struct _IO_FILE _IO_FILE;"]
203 -> 204 [label="struct _IO_FILE_plus ;"]
204 -> 205 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
205 -> 206 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
206 -> 207 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
207 -> 208 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
208 -> 209 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
209 -> 210 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
210 -> 211 [label="typedef int __io_close_fn(void *__cookie);"]
211 -> 212 [label="int __underflow(_IO_FILE *);"]
212 -> 213 [label="int __uflow(_IO_FILE *);"]
213 -> 214 [label="int __overflow(_IO_FILE *, int);"]
214 -> 215 [label="int _IO_getc(_IO_FILE *__fp);"]
215 -> 216 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
216 -> 217 [label="int _IO_feof(_IO_FILE *__fp);"]
217 -> 218 [label="int _IO_ferror(_IO_FILE *__fp);"]
218 -> 219 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
219 -> 220 [label="void _IO_flockfile(_IO_FILE *);"]
220 -> 221 [label="void _IO_funlockfile(_IO_FILE *);"]
221 -> 222 [label="int _IO_ftrylockfile(_IO_FILE *);"]
222 -> 223 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
223 -> 224 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
224 -> 225 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
225 -> 226 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
226 -> 227 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
227 -> 228 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
228 -> 229 [label="void _IO_free_backup_area(_IO_FILE *);"]
229 -> 230 [label="typedef __gnuc_va_list va_list;"]
230 -> 231 [label="typedef __off_t off_t;"]
231 -> 232 [label="typedef __ssize_t ssize_t;"]
232 -> 233 [label="typedef _G_fpos_t fpos_t;"]
233 -> 234 [label="extern struct _IO_FILE *stdin;"]
234 -> 235 [label="extern struct _IO_FILE *stdout;"]
235 -> 236 [label="extern struct _IO_FILE *stderr;"]
236 -> 237 [label="int remove(const char *__filename);"]
237 -> 238 [label="int rename(const char *__old, const char *__new);"]
238 -> 239 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
239 -> 240 [label="FILE * tmpfile();"]
240 -> 241 [label="char * tmpnam(char *__s);"]
241 -> 242 [label="char * tmpnam_r(char *__s);"]
242 -> 243 [label="char * tempnam(const char *__dir, const char *__pfx);"]
243 -> 244 [label="int fclose(FILE *__stream);"]
244 -> 245 [label="int fflush(FILE *__stream);"]
245 -> 246 [label="int fflush_unlocked(FILE *__stream);"]
246 -> 247 [label="FILE * fopen(const char *__filename, const char *__modes);"]
247 -> 248 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
248 -> 249 [label="FILE * fdopen(int __fd, const char *__modes);"]
249 -> 250 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
250 -> 251 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
251 -> 252 [label="void setbuf(FILE *__stream, char *__buf);"]
252 -> 253 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
253 -> 254 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
254 -> 255 [label="void setlinebuf(FILE *__stream);"]
255 -> 256 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
256 -> 257 [label="int printf(const char *__format, ...);"]
257 -> 258 [label="int sprintf(char *__s, const char *__format, ...);"]
258 -> 259 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
259 -> 260 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
260 -> 261 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
261 -> 262 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
262 -> 263 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
263 -> 264 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
264 -> 265 [label="int dprintf(int __fd, const char *__fmt, ...);"]
265 -> 266 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
266 -> 267 [label="int scanf(const char *__format, ...);"]
267 -> 268 [label="int sscanf(const char *__s, const char *__format, ...);"]
268 -> 269 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
269 -> 270 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
270 -> 271 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
271 -> 272 [label="int fgetc(FILE *__stream);"]
272 -> 273 [label="int getc(FILE *__stream);"]
273 -> 274 [label="int getchar();"]
274 -> 275 [label="int getc_unlocked(FILE *__stream);"]
275 -> 276 [label="int getchar_unlocked();"]
276 -> 277 [label="int fgetc_unlocked(FILE *__stream);"]
277 -> 278 [label="int fputc(int __c, FILE *__stream);"]
278 -> 279 [label="int putc(int __c, FILE *__stream);"]
279 -> 280 [label="int putchar(int __c);"]
280 -> 281 [label="int fputc_unlocked(int __c, FILE *__stream);"]
281 -> 282 [label="int putc_unlocked(int __c, FILE *__stream);"]
282 -> 283 [label="int putchar_unlocked(int __c);"]
283 -> 284 [label="int getw(FILE *__stream);"]
284 -> 285 [label="int putw(int __w, FILE *__stream);"]
285 -> 286 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
286 -> 287 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
287 -> 288 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
288 -> 289 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
289 -> 290 [label="int fputs(const char *__s, FILE *__stream);"]
290 -> 291 [label="int puts(const char *__s);"]
291 -> 292 [label="int ungetc(int __c, FILE *__stream);"]
292 -> 293 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
293 -> 294 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
294 -> 295 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
295 -> 296 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
296 -> 297 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
297 -> 298 [label="long int ftell(FILE *__stream);"]
298 -> 299 [label="void rewind(FILE *__stream);"]
299 -> 300 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
300 -> 301 [label="__off_t  ftello(FILE *__stream);"]
301 -> 302 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
302 -> 303 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
303 -> 304 [label="void clearerr(FILE *__stream);"]
304 -> 305 [label="int feof(FILE *__stream);"]
305 -> 306 [label="int ferror(FILE *__stream);"]
306 -> 307 [label="void clearerr_unlocked(FILE *__stream);"]
307 -> 308 [label="int feof_unlocked(FILE *__stream);"]
308 -> 309 [label="int ferror_unlocked(FILE *__stream);"]
309 -> 310 [label="void perror(const char *__s);"]
310 -> 311 [label="extern int sys_nerr;"]
311 -> 312 [label="extern const const char *sys_errlist[];"]
312 -> 313 [label="int fileno(FILE *__stream);"]
313 -> 314 [label="int fileno_unlocked(FILE *__stream);"]
314 -> 315 [label="FILE * popen(const char *__command, const char *__modes);"]
315 -> 316 [label="int pclose(FILE *__stream);"]
316 -> 317 [label="char * ctermid(char *__s);"]
317 -> 318 [label="void flockfile(FILE *__stream);"]
318 -> 319 [label="int ftrylockfile(FILE *__stream);"]
319 -> 320 [label="void funlockfile(FILE *__stream);"]
320 -> 321 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
321 -> 322 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
322 -> 323 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
323 -> 324 [label="_Bool nondet_bool();"]
324 -> 325 [label="struct state_elements_b06 {   unsigned char CC_MUX;   unsigned char USCITE;   _Bool ENABLE_COUNT;   _Bool ACKOUT;   _Bool state; } ;"]
325 -> 326 [label="struct state_elements_b06 sb = {  };"]
326 -> 327 [label="int cc_nop = 1;"]
327 -> 328 [label="int cc_enin = 1;"]
328 -> 329 [label="int cc_intr = 2;"]
329 -> 330 [label="int cc_ackin = 3;"]
330 -> 331 [label="int out_norm = 1;"]
331 -> 332 [label="int s_init = 0;"]
332 -> 333 [label="int s_wait = 1;"]
333 -> 334 [label="int s_enin = 2;"]
334 -> 335 [label="int s_enin_w = 3;"]
335 -> 336 [label="int s_intr = 4;"]
336 -> 337 [label="int s_intr_1 = 5;"]
337 -> 338 [label="int s_intr_w = 6;"]
338 -> 339 [label="void initial();"]
339 -> 340 [label="void b06(unsigned char *CC_MUX, _Bool EQL, unsigned char *USCITE, _Bool clock, _Bool *ENABLE_COUNT, _Bool *ACKOUT, _Bool CONT_EQL);"]
340 -> 341 [label="void main();"]
341 -> 107 [label="Function start dummy edge"]
107 -> 108 [label="unsigned char CC_MUX;"]
108 -> 109 [label="_Bool EQL;"]
109 -> 110 [label="unsigned char USCITE;"]
110 -> 111 [label="_Bool clock;"]
111 -> 112 [label="_Bool ENABLE_COUNT;"]
112 -> 113 [label="_Bool ACKOUT;"]
113 -> 114 [label="_Bool CONT_EQL;"]
114 -> 115 [label="initial();" style="dotted" arrowhead="empty"]
115 -> 116 [label="while"]
116 -> 117 [label=""]
117 -> 119 [label="EQL = nondet_bool();"]
119 -> 120 [label="CONT_EQL = nondet_bool();"]
120 -> 121 [label="b06(&CC_MUX, EQL, &USCITE, clock, &ENABLE_COUNT, &ACKOUT, CONT_EQL);" style="dotted" arrowhead="empty"]
121 -> 122 [label="void __CPAchecker_TMP_0;"]
122 -> 123 [label="[ENABLE_COUNT == ACKOUT]"]
122 -> 124 [label="[!(ENABLE_COUNT == ACKOUT)]"]
124 -> 125 [label="__assert_fail(\"ENABLE_COUNT==ACKOUT\", \"main.c\", 158, \"__PRETTY_FUNCTION__\");"]
125 -> 126 [label="0;"]
126 -> 127 [label="void __CPAchecker_TMP_1;"]
127 -> 128 [label="[(USCITE & 3) != 2]"]
127 -> 129 [label="[!((USCITE & 3) != 2)]"]
129 -> 130 [label="__assert_fail(\"(USCITE&0x3)!=2\", \"main.c\", 159, \"__PRETTY_FUNCTION__\");"]
130 -> 131 [label="0;"]
131 -> 116 [label=""]
128 -> 130 [label="0;"]
123 -> 125 [label="0;"]}
114 -> 1 [label="initial()"]
0 -> 115 [label="Return edge from initial to main"]
120 -> 9 [label="b06(&CC_MUX, EQL, &USCITE, clock, &ENABLE_COUNT, &ACKOUT, CONT_EQL)"]
8 -> 121 [label="Return edge from b06 to main"]}