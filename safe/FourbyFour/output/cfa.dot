digraph CFA {
222 [shape="circle" label="N222\n205"]
232 [shape="circle" label="N232\n204"]
233 [shape="circle" label="N233\n203"]
234 [shape="circle" label="N234\n202"]
235 [shape="circle" label="N235\n201"]
236 [shape="circle" label="N236\n200"]
237 [shape="circle" label="N237\n199"]
238 [shape="circle" label="N238\n198"]
239 [shape="circle" label="N239\n197"]
240 [shape="circle" label="N240\n196"]
241 [shape="circle" label="N241\n195"]
242 [shape="circle" label="N242\n194"]
243 [shape="circle" label="N243\n193"]
244 [shape="circle" label="N244\n192"]
245 [shape="circle" label="N245\n191"]
246 [shape="circle" label="N246\n190"]
247 [shape="circle" label="N247\n189"]
248 [shape="circle" label="N248\n188"]
249 [shape="circle" label="N249\n187"]
250 [shape="circle" label="N250\n186"]
251 [shape="circle" label="N251\n185"]
252 [shape="circle" label="N252\n184"]
253 [shape="circle" label="N253\n183"]
254 [shape="circle" label="N254\n182"]
255 [shape="circle" label="N255\n181"]
256 [shape="circle" label="N256\n180"]
257 [shape="circle" label="N257\n179"]
258 [shape="circle" label="N258\n178"]
259 [shape="circle" label="N259\n177"]
260 [shape="circle" label="N260\n176"]
261 [shape="circle" label="N261\n175"]
262 [shape="circle" label="N262\n174"]
263 [shape="circle" label="N263\n173"]
264 [shape="circle" label="N264\n172"]
265 [shape="circle" label="N265\n171"]
266 [shape="circle" label="N266\n170"]
267 [shape="circle" label="N267\n169"]
268 [shape="circle" label="N268\n168"]
269 [shape="circle" label="N269\n167"]
270 [shape="circle" label="N270\n166"]
271 [shape="circle" label="N271\n165"]
272 [shape="circle" label="N272\n164"]
273 [shape="circle" label="N273\n163"]
274 [shape="circle" label="N274\n162"]
275 [shape="circle" label="N275\n161"]
276 [shape="circle" label="N276\n160"]
277 [shape="circle" label="N277\n159"]
278 [shape="circle" label="N278\n158"]
279 [shape="circle" label="N279\n157"]
280 [shape="circle" label="N280\n156"]
281 [shape="circle" label="N281\n155"]
282 [shape="circle" label="N282\n154"]
283 [shape="circle" label="N283\n153"]
284 [shape="circle" label="N284\n152"]
285 [shape="circle" label="N285\n151"]
286 [shape="circle" label="N286\n150"]
287 [shape="circle" label="N287\n149"]
288 [shape="circle" label="N288\n148"]
289 [shape="circle" label="N289\n147"]
290 [shape="circle" label="N290\n146"]
291 [shape="circle" label="N291\n145"]
292 [shape="circle" label="N292\n144"]
293 [shape="circle" label="N293\n143"]
294 [shape="circle" label="N294\n142"]
295 [shape="circle" label="N295\n141"]
296 [shape="circle" label="N296\n140"]
297 [shape="circle" label="N297\n139"]
298 [shape="circle" label="N298\n138"]
299 [shape="circle" label="N299\n137"]
300 [shape="circle" label="N300\n136"]
301 [shape="circle" label="N301\n135"]
302 [shape="circle" label="N302\n134"]
303 [shape="circle" label="N303\n133"]
304 [shape="circle" label="N304\n132"]
305 [shape="circle" label="N305\n131"]
306 [shape="circle" label="N306\n130"]
307 [shape="circle" label="N307\n129"]
308 [shape="circle" label="N308\n128"]
309 [shape="circle" label="N309\n127"]
310 [shape="circle" label="N310\n126"]
311 [shape="circle" label="N311\n125"]
312 [shape="circle" label="N312\n124"]
313 [shape="circle" label="N313\n123"]
314 [shape="circle" label="N314\n122"]
315 [shape="circle" label="N315\n121"]
316 [shape="circle" label="N316\n120"]
317 [shape="circle" label="N317\n119"]
318 [shape="circle" label="N318\n118"]
319 [shape="circle" label="N319\n117"]
320 [shape="circle" label="N320\n116"]
321 [shape="circle" label="N321\n115"]
322 [shape="circle" label="N322\n114"]
323 [shape="circle" label="N323\n113"]
324 [shape="circle" label="N324\n112"]
325 [shape="circle" label="N325\n111"]
326 [shape="circle" label="N326\n110"]
327 [shape="circle" label="N327\n109"]
328 [shape="circle" label="N328\n108"]
329 [shape="circle" label="N329\n107"]
330 [shape="circle" label="N330\n106"]
331 [shape="circle" label="N331\n105"]
332 [shape="circle" label="N332\n104"]
333 [shape="circle" label="N333\n103"]
334 [shape="circle" label="N334\n102"]
335 [shape="circle" label="N335\n101"]
336 [shape="circle" label="N336\n100"]
337 [shape="circle" label="N337\n99"]
338 [shape="circle" label="N338\n98"]
339 [shape="circle" label="N339\n97"]
340 [shape="circle" label="N340\n96"]
341 [shape="circle" label="N341\n95"]
342 [shape="circle" label="N342\n94"]
343 [shape="circle" label="N343\n93"]
344 [shape="circle" label="N344\n92"]
345 [shape="circle" label="N345\n91"]
346 [shape="circle" label="N346\n90"]
347 [shape="circle" label="N347\n89"]
348 [shape="circle" label="N348\n88"]
349 [shape="circle" label="N349\n87"]
350 [shape="circle" label="N350\n86"]
351 [shape="circle" label="N351\n85"]
352 [shape="circle" label="N352\n84"]
353 [shape="circle" label="N353\n83"]
354 [shape="circle" label="N354\n82"]
355 [shape="circle" label="N355\n81"]
356 [shape="circle" label="N356\n80"]
357 [shape="circle" label="N357\n79"]
358 [shape="circle" label="N358\n78"]
359 [shape="circle" label="N359\n77"]
360 [shape="circle" label="N360\n76"]
361 [shape="circle" label="N361\n75"]
362 [shape="circle" label="N362\n74"]
363 [shape="circle" label="N363\n73"]
364 [shape="circle" label="N364\n72"]
365 [shape="circle" label="N365\n71"]
366 [shape="circle" label="N366\n70"]
367 [shape="circle" label="N367\n69"]
368 [shape="circle" label="N368\n68"]
369 [shape="circle" label="N369\n67"]
370 [shape="circle" label="N370\n66"]
371 [shape="circle" label="N371\n65"]
372 [shape="circle" label="N372\n64"]
373 [shape="circle" label="N373\n63"]
374 [shape="circle" label="N374\n62"]
375 [shape="circle" label="N375\n61"]
376 [shape="circle" label="N376\n60"]
377 [shape="circle" label="N377\n59"]
378 [shape="circle" label="N378\n58"]
379 [shape="circle" label="N379\n57"]
380 [shape="circle" label="N380\n56"]
381 [shape="circle" label="N381\n55"]
382 [shape="circle" label="N382\n54"]
383 [shape="circle" label="N383\n53"]
384 [shape="circle" label="N384\n52"]
385 [shape="circle" label="N385\n51"]
386 [shape="circle" label="N386\n50"]
387 [shape="circle" label="N387\n49"]
388 [shape="circle" label="N388\n48"]
389 [shape="circle" label="N389\n47"]
390 [shape="circle" label="N390\n46"]
391 [shape="circle" label="N391\n45"]
392 [shape="circle" label="N392\n44"]
393 [shape="circle" label="N393\n43"]
394 [shape="circle" label="N394\n42"]
395 [shape="circle" label="N395\n41"]
396 [shape="circle" label="N396\n40"]
397 [shape="circle" label="N397\n39"]
398 [shape="circle" label="N398\n38"]
399 [shape="circle" label="N399\n37"]
400 [shape="circle" label="N400\n36"]
401 [shape="circle" label="N401\n35"]
402 [shape="circle" label="N402\n34"]
403 [shape="circle" label="N403\n33"]
404 [shape="circle" label="N404\n32"]
405 [shape="circle" label="N405\n31"]
406 [shape="circle" label="N406\n30"]
407 [shape="circle" label="N407\n29"]
408 [shape="circle" label="N408\n28"]
409 [shape="circle" label="N409\n27"]
410 [shape="circle" label="N410\n26"]
411 [shape="circle" label="N411\n25"]
412 [shape="circle" label="N412\n24"]
413 [shape="circle" label="N413\n23"]
414 [shape="circle" label="N414\n22"]
415 [shape="circle" label="N415\n21"]
416 [shape="circle" label="N416\n20"]
417 [shape="circle" label="N417\n19"]
418 [shape="circle" label="N418\n18"]
419 [shape="circle" label="N419\n17"]
420 [shape="circle" label="N420\n16"]
421 [shape="circle" label="N421\n15"]
422 [shape="circle" label="N422\n14"]
423 [shape="circle" label="N423\n13"]
424 [shape="circle" label="N424\n12"]
425 [shape="circle" label="N425\n11"]
426 [shape="circle" label="N426\n10"]
427 [shape="circle" label="N427\n9"]
428 [shape="circle" label="N428\n8"]
223 [shape="circle" label="N223\n7"]
224 [shape="circle" label="N224\n6"]
225 [shape="circle" label="N225\n5"]
226 [shape="circle" label="N226\n4"]
1 [shape="circle" label="N1\n4"]
2 [shape="circle" label="N2\n3"]
3 [shape="circle" label="N3\n2"]
4 [shape="circle" label="N4\n1"]
0 [shape="circle" label="N0\n0"]
227 [shape="circle" label="N227\n3"]
228 [shape="doublecircle" label="N228\n2"]
229 [shape="circle" label="N229\n1"]
6 [shape="circle" label="N6\n215"]
7 [shape="circle" label="N7\n214"]
8 [shape="circle" label="N8\n213"]
9 [shape="circle" label="N9\n212"]
10 [shape="circle" label="N10\n211"]
11 [shape="circle" label="N11\n210"]
12 [shape="circle" label="N12\n209"]
13 [shape="circle" label="N13\n208"]
14 [shape="diamond" label="N14\n207"]
17 [shape="circle" label="N17\n194"]
28 [shape="circle" label="N28\n193"]
29 [shape="circle" label="N29\n192"]
30 [shape="circle" label="N30\n191"]
31 [shape="diamond" label="N31\n190"]
34 [shape="circle" label="N34\n162"]
61 [shape="circle" label="N61\n160"]
62 [shape="circle" label="N62\n159"]
63 [shape="circle" label="N63\n158"]
64 [shape="circle" label="N64\n157"]
65 [shape="circle" label="N65\n156"]
66 [shape="circle" label="N66\n155"]
67 [shape="circle" label="N67\n154"]
68 [shape="circle" label="N68\n153"]
69 [shape="circle" label="N69\n152"]
70 [shape="circle" label="N70\n151"]
71 [shape="circle" label="N71\n150"]
72 [shape="circle" label="N72\n149"]
73 [shape="circle" label="N73\n148"]
74 [shape="circle" label="N74\n147"]
75 [shape="circle" label="N75\n146"]
76 [shape="circle" label="N76\n145"]
77 [shape="circle" label="N77\n144"]
78 [shape="circle" label="N78\n143"]
79 [shape="circle" label="N79\n142"]
80 [shape="circle" label="N80\n141"]
81 [shape="circle" label="N81\n140"]
82 [shape="circle" label="N82\n139"]
83 [shape="circle" label="N83\n138"]
84 [shape="circle" label="N84\n137"]
85 [shape="circle" label="N85\n136"]
86 [shape="circle" label="N86\n135"]
87 [shape="circle" label="N87\n134"]
88 [shape="circle" label="N88\n133"]
89 [shape="circle" label="N89\n132"]
90 [shape="circle" label="N90\n131"]
91 [shape="diamond" label="N91\n130"]
96 [shape="diamond" label="N96\n129"]
95 [shape="diamond" label="N95\n128"]
92 [shape="diamond" label="N92\n127"]
94 [shape="circle" label="N94\n126"]
97 [shape="diamond" label="N97\n124"]
100 [shape="circle" label="N100\n122"]
101 [shape="diamond" label="N101\n120"]
104 [shape="circle" label="N104\n118"]
105 [shape="diamond" label="N105\n116"]
108 [shape="circle" label="N108\n114"]
109 [shape="diamond" label="N109\n112"]
112 [shape="circle" label="N112\n110"]
113 [shape="diamond" label="N113\n108"]
116 [shape="circle" label="N116\n106"]
117 [shape="diamond" label="N117\n104"]
120 [shape="circle" label="N120\n102"]
121 [shape="diamond" label="N121\n100"]
124 [shape="circle" label="N124\n98"]
125 [shape="diamond" label="N125\n96"]
128 [shape="circle" label="N128\n94"]
129 [shape="diamond" label="N129\n92"]
132 [shape="circle" label="N132\n90"]
133 [shape="diamond" label="N133\n88"]
136 [shape="circle" label="N136\n86"]
137 [shape="diamond" label="N137\n84"]
140 [shape="circle" label="N140\n82"]
141 [shape="diamond" label="N141\n80"]
144 [shape="circle" label="N144\n78"]
145 [shape="diamond" label="N145\n76"]
148 [shape="circle" label="N148\n74"]
149 [shape="diamond" label="N149\n72"]
152 [shape="circle" label="N152\n70"]
153 [shape="diamond" label="N153\n68"]
156 [shape="circle" label="N156\n66"]
157 [shape="diamond" label="N157\n64"]
160 [shape="circle" label="N160\n62"]
161 [shape="diamond" label="N161\n60"]
164 [shape="circle" label="N164\n58"]
165 [shape="diamond" label="N165\n56"]
168 [shape="circle" label="N168\n54"]
169 [shape="diamond" label="N169\n52"]
172 [shape="circle" label="N172\n50"]
173 [shape="diamond" label="N173\n48"]
176 [shape="circle" label="N176\n46"]
177 [shape="diamond" label="N177\n44"]
180 [shape="circle" label="N180\n42"]
181 [shape="diamond" label="N181\n40"]
184 [shape="circle" label="N184\n38"]
185 [shape="diamond" label="N185\n36"]
188 [shape="circle" label="N188\n34"]
189 [shape="diamond" label="N189\n32"]
192 [shape="circle" label="N192\n30"]
193 [shape="diamond" label="N193\n28"]
196 [shape="circle" label="N196\n26"]
197 [shape="diamond" label="N197\n24"]
200 [shape="circle" label="N200\n22"]
201 [shape="diamond" label="N201\n20"]
204 [shape="circle" label="N204\n18"]
205 [shape="diamond" label="N205\n16"]
208 [shape="circle" label="N208\n14"]
209 [shape="circle" label="N209\n12"]
210 [shape="diamond" label="N210\n11"]
212 [shape="circle" label="N212\n10"]
213 [shape="circle" label="N213\n9"]
214 [shape="circle" label="N214\n8"]
211 [shape="circle" label="N211\n7"]
215 [shape="diamond" label="N215\n6"]
218 [shape="diamond" label="N218\n5"]
217 [shape="circle" label="N217\n4"]
219 [shape="circle" label="N219\n2"]
220 [shape="circle" label="N220\n1"]
5 [shape="circle" label="N5\n0"]
231 [shape="circle" label="N231\n0"]
216 [shape="circle" label="N216\n3"]
206 [shape="diamond" label="N206\n15"]
207 [shape="circle" label="N207\n13"]
202 [shape="diamond" label="N202\n19"]
203 [shape="circle" label="N203\n17"]
198 [shape="diamond" label="N198\n23"]
199 [shape="circle" label="N199\n21"]
194 [shape="diamond" label="N194\n27"]
195 [shape="circle" label="N195\n25"]
190 [shape="diamond" label="N190\n31"]
191 [shape="circle" label="N191\n29"]
186 [shape="diamond" label="N186\n35"]
187 [shape="circle" label="N187\n33"]
182 [shape="diamond" label="N182\n39"]
183 [shape="circle" label="N183\n37"]
178 [shape="diamond" label="N178\n43"]
179 [shape="circle" label="N179\n41"]
174 [shape="diamond" label="N174\n47"]
175 [shape="circle" label="N175\n45"]
170 [shape="diamond" label="N170\n51"]
171 [shape="circle" label="N171\n49"]
166 [shape="diamond" label="N166\n55"]
167 [shape="circle" label="N167\n53"]
162 [shape="diamond" label="N162\n59"]
163 [shape="circle" label="N163\n57"]
158 [shape="diamond" label="N158\n63"]
159 [shape="circle" label="N159\n61"]
154 [shape="diamond" label="N154\n67"]
155 [shape="circle" label="N155\n65"]
150 [shape="diamond" label="N150\n71"]
151 [shape="circle" label="N151\n69"]
146 [shape="diamond" label="N146\n75"]
147 [shape="circle" label="N147\n73"]
142 [shape="diamond" label="N142\n79"]
143 [shape="circle" label="N143\n77"]
138 [shape="diamond" label="N138\n83"]
139 [shape="circle" label="N139\n81"]
134 [shape="diamond" label="N134\n87"]
135 [shape="circle" label="N135\n85"]
130 [shape="diamond" label="N130\n91"]
131 [shape="circle" label="N131\n89"]
126 [shape="diamond" label="N126\n95"]
127 [shape="circle" label="N127\n93"]
122 [shape="diamond" label="N122\n99"]
123 [shape="circle" label="N123\n97"]
118 [shape="diamond" label="N118\n103"]
119 [shape="circle" label="N119\n101"]
114 [shape="diamond" label="N114\n107"]
115 [shape="circle" label="N115\n105"]
110 [shape="diamond" label="N110\n111"]
111 [shape="circle" label="N111\n109"]
106 [shape="diamond" label="N106\n115"]
107 [shape="circle" label="N107\n113"]
102 [shape="diamond" label="N102\n119"]
103 [shape="circle" label="N103\n117"]
98 [shape="diamond" label="N98\n123"]
99 [shape="circle" label="N99\n121"]
93 [shape="circle" label="N93\n125"]
60 [shape="diamond" label="N60\n189"]
59 [shape="diamond" label="N59\n188"]
58 [shape="diamond" label="N58\n187"]
57 [shape="diamond" label="N57\n186"]
56 [shape="diamond" label="N56\n185"]
55 [shape="diamond" label="N55\n184"]
54 [shape="diamond" label="N54\n183"]
53 [shape="diamond" label="N53\n182"]
52 [shape="diamond" label="N52\n181"]
51 [shape="diamond" label="N51\n180"]
50 [shape="diamond" label="N50\n179"]
49 [shape="diamond" label="N49\n178"]
48 [shape="diamond" label="N48\n177"]
47 [shape="diamond" label="N47\n176"]
46 [shape="diamond" label="N46\n175"]
45 [shape="diamond" label="N45\n174"]
44 [shape="diamond" label="N44\n173"]
43 [shape="diamond" label="N43\n172"]
42 [shape="diamond" label="N42\n171"]
41 [shape="diamond" label="N41\n170"]
40 [shape="diamond" label="N40\n169"]
39 [shape="diamond" label="N39\n168"]
38 [shape="diamond" label="N38\n167"]
37 [shape="diamond" label="N37\n166"]
36 [shape="diamond" label="N36\n165"]
35 [shape="diamond" label="N35\n164"]
32 [shape="diamond" label="N32\n163"]
33 [shape="circle" label="N33\n161"]
15 [shape="diamond" label="N15\n206"]
19 [shape="diamond" label="N19\n205"]
18 [shape="diamond" label="N18\n204"]
20 [shape="diamond" label="N20\n203"]
24 [shape="diamond" label="N24\n202"]
16 [shape="circle" label="N16\n195"]
23 [shape="diamond" label="N23\n201"]
25 [shape="diamond" label="N25\n200"]
22 [shape="diamond" label="N22\n199"]
26 [shape="diamond" label="N26\n198"]
21 [shape="diamond" label="N21\n197"]
27 [shape="diamond" label="N27\n196"]
node [shape="circle"]
subgraph cluster_four_by_four {
label="four_by_four()"
6 -> 7 [label="Function start dummy edge"]
7 -> 8 [label="_Bool valid;"]
8 -> 9 [label="_Bool parity;"]
9 -> 10 [label="_Bool permutation;"]
10 -> 11 [label="_Bool oddInversions;"]
11 -> 12 [label="smain.freg = from;"]
12 -> 13 [label="smain.treg = to;"]
13 -> 14 [label="int __CPAchecker_TMP_0;"]
14 -> 15 [label="[((smain.b)[smain.treg]) == 0]"]
14 -> 17 [label="[!(((smain.b)[smain.treg]) == 0)]"]
17 -> 28 [label="__CPAchecker_TMP_0 = 0;"]
28 -> 29 [label="valid = __CPAchecker_TMP_0;"]
29 -> 30 [label="parity = (((((((((((smain.b)[0]) & 5) == 1) | ((((smain.b)[0]) & 5) == 4)) ^ (((((smain.b)[1]) & 5) == 0) | ((((smain.b)[1]) & 5) == 5))) ^ (((((smain.b)[2]) & 5) == 1) | ((((smain.b)[2]) & 5) == 4))) ^ (((((smain.b)[3]) & 5) == 0) | ((((smain.b)[3]) & 5) == 5))) ^ (((((smain.b)[4]) & 5) == 1) | ((((smain.b)[4]) & 5) == 4))) ^ (((((smain.b)[5]) & 5) == 0) | ((((smain.b)[5]) & 5) == 5))) ^ (((((smain.b)[6]) & 5) == 1) | ((((smain.b)[6]) & 5) == 4))) ^ (((((smain.b)[7]) & 5) == 0) | ((((smain.b)[7]) & 5) == 5));"]
30 -> 31 [label="int __CPAchecker_TMP_1;"]
31 -> 60 [label="[((smain.b)[0]) != ((smain.b)[1])]"]
31 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[1]))]"]
34 -> 61 [label="__CPAchecker_TMP_1 = 0;"]
61 -> 62 [label="permutation = __CPAchecker_TMP_1;"]
62 -> 63 [label="int __CPAchecker_TMP_2;"]
63 -> 64 [label="int __CPAchecker_TMP_3;"]
64 -> 65 [label="int __CPAchecker_TMP_4;"]
65 -> 66 [label="int __CPAchecker_TMP_5;"]
66 -> 67 [label="int __CPAchecker_TMP_6;"]
67 -> 68 [label="int __CPAchecker_TMP_7;"]
68 -> 69 [label="int __CPAchecker_TMP_8;"]
69 -> 70 [label="int __CPAchecker_TMP_9;"]
70 -> 71 [label="int __CPAchecker_TMP_10;"]
71 -> 72 [label="int __CPAchecker_TMP_11;"]
72 -> 73 [label="int __CPAchecker_TMP_12;"]
73 -> 74 [label="int __CPAchecker_TMP_13;"]
74 -> 75 [label="int __CPAchecker_TMP_14;"]
75 -> 76 [label="int __CPAchecker_TMP_15;"]
76 -> 77 [label="int __CPAchecker_TMP_16;"]
77 -> 78 [label="int __CPAchecker_TMP_17;"]
78 -> 79 [label="int __CPAchecker_TMP_18;"]
79 -> 80 [label="int __CPAchecker_TMP_19;"]
80 -> 81 [label="int __CPAchecker_TMP_20;"]
81 -> 82 [label="int __CPAchecker_TMP_21;"]
82 -> 83 [label="int __CPAchecker_TMP_22;"]
83 -> 84 [label="int __CPAchecker_TMP_23;"]
84 -> 85 [label="int __CPAchecker_TMP_24;"]
85 -> 86 [label="int __CPAchecker_TMP_25;"]
86 -> 87 [label="int __CPAchecker_TMP_26;"]
87 -> 88 [label="int __CPAchecker_TMP_27;"]
88 -> 89 [label="int __CPAchecker_TMP_28;"]
89 -> 90 [label="int __CPAchecker_TMP_29;"]
90 -> 91 [label="int __CPAchecker_TMP_30;"]
91 -> 93 [label="[((smain.b)[4]) == 0]"]
91 -> 96 [label="[!(((smain.b)[4]) == 0)]"]
96 -> 93 [label="[((smain.b)[5]) == 0]"]
96 -> 95 [label="[!(((smain.b)[5]) == 0)]"]
95 -> 93 [label="[((smain.b)[6]) == 0]"]
95 -> 92 [label="[!(((smain.b)[6]) == 0)]"]
92 -> 93 [label="[((smain.b)[7]) == 0]"]
92 -> 94 [label="[!(((smain.b)[7]) == 0)]"]
94 -> 97 [label="__CPAchecker_TMP_2 = 0;"]
97 -> 98 [label="[((smain.b)[0]) > ((smain.b)[1])]"]
97 -> 100 [label="[!(((smain.b)[0]) > ((smain.b)[1]))]"]
100 -> 101 [label="__CPAchecker_TMP_3 = 0;"]
101 -> 102 [label="[((smain.b)[0]) > ((smain.b)[2])]"]
101 -> 104 [label="[!(((smain.b)[0]) > ((smain.b)[2]))]"]
104 -> 105 [label="__CPAchecker_TMP_4 = 0;"]
105 -> 106 [label="[((smain.b)[0]) > ((smain.b)[3])]"]
105 -> 108 [label="[!(((smain.b)[0]) > ((smain.b)[3]))]"]
108 -> 109 [label="__CPAchecker_TMP_5 = 0;"]
109 -> 110 [label="[((smain.b)[0]) > ((smain.b)[4])]"]
109 -> 112 [label="[!(((smain.b)[0]) > ((smain.b)[4]))]"]
112 -> 113 [label="__CPAchecker_TMP_6 = 0;"]
113 -> 114 [label="[((smain.b)[0]) > ((smain.b)[5])]"]
113 -> 116 [label="[!(((smain.b)[0]) > ((smain.b)[5]))]"]
116 -> 117 [label="__CPAchecker_TMP_7 = 0;"]
117 -> 118 [label="[((smain.b)[0]) > ((smain.b)[6])]"]
117 -> 120 [label="[!(((smain.b)[0]) > ((smain.b)[6]))]"]
120 -> 121 [label="__CPAchecker_TMP_8 = 0;"]
121 -> 122 [label="[((smain.b)[0]) > ((smain.b)[7])]"]
121 -> 124 [label="[!(((smain.b)[0]) > ((smain.b)[7]))]"]
124 -> 125 [label="__CPAchecker_TMP_9 = 0;"]
125 -> 126 [label="[((smain.b)[1]) > ((smain.b)[2])]"]
125 -> 128 [label="[!(((smain.b)[1]) > ((smain.b)[2]))]"]
128 -> 129 [label="__CPAchecker_TMP_10 = 0;"]
129 -> 130 [label="[((smain.b)[1]) > ((smain.b)[3])]"]
129 -> 132 [label="[!(((smain.b)[1]) > ((smain.b)[3]))]"]
132 -> 133 [label="__CPAchecker_TMP_11 = 0;"]
133 -> 134 [label="[((smain.b)[1]) > ((smain.b)[4])]"]
133 -> 136 [label="[!(((smain.b)[1]) > ((smain.b)[4]))]"]
136 -> 137 [label="__CPAchecker_TMP_12 = 0;"]
137 -> 138 [label="[((smain.b)[1]) > ((smain.b)[5])]"]
137 -> 140 [label="[!(((smain.b)[1]) > ((smain.b)[5]))]"]
140 -> 141 [label="__CPAchecker_TMP_13 = 0;"]
141 -> 142 [label="[((smain.b)[1]) > ((smain.b)[6])]"]
141 -> 144 [label="[!(((smain.b)[1]) > ((smain.b)[6]))]"]
144 -> 145 [label="__CPAchecker_TMP_14 = 0;"]
145 -> 146 [label="[((smain.b)[1]) > ((smain.b)[7])]"]
145 -> 148 [label="[!(((smain.b)[1]) > ((smain.b)[7]))]"]
148 -> 149 [label="__CPAchecker_TMP_15 = 0;"]
149 -> 150 [label="[((smain.b)[2]) > ((smain.b)[3])]"]
149 -> 152 [label="[!(((smain.b)[2]) > ((smain.b)[3]))]"]
152 -> 153 [label="__CPAchecker_TMP_16 = 0;"]
153 -> 154 [label="[((smain.b)[2]) > ((smain.b)[4])]"]
153 -> 156 [label="[!(((smain.b)[2]) > ((smain.b)[4]))]"]
156 -> 157 [label="__CPAchecker_TMP_17 = 0;"]
157 -> 158 [label="[((smain.b)[2]) > ((smain.b)[5])]"]
157 -> 160 [label="[!(((smain.b)[2]) > ((smain.b)[5]))]"]
160 -> 161 [label="__CPAchecker_TMP_18 = 0;"]
161 -> 162 [label="[((smain.b)[2]) > ((smain.b)[6])]"]
161 -> 164 [label="[!(((smain.b)[2]) > ((smain.b)[6]))]"]
164 -> 165 [label="__CPAchecker_TMP_19 = 0;"]
165 -> 166 [label="[((smain.b)[2]) > ((smain.b)[7])]"]
165 -> 168 [label="[!(((smain.b)[2]) > ((smain.b)[7]))]"]
168 -> 169 [label="__CPAchecker_TMP_20 = 0;"]
169 -> 170 [label="[((smain.b)[3]) > ((smain.b)[4])]"]
169 -> 172 [label="[!(((smain.b)[3]) > ((smain.b)[4]))]"]
172 -> 173 [label="__CPAchecker_TMP_21 = 0;"]
173 -> 174 [label="[((smain.b)[3]) > ((smain.b)[5])]"]
173 -> 176 [label="[!(((smain.b)[3]) > ((smain.b)[5]))]"]
176 -> 177 [label="__CPAchecker_TMP_22 = 0;"]
177 -> 178 [label="[((smain.b)[3]) > ((smain.b)[6])]"]
177 -> 180 [label="[!(((smain.b)[3]) > ((smain.b)[6]))]"]
180 -> 181 [label="__CPAchecker_TMP_23 = 0;"]
181 -> 182 [label="[((smain.b)[3]) > ((smain.b)[7])]"]
181 -> 184 [label="[!(((smain.b)[3]) > ((smain.b)[7]))]"]
184 -> 185 [label="__CPAchecker_TMP_24 = 0;"]
185 -> 186 [label="[((smain.b)[4]) > ((smain.b)[5])]"]
185 -> 188 [label="[!(((smain.b)[4]) > ((smain.b)[5]))]"]
188 -> 189 [label="__CPAchecker_TMP_25 = 0;"]
189 -> 190 [label="[((smain.b)[4]) > ((smain.b)[6])]"]
189 -> 192 [label="[!(((smain.b)[4]) > ((smain.b)[6]))]"]
192 -> 193 [label="__CPAchecker_TMP_26 = 0;"]
193 -> 194 [label="[((smain.b)[4]) > ((smain.b)[7])]"]
193 -> 196 [label="[!(((smain.b)[4]) > ((smain.b)[7]))]"]
196 -> 197 [label="__CPAchecker_TMP_27 = 0;"]
197 -> 198 [label="[((smain.b)[5]) > ((smain.b)[6])]"]
197 -> 200 [label="[!(((smain.b)[5]) > ((smain.b)[6]))]"]
200 -> 201 [label="__CPAchecker_TMP_28 = 0;"]
201 -> 202 [label="[((smain.b)[5]) > ((smain.b)[7])]"]
201 -> 204 [label="[!(((smain.b)[5]) > ((smain.b)[7]))]"]
204 -> 205 [label="__CPAchecker_TMP_29 = 0;"]
205 -> 206 [label="[((smain.b)[6]) > ((smain.b)[7])]"]
205 -> 208 [label="[!(((smain.b)[6]) > ((smain.b)[7]))]"]
208 -> 209 [label="__CPAchecker_TMP_30 = 0;"]
209 -> 210 [label="oddInversions = (((((((((((((((((((((((((((__CPAchecker_TMP_2 ^ __CPAchecker_TMP_3) ^ __CPAchecker_TMP_4) ^ __CPAchecker_TMP_5) ^ __CPAchecker_TMP_6) ^ __CPAchecker_TMP_7) ^ __CPAchecker_TMP_8) ^ __CPAchecker_TMP_9) ^ __CPAchecker_TMP_10) ^ __CPAchecker_TMP_11) ^ __CPAchecker_TMP_12) ^ __CPAchecker_TMP_13) ^ __CPAchecker_TMP_14) ^ __CPAchecker_TMP_15) ^ __CPAchecker_TMP_16) ^ __CPAchecker_TMP_17) ^ __CPAchecker_TMP_18) ^ __CPAchecker_TMP_19) ^ __CPAchecker_TMP_20) ^ __CPAchecker_TMP_21) ^ __CPAchecker_TMP_22) ^ __CPAchecker_TMP_23) ^ __CPAchecker_TMP_24) ^ __CPAchecker_TMP_25) ^ __CPAchecker_TMP_26) ^ __CPAchecker_TMP_27) ^ __CPAchecker_TMP_28) ^ __CPAchecker_TMP_29) ^ __CPAchecker_TMP_30;"]
210 -> 211 [label="[valid == 0]"]
210 -> 212 [label="[!(valid == 0)]"]
212 -> 213 [label="(smain.b)[smain.treg] = (smain.b)[smain.freg];"]
213 -> 214 [label="(smain.b)[smain.freg] = 0;"]
214 -> 211 [label=""]
211 -> 215 [label="void __CPAchecker_TMP_32;"]
215 -> 216 [label="[(0 == permutation) == 1]"]
215 -> 218 [label="[!((0 == permutation) == 1)]"]
218 -> 216 [label="[parity == 0]"]
218 -> 217 [label="[!(parity == 0)]"]
217 -> 219 [label="__assert_fail(\"!permutation==1 || parity==0\", \"main.c\", 79, \"__PRETTY_FUNCTION__\");"]
219 -> 220 [label="0;"]
220 -> 5 [label="default return"]
216 -> 219 [label="0;"]
206 -> 207 [label="[((smain.b)[7]) != 0]"]
206 -> 208 [label="[!(((smain.b)[7]) != 0)]"]
207 -> 209 [label="__CPAchecker_TMP_30 = 1;"]
202 -> 203 [label="[((smain.b)[7]) != 0]"]
202 -> 204 [label="[!(((smain.b)[7]) != 0)]"]
203 -> 205 [label="__CPAchecker_TMP_29 = 1;"]
198 -> 199 [label="[((smain.b)[6]) != 0]"]
198 -> 200 [label="[!(((smain.b)[6]) != 0)]"]
199 -> 201 [label="__CPAchecker_TMP_28 = 1;"]
194 -> 195 [label="[((smain.b)[7]) != 0]"]
194 -> 196 [label="[!(((smain.b)[7]) != 0)]"]
195 -> 197 [label="__CPAchecker_TMP_27 = 1;"]
190 -> 191 [label="[((smain.b)[6]) != 0]"]
190 -> 192 [label="[!(((smain.b)[6]) != 0)]"]
191 -> 193 [label="__CPAchecker_TMP_26 = 1;"]
186 -> 187 [label="[((smain.b)[5]) != 0]"]
186 -> 188 [label="[!(((smain.b)[5]) != 0)]"]
187 -> 189 [label="__CPAchecker_TMP_25 = 1;"]
182 -> 183 [label="[((smain.b)[7]) != 0]"]
182 -> 184 [label="[!(((smain.b)[7]) != 0)]"]
183 -> 185 [label="__CPAchecker_TMP_24 = 1;"]
178 -> 179 [label="[((smain.b)[6]) != 0]"]
178 -> 180 [label="[!(((smain.b)[6]) != 0)]"]
179 -> 181 [label="__CPAchecker_TMP_23 = 1;"]
174 -> 175 [label="[((smain.b)[5]) != 0]"]
174 -> 176 [label="[!(((smain.b)[5]) != 0)]"]
175 -> 177 [label="__CPAchecker_TMP_22 = 1;"]
170 -> 171 [label="[((smain.b)[4]) != 0]"]
170 -> 172 [label="[!(((smain.b)[4]) != 0)]"]
171 -> 173 [label="__CPAchecker_TMP_21 = 1;"]
166 -> 167 [label="[((smain.b)[7]) != 0]"]
166 -> 168 [label="[!(((smain.b)[7]) != 0)]"]
167 -> 169 [label="__CPAchecker_TMP_20 = 1;"]
162 -> 163 [label="[((smain.b)[6]) != 0]"]
162 -> 164 [label="[!(((smain.b)[6]) != 0)]"]
163 -> 165 [label="__CPAchecker_TMP_19 = 1;"]
158 -> 159 [label="[((smain.b)[5]) != 0]"]
158 -> 160 [label="[!(((smain.b)[5]) != 0)]"]
159 -> 161 [label="__CPAchecker_TMP_18 = 1;"]
154 -> 155 [label="[((smain.b)[4]) != 0]"]
154 -> 156 [label="[!(((smain.b)[4]) != 0)]"]
155 -> 157 [label="__CPAchecker_TMP_17 = 1;"]
150 -> 151 [label="[((smain.b)[3]) != 0]"]
150 -> 152 [label="[!(((smain.b)[3]) != 0)]"]
151 -> 153 [label="__CPAchecker_TMP_16 = 1;"]
146 -> 147 [label="[((smain.b)[7]) != 0]"]
146 -> 148 [label="[!(((smain.b)[7]) != 0)]"]
147 -> 149 [label="__CPAchecker_TMP_15 = 1;"]
142 -> 143 [label="[((smain.b)[6]) != 0]"]
142 -> 144 [label="[!(((smain.b)[6]) != 0)]"]
143 -> 145 [label="__CPAchecker_TMP_14 = 1;"]
138 -> 139 [label="[((smain.b)[5]) != 0]"]
138 -> 140 [label="[!(((smain.b)[5]) != 0)]"]
139 -> 141 [label="__CPAchecker_TMP_13 = 1;"]
134 -> 135 [label="[((smain.b)[4]) != 0]"]
134 -> 136 [label="[!(((smain.b)[4]) != 0)]"]
135 -> 137 [label="__CPAchecker_TMP_12 = 1;"]
130 -> 131 [label="[((smain.b)[3]) != 0]"]
130 -> 132 [label="[!(((smain.b)[3]) != 0)]"]
131 -> 133 [label="__CPAchecker_TMP_11 = 1;"]
126 -> 127 [label="[((smain.b)[2]) != 0]"]
126 -> 128 [label="[!(((smain.b)[2]) != 0)]"]
127 -> 129 [label="__CPAchecker_TMP_10 = 1;"]
122 -> 123 [label="[((smain.b)[7]) != 0]"]
122 -> 124 [label="[!(((smain.b)[7]) != 0)]"]
123 -> 125 [label="__CPAchecker_TMP_9 = 1;"]
118 -> 119 [label="[((smain.b)[6]) != 0]"]
118 -> 120 [label="[!(((smain.b)[6]) != 0)]"]
119 -> 121 [label="__CPAchecker_TMP_8 = 1;"]
114 -> 115 [label="[((smain.b)[5]) != 0]"]
114 -> 116 [label="[!(((smain.b)[5]) != 0)]"]
115 -> 117 [label="__CPAchecker_TMP_7 = 1;"]
110 -> 111 [label="[((smain.b)[4]) != 0]"]
110 -> 112 [label="[!(((smain.b)[4]) != 0)]"]
111 -> 113 [label="__CPAchecker_TMP_6 = 1;"]
106 -> 107 [label="[((smain.b)[3]) != 0]"]
106 -> 108 [label="[!(((smain.b)[3]) != 0)]"]
107 -> 109 [label="__CPAchecker_TMP_5 = 1;"]
102 -> 103 [label="[((smain.b)[2]) != 0]"]
102 -> 104 [label="[!(((smain.b)[2]) != 0)]"]
103 -> 105 [label="__CPAchecker_TMP_4 = 1;"]
98 -> 99 [label="[((smain.b)[1]) != 0]"]
98 -> 100 [label="[!(((smain.b)[1]) != 0)]"]
99 -> 101 [label="__CPAchecker_TMP_3 = 1;"]
93 -> 97 [label="__CPAchecker_TMP_2 = 1;"]
60 -> 59 [label="[((smain.b)[0]) != ((smain.b)[2])]"]
60 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[2]))]"]
59 -> 58 [label="[((smain.b)[0]) != ((smain.b)[3])]"]
59 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[3]))]"]
58 -> 57 [label="[((smain.b)[0]) != ((smain.b)[4])]"]
58 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[4]))]"]
57 -> 56 [label="[((smain.b)[0]) != ((smain.b)[5])]"]
57 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[5]))]"]
56 -> 55 [label="[((smain.b)[0]) != ((smain.b)[6])]"]
56 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[6]))]"]
55 -> 54 [label="[((smain.b)[0]) != ((smain.b)[7])]"]
55 -> 34 [label="[!(((smain.b)[0]) != ((smain.b)[7]))]"]
54 -> 53 [label="[((smain.b)[1]) != ((smain.b)[2])]"]
54 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[2]))]"]
53 -> 52 [label="[((smain.b)[1]) != ((smain.b)[3])]"]
53 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[3]))]"]
52 -> 51 [label="[((smain.b)[1]) != ((smain.b)[4])]"]
52 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[4]))]"]
51 -> 50 [label="[((smain.b)[1]) != ((smain.b)[5])]"]
51 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[5]))]"]
50 -> 49 [label="[((smain.b)[1]) != ((smain.b)[6])]"]
50 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[6]))]"]
49 -> 48 [label="[((smain.b)[1]) != ((smain.b)[7])]"]
49 -> 34 [label="[!(((smain.b)[1]) != ((smain.b)[7]))]"]
48 -> 47 [label="[((smain.b)[2]) != ((smain.b)[3])]"]
48 -> 34 [label="[!(((smain.b)[2]) != ((smain.b)[3]))]"]
47 -> 46 [label="[((smain.b)[2]) != ((smain.b)[4])]"]
47 -> 34 [label="[!(((smain.b)[2]) != ((smain.b)[4]))]"]
46 -> 45 [label="[((smain.b)[2]) != ((smain.b)[5])]"]
46 -> 34 [label="[!(((smain.b)[2]) != ((smain.b)[5]))]"]
45 -> 44 [label="[((smain.b)[2]) != ((smain.b)[6])]"]
45 -> 34 [label="[!(((smain.b)[2]) != ((smain.b)[6]))]"]
44 -> 43 [label="[((smain.b)[2]) != ((smain.b)[7])]"]
44 -> 34 [label="[!(((smain.b)[2]) != ((smain.b)[7]))]"]
43 -> 42 [label="[((smain.b)[3]) != ((smain.b)[4])]"]
43 -> 34 [label="[!(((smain.b)[3]) != ((smain.b)[4]))]"]
42 -> 41 [label="[((smain.b)[3]) != ((smain.b)[5])]"]
42 -> 34 [label="[!(((smain.b)[3]) != ((smain.b)[5]))]"]
41 -> 40 [label="[((smain.b)[3]) != ((smain.b)[6])]"]
41 -> 34 [label="[!(((smain.b)[3]) != ((smain.b)[6]))]"]
40 -> 39 [label="[((smain.b)[3]) != ((smain.b)[7])]"]
40 -> 34 [label="[!(((smain.b)[3]) != ((smain.b)[7]))]"]
39 -> 38 [label="[((smain.b)[4]) != ((smain.b)[5])]"]
39 -> 34 [label="[!(((smain.b)[4]) != ((smain.b)[5]))]"]
38 -> 37 [label="[((smain.b)[4]) != ((smain.b)[6])]"]
38 -> 34 [label="[!(((smain.b)[4]) != ((smain.b)[6]))]"]
37 -> 36 [label="[((smain.b)[4]) != ((smain.b)[7])]"]
37 -> 34 [label="[!(((smain.b)[4]) != ((smain.b)[7]))]"]
36 -> 35 [label="[((smain.b)[5]) != ((smain.b)[6])]"]
36 -> 34 [label="[!(((smain.b)[5]) != ((smain.b)[6]))]"]
35 -> 32 [label="[((smain.b)[5]) != ((smain.b)[7])]"]
35 -> 34 [label="[!(((smain.b)[5]) != ((smain.b)[7]))]"]
32 -> 33 [label="[((smain.b)[6]) != ((smain.b)[7])]"]
32 -> 34 [label="[!(((smain.b)[6]) != ((smain.b)[7]))]"]
33 -> 61 [label="__CPAchecker_TMP_1 = 1;"]
15 -> 18 [label="[(((smain.treg) & (3 == (smain.freg))) & 3) == 0]"]
15 -> 19 [label="[!((((smain.treg) & (3 == (smain.freg))) & 3) == 0)]"]
19 -> 16 [label="[(((smain.treg) & (4 == (smain.freg))) & 4) == 0]"]
19 -> 18 [label="[!((((smain.treg) & (4 == (smain.freg))) & 4) == 0)]"]
18 -> 17 [label="[(((smain.treg) & (4 == (smain.freg))) & 4) == 0]"]
18 -> 20 [label="[!((((smain.treg) & (4 == (smain.freg))) & 4) == 0)]"]
20 -> 23 [label="[((smain.treg) & 0) == 0]"]
20 -> 24 [label="[!(((smain.treg) & 0) == 0)]"]
24 -> 23 [label="[((smain.freg) & 0) == 0]"]
24 -> 16 [label="[!(((smain.freg) & 0) == 0)]"]
16 -> 28 [label="__CPAchecker_TMP_0 = 1;"]
23 -> 22 [label="[((smain.treg) & 0) == 0]"]
23 -> 25 [label="[!(((smain.treg) & 0) == 0)]"]
25 -> 22 [label="[((smain.freg) & 0) == 0]"]
25 -> 16 [label="[!(((smain.freg) & 0) == 0)]"]
22 -> 21 [label="[((smain.treg) & 0) == 0]"]
22 -> 26 [label="[!(((smain.treg) & 0) == 0)]"]
26 -> 21 [label="[((smain.freg) & 1) == 0]"]
26 -> 16 [label="[!(((smain.freg) & 1) == 0)]"]
21 -> 17 [label="[((smain.treg) & 1) == 0]"]
21 -> 27 [label="[!(((smain.treg) & 1) == 0)]"]
27 -> 17 [label="[((smain.freg) & 0) == 0]"]
27 -> 16 [label="[!(((smain.freg) & 0) == 0)]"]}
subgraph cluster_initial_main {
label="initial_main()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="smain.treg = 0;"]
3 -> 4 [label="smain.freg = 0;"]
4 -> 0 [label="default return"]}
subgraph cluster_main {
label="main()"
222 -> 232 [label="INIT GLOBAL VARS"]
232 -> 233 [label="typedef unsigned long int size_t;"]
233 -> 234 [label="typedef unsigned char __u_char;"]
234 -> 235 [label="typedef unsigned short int __u_short;"]
235 -> 236 [label="typedef unsigned int __u_int;"]
236 -> 237 [label="typedef unsigned long int __u_long;"]
237 -> 238 [label="typedef signed char __int8_t;"]
238 -> 239 [label="typedef unsigned char __uint8_t;"]
239 -> 240 [label="typedef signed short int __int16_t;"]
240 -> 241 [label="typedef unsigned short int __uint16_t;"]
241 -> 242 [label="typedef signed int __int32_t;"]
242 -> 243 [label="typedef unsigned int __uint32_t;"]
243 -> 244 [label="typedef signed long int __int64_t;"]
244 -> 245 [label="typedef unsigned long int __uint64_t;"]
245 -> 246 [label="typedef long int __quad_t;"]
246 -> 247 [label="typedef unsigned long int __u_quad_t;"]
247 -> 248 [label="typedef unsigned long int __dev_t;"]
248 -> 249 [label="typedef unsigned int __uid_t;"]
249 -> 250 [label="typedef unsigned int __gid_t;"]
250 -> 251 [label="typedef unsigned long int __ino_t;"]
251 -> 252 [label="typedef unsigned long int __ino64_t;"]
252 -> 253 [label="typedef unsigned int __mode_t;"]
253 -> 254 [label="typedef unsigned long int __nlink_t;"]
254 -> 255 [label="typedef long int __off_t;"]
255 -> 256 [label="typedef long int __off64_t;"]
256 -> 257 [label="typedef int __pid_t;"]
257 -> 258 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
258 -> 259 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
259 -> 260 [label="typedef long int __clock_t;"]
260 -> 261 [label="typedef unsigned long int __rlim_t;"]
261 -> 262 [label="typedef unsigned long int __rlim64_t;"]
262 -> 263 [label="typedef unsigned int __id_t;"]
263 -> 264 [label="typedef long int __time_t;"]
264 -> 265 [label="typedef unsigned int __useconds_t;"]
265 -> 266 [label="typedef long int __suseconds_t;"]
266 -> 267 [label="typedef int __daddr_t;"]
267 -> 268 [label="typedef int __key_t;"]
268 -> 269 [label="typedef int __clockid_t;"]
269 -> 270 [label="typedef void *__timer_t;"]
270 -> 271 [label="typedef long int __blksize_t;"]
271 -> 272 [label="typedef long int __blkcnt_t;"]
272 -> 273 [label="typedef long int __blkcnt64_t;"]
273 -> 274 [label="typedef unsigned long int __fsblkcnt_t;"]
274 -> 275 [label="typedef unsigned long int __fsblkcnt64_t;"]
275 -> 276 [label="typedef unsigned long int __fsfilcnt_t;"]
276 -> 277 [label="typedef unsigned long int __fsfilcnt64_t;"]
277 -> 278 [label="typedef long int __fsword_t;"]
278 -> 279 [label="typedef long int __ssize_t;"]
279 -> 280 [label="typedef long int __syscall_slong_t;"]
280 -> 281 [label="typedef unsigned long int __syscall_ulong_t;"]
281 -> 282 [label="typedef __off64_t __loff_t;"]
282 -> 283 [label="typedef __quad_t *__qaddr_t;"]
283 -> 284 [label="typedef char *__caddr_t;"]
284 -> 285 [label="typedef long int __intptr_t;"]
285 -> 286 [label="typedef unsigned int __socklen_t;"]
286 -> 287 [label="struct _IO_FILE ;"]
287 -> 288 [label="typedef struct _IO_FILE FILE;"]
288 -> 289 [label="typedef struct _IO_FILE __FILE;"]
289 -> 290 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
290 -> 291 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
291 -> 292 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
292 -> 293 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
293 -> 294 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
294 -> 295 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
295 -> 296 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
296 -> 297 [label="typedef __builtin_va_list __gnuc_va_list;"]
297 -> 298 [label="struct _IO_jump_t ;"]
298 -> 299 [label="typedef void _IO_lock_t;"]
299 -> 300 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
300 -> 301 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
301 -> 302 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
302 -> 303 [label="typedef struct _IO_FILE _IO_FILE;"]
303 -> 304 [label="struct _IO_FILE_plus ;"]
304 -> 305 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
305 -> 306 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
306 -> 307 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
307 -> 308 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
308 -> 309 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
309 -> 310 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
310 -> 311 [label="typedef int __io_close_fn(void *__cookie);"]
311 -> 312 [label="int __underflow(_IO_FILE *);"]
312 -> 313 [label="int __uflow(_IO_FILE *);"]
313 -> 314 [label="int __overflow(_IO_FILE *, int);"]
314 -> 315 [label="int _IO_getc(_IO_FILE *__fp);"]
315 -> 316 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
316 -> 317 [label="int _IO_feof(_IO_FILE *__fp);"]
317 -> 318 [label="int _IO_ferror(_IO_FILE *__fp);"]
318 -> 319 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
319 -> 320 [label="void _IO_flockfile(_IO_FILE *);"]
320 -> 321 [label="void _IO_funlockfile(_IO_FILE *);"]
321 -> 322 [label="int _IO_ftrylockfile(_IO_FILE *);"]
322 -> 323 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
323 -> 324 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
324 -> 325 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
325 -> 326 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
326 -> 327 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
327 -> 328 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
328 -> 329 [label="void _IO_free_backup_area(_IO_FILE *);"]
329 -> 330 [label="typedef __gnuc_va_list va_list;"]
330 -> 331 [label="typedef __off_t off_t;"]
331 -> 332 [label="typedef __ssize_t ssize_t;"]
332 -> 333 [label="typedef _G_fpos_t fpos_t;"]
333 -> 334 [label="extern struct _IO_FILE *stdin;"]
334 -> 335 [label="extern struct _IO_FILE *stdout;"]
335 -> 336 [label="extern struct _IO_FILE *stderr;"]
336 -> 337 [label="int remove(const char *__filename);"]
337 -> 338 [label="int rename(const char *__old, const char *__new);"]
338 -> 339 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
339 -> 340 [label="FILE * tmpfile();"]
340 -> 341 [label="char * tmpnam(char *__s);"]
341 -> 342 [label="char * tmpnam_r(char *__s);"]
342 -> 343 [label="char * tempnam(const char *__dir, const char *__pfx);"]
343 -> 344 [label="int fclose(FILE *__stream);"]
344 -> 345 [label="int fflush(FILE *__stream);"]
345 -> 346 [label="int fflush_unlocked(FILE *__stream);"]
346 -> 347 [label="FILE * fopen(const char *__filename, const char *__modes);"]
347 -> 348 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
348 -> 349 [label="FILE * fdopen(int __fd, const char *__modes);"]
349 -> 350 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
350 -> 351 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
351 -> 352 [label="void setbuf(FILE *__stream, char *__buf);"]
352 -> 353 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
353 -> 354 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
354 -> 355 [label="void setlinebuf(FILE *__stream);"]
355 -> 356 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
356 -> 357 [label="int printf(const char *__format, ...);"]
357 -> 358 [label="int sprintf(char *__s, const char *__format, ...);"]
358 -> 359 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
359 -> 360 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
360 -> 361 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
361 -> 362 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
362 -> 363 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
363 -> 364 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
364 -> 365 [label="int dprintf(int __fd, const char *__fmt, ...);"]
365 -> 366 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
366 -> 367 [label="int scanf(const char *__format, ...);"]
367 -> 368 [label="int sscanf(const char *__s, const char *__format, ...);"]
368 -> 369 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
369 -> 370 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
370 -> 371 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
371 -> 372 [label="int fgetc(FILE *__stream);"]
372 -> 373 [label="int getc(FILE *__stream);"]
373 -> 374 [label="int getchar();"]
374 -> 375 [label="int getc_unlocked(FILE *__stream);"]
375 -> 376 [label="int getchar_unlocked();"]
376 -> 377 [label="int fgetc_unlocked(FILE *__stream);"]
377 -> 378 [label="int fputc(int __c, FILE *__stream);"]
378 -> 379 [label="int putc(int __c, FILE *__stream);"]
379 -> 380 [label="int putchar(int __c);"]
380 -> 381 [label="int fputc_unlocked(int __c, FILE *__stream);"]
381 -> 382 [label="int putc_unlocked(int __c, FILE *__stream);"]
382 -> 383 [label="int putchar_unlocked(int __c);"]
383 -> 384 [label="int getw(FILE *__stream);"]
384 -> 385 [label="int putw(int __w, FILE *__stream);"]
385 -> 386 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
386 -> 387 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
387 -> 388 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
388 -> 389 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
389 -> 390 [label="int fputs(const char *__s, FILE *__stream);"]
390 -> 391 [label="int puts(const char *__s);"]
391 -> 392 [label="int ungetc(int __c, FILE *__stream);"]
392 -> 393 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
393 -> 394 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
394 -> 395 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
395 -> 396 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
396 -> 397 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
397 -> 398 [label="long int ftell(FILE *__stream);"]
398 -> 399 [label="void rewind(FILE *__stream);"]
399 -> 400 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
400 -> 401 [label="__off_t  ftello(FILE *__stream);"]
401 -> 402 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
402 -> 403 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
403 -> 404 [label="void clearerr(FILE *__stream);"]
404 -> 405 [label="int feof(FILE *__stream);"]
405 -> 406 [label="int ferror(FILE *__stream);"]
406 -> 407 [label="void clearerr_unlocked(FILE *__stream);"]
407 -> 408 [label="int feof_unlocked(FILE *__stream);"]
408 -> 409 [label="int ferror_unlocked(FILE *__stream);"]
409 -> 410 [label="void perror(const char *__s);"]
410 -> 411 [label="extern int sys_nerr;"]
411 -> 412 [label="extern const const char *sys_errlist[];"]
412 -> 413 [label="int fileno(FILE *__stream);"]
413 -> 414 [label="int fileno_unlocked(FILE *__stream);"]
414 -> 415 [label="FILE * popen(const char *__command, const char *__modes);"]
415 -> 416 [label="int pclose(FILE *__stream);"]
416 -> 417 [label="char * ctermid(char *__s);"]
417 -> 418 [label="void flockfile(FILE *__stream);"]
418 -> 419 [label="int ftrylockfile(FILE *__stream);"]
419 -> 420 [label="void funlockfile(FILE *__stream);"]
420 -> 421 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
421 -> 422 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
422 -> 423 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
423 -> 424 [label="struct state_elements_main {   unsigned char b[8];   unsigned char freg;   unsigned char treg; } ;"]
424 -> 425 [label="struct state_elements_main smain = {  };"]
425 -> 426 [label="void initial_main();"]
426 -> 427 [label="void four_by_four(_Bool clock, unsigned char from, unsigned char to);"]
427 -> 428 [label="void main();"]
428 -> 223 [label="Function start dummy edge"]
223 -> 224 [label="_Bool clock;"]
224 -> 225 [label="unsigned char from;"]
225 -> 226 [label="unsigned char to;"]
226 -> 227 [label="initial_main();" style="dotted" arrowhead="empty"]
227 -> 228 [label="while"]
228 -> 229 [label=""]
229 -> 231 [label="four_by_four(clock, from, to);" style="dotted" arrowhead="empty"]
231 -> 228 [label=""]}
226 -> 1 [label="initial_main()"]
0 -> 227 [label="Return edge from initial_main to main"]
229 -> 6 [label="four_by_four(clock, from, to)"]
5 -> 231 [label="Return edge from four_by_four to main"]}