digraph CFA {
171 [shape="circle" label="N171\n218"]
184 [shape="circle" label="N184\n217"]
185 [shape="circle" label="N185\n216"]
186 [shape="circle" label="N186\n215"]
187 [shape="circle" label="N187\n214"]
188 [shape="circle" label="N188\n213"]
189 [shape="circle" label="N189\n212"]
190 [shape="circle" label="N190\n211"]
191 [shape="circle" label="N191\n210"]
192 [shape="circle" label="N192\n209"]
193 [shape="circle" label="N193\n208"]
194 [shape="circle" label="N194\n207"]
195 [shape="circle" label="N195\n206"]
196 [shape="circle" label="N196\n205"]
197 [shape="circle" label="N197\n204"]
198 [shape="circle" label="N198\n203"]
199 [shape="circle" label="N199\n202"]
200 [shape="circle" label="N200\n201"]
201 [shape="circle" label="N201\n200"]
202 [shape="circle" label="N202\n199"]
203 [shape="circle" label="N203\n198"]
204 [shape="circle" label="N204\n197"]
205 [shape="circle" label="N205\n196"]
206 [shape="circle" label="N206\n195"]
207 [shape="circle" label="N207\n194"]
208 [shape="circle" label="N208\n193"]
209 [shape="circle" label="N209\n192"]
210 [shape="circle" label="N210\n191"]
211 [shape="circle" label="N211\n190"]
212 [shape="circle" label="N212\n189"]
213 [shape="circle" label="N213\n188"]
214 [shape="circle" label="N214\n187"]
215 [shape="circle" label="N215\n186"]
216 [shape="circle" label="N216\n185"]
217 [shape="circle" label="N217\n184"]
218 [shape="circle" label="N218\n183"]
219 [shape="circle" label="N219\n182"]
220 [shape="circle" label="N220\n181"]
221 [shape="circle" label="N221\n180"]
222 [shape="circle" label="N222\n179"]
223 [shape="circle" label="N223\n178"]
224 [shape="circle" label="N224\n177"]
225 [shape="circle" label="N225\n176"]
226 [shape="circle" label="N226\n175"]
227 [shape="circle" label="N227\n174"]
228 [shape="circle" label="N228\n173"]
229 [shape="circle" label="N229\n172"]
230 [shape="circle" label="N230\n171"]
231 [shape="circle" label="N231\n170"]
232 [shape="circle" label="N232\n169"]
233 [shape="circle" label="N233\n168"]
234 [shape="circle" label="N234\n167"]
235 [shape="circle" label="N235\n166"]
236 [shape="circle" label="N236\n165"]
237 [shape="circle" label="N237\n164"]
238 [shape="circle" label="N238\n163"]
239 [shape="circle" label="N239\n162"]
240 [shape="circle" label="N240\n161"]
241 [shape="circle" label="N241\n160"]
242 [shape="circle" label="N242\n159"]
243 [shape="circle" label="N243\n158"]
244 [shape="circle" label="N244\n157"]
245 [shape="circle" label="N245\n156"]
246 [shape="circle" label="N246\n155"]
247 [shape="circle" label="N247\n154"]
248 [shape="circle" label="N248\n153"]
249 [shape="circle" label="N249\n152"]
250 [shape="circle" label="N250\n151"]
251 [shape="circle" label="N251\n150"]
252 [shape="circle" label="N252\n149"]
253 [shape="circle" label="N253\n148"]
254 [shape="circle" label="N254\n147"]
255 [shape="circle" label="N255\n146"]
256 [shape="circle" label="N256\n145"]
257 [shape="circle" label="N257\n144"]
258 [shape="circle" label="N258\n143"]
259 [shape="circle" label="N259\n142"]
260 [shape="circle" label="N260\n141"]
261 [shape="circle" label="N261\n140"]
262 [shape="circle" label="N262\n139"]
263 [shape="circle" label="N263\n138"]
264 [shape="circle" label="N264\n137"]
265 [shape="circle" label="N265\n136"]
266 [shape="circle" label="N266\n135"]
267 [shape="circle" label="N267\n134"]
268 [shape="circle" label="N268\n133"]
269 [shape="circle" label="N269\n132"]
270 [shape="circle" label="N270\n131"]
271 [shape="circle" label="N271\n130"]
272 [shape="circle" label="N272\n129"]
273 [shape="circle" label="N273\n128"]
274 [shape="circle" label="N274\n127"]
275 [shape="circle" label="N275\n126"]
276 [shape="circle" label="N276\n125"]
277 [shape="circle" label="N277\n124"]
278 [shape="circle" label="N278\n123"]
279 [shape="circle" label="N279\n122"]
280 [shape="circle" label="N280\n121"]
281 [shape="circle" label="N281\n120"]
282 [shape="circle" label="N282\n119"]
283 [shape="circle" label="N283\n118"]
284 [shape="circle" label="N284\n117"]
285 [shape="circle" label="N285\n116"]
286 [shape="circle" label="N286\n115"]
287 [shape="circle" label="N287\n114"]
288 [shape="circle" label="N288\n113"]
289 [shape="circle" label="N289\n112"]
290 [shape="circle" label="N290\n111"]
291 [shape="circle" label="N291\n110"]
292 [shape="circle" label="N292\n109"]
293 [shape="circle" label="N293\n108"]
294 [shape="circle" label="N294\n107"]
295 [shape="circle" label="N295\n106"]
296 [shape="circle" label="N296\n105"]
297 [shape="circle" label="N297\n104"]
298 [shape="circle" label="N298\n103"]
299 [shape="circle" label="N299\n102"]
300 [shape="circle" label="N300\n101"]
301 [shape="circle" label="N301\n100"]
302 [shape="circle" label="N302\n99"]
303 [shape="circle" label="N303\n98"]
304 [shape="circle" label="N304\n97"]
305 [shape="circle" label="N305\n96"]
306 [shape="circle" label="N306\n95"]
307 [shape="circle" label="N307\n94"]
308 [shape="circle" label="N308\n93"]
309 [shape="circle" label="N309\n92"]
310 [shape="circle" label="N310\n91"]
311 [shape="circle" label="N311\n90"]
312 [shape="circle" label="N312\n89"]
313 [shape="circle" label="N313\n88"]
314 [shape="circle" label="N314\n87"]
315 [shape="circle" label="N315\n86"]
316 [shape="circle" label="N316\n85"]
317 [shape="circle" label="N317\n84"]
318 [shape="circle" label="N318\n83"]
319 [shape="circle" label="N319\n82"]
320 [shape="circle" label="N320\n81"]
321 [shape="circle" label="N321\n80"]
322 [shape="circle" label="N322\n79"]
323 [shape="circle" label="N323\n78"]
324 [shape="circle" label="N324\n77"]
325 [shape="circle" label="N325\n76"]
326 [shape="circle" label="N326\n75"]
327 [shape="circle" label="N327\n74"]
328 [shape="circle" label="N328\n73"]
329 [shape="circle" label="N329\n72"]
330 [shape="circle" label="N330\n71"]
331 [shape="circle" label="N331\n70"]
332 [shape="circle" label="N332\n69"]
333 [shape="circle" label="N333\n68"]
334 [shape="circle" label="N334\n67"]
335 [shape="circle" label="N335\n66"]
336 [shape="circle" label="N336\n65"]
337 [shape="circle" label="N337\n64"]
338 [shape="circle" label="N338\n63"]
339 [shape="circle" label="N339\n62"]
340 [shape="circle" label="N340\n61"]
341 [shape="circle" label="N341\n60"]
342 [shape="circle" label="N342\n59"]
343 [shape="circle" label="N343\n58"]
344 [shape="circle" label="N344\n57"]
345 [shape="circle" label="N345\n56"]
346 [shape="circle" label="N346\n55"]
347 [shape="circle" label="N347\n54"]
348 [shape="circle" label="N348\n53"]
349 [shape="circle" label="N349\n52"]
350 [shape="circle" label="N350\n51"]
351 [shape="circle" label="N351\n50"]
352 [shape="circle" label="N352\n49"]
353 [shape="circle" label="N353\n48"]
354 [shape="circle" label="N354\n47"]
355 [shape="circle" label="N355\n46"]
356 [shape="circle" label="N356\n45"]
357 [shape="circle" label="N357\n44"]
358 [shape="circle" label="N358\n43"]
359 [shape="circle" label="N359\n42"]
360 [shape="circle" label="N360\n41"]
361 [shape="circle" label="N361\n40"]
362 [shape="circle" label="N362\n39"]
363 [shape="circle" label="N363\n38"]
364 [shape="circle" label="N364\n37"]
365 [shape="circle" label="N365\n36"]
366 [shape="circle" label="N366\n35"]
367 [shape="circle" label="N367\n34"]
368 [shape="circle" label="N368\n33"]
369 [shape="circle" label="N369\n32"]
370 [shape="circle" label="N370\n31"]
371 [shape="circle" label="N371\n30"]
372 [shape="circle" label="N372\n29"]
373 [shape="circle" label="N373\n28"]
374 [shape="circle" label="N374\n27"]
375 [shape="circle" label="N375\n26"]
376 [shape="circle" label="N376\n25"]
377 [shape="circle" label="N377\n24"]
378 [shape="circle" label="N378\n23"]
379 [shape="circle" label="N379\n22"]
380 [shape="circle" label="N380\n21"]
381 [shape="circle" label="N381\n20"]
382 [shape="circle" label="N382\n19"]
383 [shape="circle" label="N383\n18"]
384 [shape="circle" label="N384\n17"]
385 [shape="circle" label="N385\n16"]
386 [shape="circle" label="N386\n15"]
387 [shape="circle" label="N387\n14"]
388 [shape="circle" label="N388\n13"]
389 [shape="circle" label="N389\n12"]
390 [shape="circle" label="N390\n11"]
172 [shape="circle" label="N172\n10"]
173 [shape="circle" label="N173\n9"]
174 [shape="circle" label="N174\n8"]
175 [shape="circle" label="N175\n7"]
176 [shape="circle" label="N176\n6"]
132 [shape="circle" label="N132\n4"]
133 [shape="circle" label="N133\n3"]
134 [shape="circle" label="N134\n2"]
135 [shape="circle" label="N135\n1"]
131 [shape="circle" label="N131\n0"]
177 [shape="circle" label="N177\n5"]
1 [shape="circle" label="N1\n7"]
2 [shape="circle" label="N2\n6"]
3 [shape="circle" label="N3\n5"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
6 [shape="circle" label="N6\n2"]
7 [shape="circle" label="N7\n1"]
0 [shape="circle" label="N0\n0"]
178 [shape="circle" label="N178\n4"]
179 [shape="doublecircle" label="N179\n3"]
180 [shape="circle" label="N180\n2"]
182 [shape="circle" label="N182\n1"]
137 [shape="circle" label="N137\n33"]
138 [shape="circle" label="N138\n32"]
139 [shape="circle" label="N139\n31"]
140 [shape="circle" label="N140\n30"]
141 [shape="circle" label="N141\n29"]
142 [shape="circle" label="N142\n28"]
143 [shape="circle" label="N143\n27"]
9 [shape="circle" label="N9\n53"]
10 [shape="circle" label="N10\n52"]
11 [shape="diamond" label="N11\n51"]
13 [shape="circle" label="N13\n50"]
15 [shape="circle" label="N15\n49"]
12 [shape="circle" label="N12\n46"]
17 [shape="diamond" label="N17\n45"]
19 [shape="circle" label="N19\n44"]
21 [shape="circle" label="N21\n43"]
22 [shape="circle" label="N22\n42"]
23 [shape="circle" label="N23\n41"]
24 [shape="circle" label="N24\n40"]
18 [shape="circle" label="N18\n5"]
64 [shape="circle" label="N64\n4"]
65 [shape="circle" label="N65\n3"]
66 [shape="circle" label="N66\n2"]
67 [shape="circle" label="N67\n1"]
8 [shape="circle" label="N8\n0"]
144 [shape="circle" label="N144\n26"]
112 [shape="circle" label="N112\n19"]
113 [shape="circle" label="N113\n18"]
114 [shape="diamond" label="N114\n17"]
115 [shape="circle" label="N115\n16"]
75 [shape="circle" label="N75\n10"]
76 [shape="circle" label="N76\n9"]
77 [shape="circle" label="N77\n8"]
81 [shape="circle" label="N81\n7"]
69 [shape="circle" label="N69\n4"]
70 [shape="circle" label="N70\n3"]
71 [shape="circle" label="N71\n2"]
72 [shape="circle" label="N72\n1"]
68 [shape="circle" label="N68\n0"]
94 [shape="diamond" label="N94\n6"]
92 [shape="circle" label="N92\n5"]
96 [shape="circle" label="N96\n4"]
90 [shape="circle" label="N90\n1"]
86 [shape="circle" label="N86\n0"]
121 [shape="circle" label="N121\n3"]
117 [shape="circle" label="N117\n2"]
130 [shape="circle" label="N130\n1"]
111 [shape="circle" label="N111\n0"]
145 [shape="diamond" label="N145\n25"]
147 [shape="circle" label="N147\n24"]
149 [shape="circle" label="N149\n23"]
150 [shape="circle" label="N150\n22"]
146 [shape="circle" label="N146\n18"]
153 [shape="circle" label="N153\n17"]
154 [shape="diamond" label="N154\n16"]
161 [shape="diamond" label="N161\n14"]
160 [shape="diamond" label="N160\n12"]
159 [shape="diamond" label="N159\n10"]
158 [shape="diamond" label="N158\n8"]
157 [shape="diamond" label="N157\n6"]
155 [shape="circle" label="N155\n4"]
168 [shape="circle" label="N168\n2"]
169 [shape="circle" label="N169\n1"]
136 [shape="circle" label="N136\n0"]
183 [shape="circle" label="N183\n0"]
167 [shape="diamond" label="N167\n5"]
156 [shape="circle" label="N156\n3"]
166 [shape="diamond" label="N166\n7"]
165 [shape="diamond" label="N165\n9"]
164 [shape="diamond" label="N164\n11"]
163 [shape="diamond" label="N163\n13"]
162 [shape="diamond" label="N162\n15"]
148 [shape="circle" label="N148\n21"]
151 [shape="circle" label="N151\n20"]
152 [shape="circle" label="N152\n19"]
91 [shape="circle" label="N91\n3"]
95 [shape="circle" label="N95\n2"]
82 [shape="diamond" label="N82\n6"]
79 [shape="circle" label="N79\n5"]
83 [shape="circle" label="N83\n4"]
78 [shape="circle" label="N78\n1"]
74 [shape="circle" label="N74\n0"]
80 [shape="circle" label="N80\n3"]
84 [shape="circle" label="N84\n2"]
116 [shape="circle" label="N116\n15"]
118 [shape="diamond" label="N118\n14"]
119 [shape="circle" label="N119\n13"]
87 [shape="circle" label="N87\n10"]
88 [shape="circle" label="N88\n9"]
89 [shape="circle" label="N89\n8"]
93 [shape="circle" label="N93\n7"]
120 [shape="circle" label="N120\n12"]
122 [shape="diamond" label="N122\n11"]
123 [shape="circle" label="N123\n10"]
125 [shape="circle" label="N125\n4"]
124 [shape="circle" label="N124\n9"]
126 [shape="diamond" label="N126\n8"]
127 [shape="circle" label="N127\n7"]
99 [shape="circle" label="N99\n3"]
100 [shape="circle" label="N100\n2"]
101 [shape="circle" label="N101\n1"]
98 [shape="circle" label="N98\n0"]
129 [shape="circle" label="N129\n5"]
128 [shape="circle" label="N128\n6"]
20 [shape="diamond" label="N20\n39"]
26 [shape="circle" label="N26\n38"]
27 [shape="diamond" label="N27\n37"]
31 [shape="diamond" label="N31\n36"]
38 [shape="diamond" label="N38\n35"]
45 [shape="diamond" label="N45\n34"]
52 [shape="circle" label="N52\n33"]
58 [shape="circle" label="N58\n32"]
59 [shape="circle" label="N59\n31"]
60 [shape="circle" label="N60\n30"]
61 [shape="circle" label="N61\n29"]
62 [shape="circle" label="N62\n28"]
28 [shape="circle" label="N28\n7"]
51 [shape="circle" label="N51\n27"]
53 [shape="circle" label="N53\n26"]
54 [shape="circle" label="N54\n25"]
55 [shape="circle" label="N55\n24"]
56 [shape="circle" label="N56\n23"]
44 [shape="circle" label="N44\n22"]
46 [shape="circle" label="N46\n21"]
47 [shape="circle" label="N47\n20"]
48 [shape="circle" label="N48\n19"]
49 [shape="circle" label="N49\n18"]
37 [shape="circle" label="N37\n17"]
39 [shape="circle" label="N39\n16"]
40 [shape="circle" label="N40\n15"]
41 [shape="circle" label="N41\n14"]
42 [shape="circle" label="N42\n13"]
30 [shape="circle" label="N30\n12"]
32 [shape="circle" label="N32\n11"]
33 [shape="circle" label="N33\n10"]
34 [shape="circle" label="N34\n9"]
35 [shape="circle" label="N35\n8"]
25 [shape="circle" label="N25\n6"]
14 [shape="circle" label="N14\n48"]
16 [shape="circle" label="N16\n47"]
node [shape="circle"]
subgraph cluster_changeCase {
label="changeCase()"
99 -> 100 [label="Function start dummy edge"]
100 -> 101 [label="unsigned char changecase;"]
101 -> 98 [label="return changecase;"]}
subgraph cluster_control {
label="control()"
9 -> 10 [label="Function start dummy edge"]
10 -> 11 [label="_Bool load;"]
11 -> 14 [label="[reset == 0]"]
11 -> 13 [label="[!(reset == 0)]"]
13 -> 15 [label="scontrol.prev = 0;"]
15 -> 12 [label=""]
12 -> 17 [label="load = (scontrol.prev) == 27;"]
17 -> 20 [label="[reset == 0]"]
17 -> 19 [label="[!(reset == 0)]"]
19 -> 21 [label="scontrol.Ncmd = 1;"]
21 -> 22 [label="scontrol.Lcmd = 0;"]
22 -> 23 [label="scontrol.Ucmd = 0;"]
23 -> 24 [label="scontrol.Ccmd = 0;"]
24 -> 18 [label=""]
18 -> 64 [label="*Lcmd = scontrol.Lcmd;"]
64 -> 65 [label="*Ucmd = scontrol.Ucmd;"]
65 -> 66 [label="*Ncmd = scontrol.Ncmd;"]
66 -> 67 [label="*Ccmd = scontrol.Ccmd;"]
67 -> 8 [label="default return"]
20 -> 25 [label="[load == 0]"]
20 -> 26 [label="[!(load == 0)]"]
26 -> 27 [label="switch (in)"]
27 -> 30 [label="[in == 76]"]
27 -> 31 [label="[!(in == 76)]"]
31 -> 37 [label="[in == 85]"]
31 -> 38 [label="[!(in == 85)]"]
38 -> 44 [label="[in == 78]"]
38 -> 45 [label="[!(in == 78)]"]
45 -> 51 [label="[in == 67]"]
45 -> 52 [label="[!(in == 67)]"]
52 -> 58 [label="default"]
58 -> 59 [label="scontrol.Lcmd = 0;"]
59 -> 60 [label="scontrol.Ucmd = 0;"]
60 -> 61 [label="scontrol.Ncmd = 0;"]
61 -> 62 [label="scontrol.Ccmd = 0;"]
62 -> 28 [label="break"]
28 -> 18 [label=""]
51 -> 53 [label="scontrol.Lcmd = 0;"]
53 -> 54 [label="scontrol.Ucmd = 0;"]
54 -> 55 [label="scontrol.Ncmd = 0;"]
55 -> 56 [label="scontrol.Ccmd = 1;"]
56 -> 28 [label="break"]
44 -> 46 [label="scontrol.Lcmd = 0;"]
46 -> 47 [label="scontrol.Ucmd = 0;"]
47 -> 48 [label="scontrol.Ncmd = 1;"]
48 -> 49 [label="scontrol.Ccmd = 0;"]
49 -> 28 [label="break"]
37 -> 39 [label="scontrol.Lcmd = 0;"]
39 -> 40 [label="scontrol.Ucmd = 1;"]
40 -> 41 [label="scontrol.Ncmd = 0;"]
41 -> 42 [label="scontrol.Ccmd = 0;"]
42 -> 28 [label="break"]
30 -> 32 [label="scontrol.Lcmd = 1;"]
32 -> 33 [label="scontrol.Ucmd = 0;"]
33 -> 34 [label="scontrol.Ncmd = 0;"]
34 -> 35 [label="scontrol.Ccmd = 0;"]
35 -> 28 [label="break"]
25 -> 18 [label=""]
14 -> 16 [label="scontrol.prev = in;"]
16 -> 12 [label=""]}
subgraph cluster_initial {
label="initial()"
132 -> 133 [label="Function start dummy edge"]
133 -> 134 [label="smain.regIn = 0;"]
134 -> 135 [label="smain.dataOut = 0;"]
135 -> 131 [label="default return"]}
subgraph cluster_initial_control {
label="initial_control()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="scontrol.Lcmd = 0;"]
3 -> 4 [label="scontrol.Ucmd = 0;"]
4 -> 5 [label="scontrol.Ncmd = 1;"]
5 -> 6 [label="scontrol.Ccmd = 0;"]
6 -> 7 [label="scontrol.prev = 0;"]
7 -> 0 [label="default return"]}
subgraph cluster_isUpper {
label="isUpper()"
69 -> 70 [label="Function start dummy edge"]
70 -> 71 [label="_Bool isupper;"]
71 -> 72 [label="isupper = ~((in >> 5) & 1);"]
72 -> 68 [label="return isupper;"]}
subgraph cluster_main {
label="main()"
171 -> 184 [label="INIT GLOBAL VARS"]
184 -> 185 [label="typedef unsigned long int size_t;"]
185 -> 186 [label="typedef unsigned char __u_char;"]
186 -> 187 [label="typedef unsigned short int __u_short;"]
187 -> 188 [label="typedef unsigned int __u_int;"]
188 -> 189 [label="typedef unsigned long int __u_long;"]
189 -> 190 [label="typedef signed char __int8_t;"]
190 -> 191 [label="typedef unsigned char __uint8_t;"]
191 -> 192 [label="typedef signed short int __int16_t;"]
192 -> 193 [label="typedef unsigned short int __uint16_t;"]
193 -> 194 [label="typedef signed int __int32_t;"]
194 -> 195 [label="typedef unsigned int __uint32_t;"]
195 -> 196 [label="typedef signed long int __int64_t;"]
196 -> 197 [label="typedef unsigned long int __uint64_t;"]
197 -> 198 [label="typedef long int __quad_t;"]
198 -> 199 [label="typedef unsigned long int __u_quad_t;"]
199 -> 200 [label="typedef unsigned long int __dev_t;"]
200 -> 201 [label="typedef unsigned int __uid_t;"]
201 -> 202 [label="typedef unsigned int __gid_t;"]
202 -> 203 [label="typedef unsigned long int __ino_t;"]
203 -> 204 [label="typedef unsigned long int __ino64_t;"]
204 -> 205 [label="typedef unsigned int __mode_t;"]
205 -> 206 [label="typedef unsigned long int __nlink_t;"]
206 -> 207 [label="typedef long int __off_t;"]
207 -> 208 [label="typedef long int __off64_t;"]
208 -> 209 [label="typedef int __pid_t;"]
209 -> 210 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
210 -> 211 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
211 -> 212 [label="typedef long int __clock_t;"]
212 -> 213 [label="typedef unsigned long int __rlim_t;"]
213 -> 214 [label="typedef unsigned long int __rlim64_t;"]
214 -> 215 [label="typedef unsigned int __id_t;"]
215 -> 216 [label="typedef long int __time_t;"]
216 -> 217 [label="typedef unsigned int __useconds_t;"]
217 -> 218 [label="typedef long int __suseconds_t;"]
218 -> 219 [label="typedef int __daddr_t;"]
219 -> 220 [label="typedef int __key_t;"]
220 -> 221 [label="typedef int __clockid_t;"]
221 -> 222 [label="typedef void *__timer_t;"]
222 -> 223 [label="typedef long int __blksize_t;"]
223 -> 224 [label="typedef long int __blkcnt_t;"]
224 -> 225 [label="typedef long int __blkcnt64_t;"]
225 -> 226 [label="typedef unsigned long int __fsblkcnt_t;"]
226 -> 227 [label="typedef unsigned long int __fsblkcnt64_t;"]
227 -> 228 [label="typedef unsigned long int __fsfilcnt_t;"]
228 -> 229 [label="typedef unsigned long int __fsfilcnt64_t;"]
229 -> 230 [label="typedef long int __fsword_t;"]
230 -> 231 [label="typedef long int __ssize_t;"]
231 -> 232 [label="typedef long int __syscall_slong_t;"]
232 -> 233 [label="typedef unsigned long int __syscall_ulong_t;"]
233 -> 234 [label="typedef __off64_t __loff_t;"]
234 -> 235 [label="typedef __quad_t *__qaddr_t;"]
235 -> 236 [label="typedef char *__caddr_t;"]
236 -> 237 [label="typedef long int __intptr_t;"]
237 -> 238 [label="typedef unsigned int __socklen_t;"]
238 -> 239 [label="struct _IO_FILE ;"]
239 -> 240 [label="typedef struct _IO_FILE FILE;"]
240 -> 241 [label="typedef struct _IO_FILE __FILE;"]
241 -> 242 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
242 -> 243 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
243 -> 244 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
244 -> 245 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
245 -> 246 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
246 -> 247 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
247 -> 248 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
248 -> 249 [label="typedef __builtin_va_list __gnuc_va_list;"]
249 -> 250 [label="struct _IO_jump_t ;"]
250 -> 251 [label="typedef void _IO_lock_t;"]
251 -> 252 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
252 -> 253 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
253 -> 254 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
254 -> 255 [label="typedef struct _IO_FILE _IO_FILE;"]
255 -> 256 [label="struct _IO_FILE_plus ;"]
256 -> 257 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
257 -> 258 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
258 -> 259 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
259 -> 260 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
260 -> 261 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
261 -> 262 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
262 -> 263 [label="typedef int __io_close_fn(void *__cookie);"]
263 -> 264 [label="int __underflow(_IO_FILE *);"]
264 -> 265 [label="int __uflow(_IO_FILE *);"]
265 -> 266 [label="int __overflow(_IO_FILE *, int);"]
266 -> 267 [label="int _IO_getc(_IO_FILE *__fp);"]
267 -> 268 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
268 -> 269 [label="int _IO_feof(_IO_FILE *__fp);"]
269 -> 270 [label="int _IO_ferror(_IO_FILE *__fp);"]
270 -> 271 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
271 -> 272 [label="void _IO_flockfile(_IO_FILE *);"]
272 -> 273 [label="void _IO_funlockfile(_IO_FILE *);"]
273 -> 274 [label="int _IO_ftrylockfile(_IO_FILE *);"]
274 -> 275 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
275 -> 276 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
276 -> 277 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
277 -> 278 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
278 -> 279 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
279 -> 280 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
280 -> 281 [label="void _IO_free_backup_area(_IO_FILE *);"]
281 -> 282 [label="typedef __gnuc_va_list va_list;"]
282 -> 283 [label="typedef __off_t off_t;"]
283 -> 284 [label="typedef __ssize_t ssize_t;"]
284 -> 285 [label="typedef _G_fpos_t fpos_t;"]
285 -> 286 [label="extern struct _IO_FILE *stdin;"]
286 -> 287 [label="extern struct _IO_FILE *stdout;"]
287 -> 288 [label="extern struct _IO_FILE *stderr;"]
288 -> 289 [label="int remove(const char *__filename);"]
289 -> 290 [label="int rename(const char *__old, const char *__new);"]
290 -> 291 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
291 -> 292 [label="FILE * tmpfile();"]
292 -> 293 [label="char * tmpnam(char *__s);"]
293 -> 294 [label="char * tmpnam_r(char *__s);"]
294 -> 295 [label="char * tempnam(const char *__dir, const char *__pfx);"]
295 -> 296 [label="int fclose(FILE *__stream);"]
296 -> 297 [label="int fflush(FILE *__stream);"]
297 -> 298 [label="int fflush_unlocked(FILE *__stream);"]
298 -> 299 [label="FILE * fopen(const char *__filename, const char *__modes);"]
299 -> 300 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
300 -> 301 [label="FILE * fdopen(int __fd, const char *__modes);"]
301 -> 302 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
302 -> 303 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
303 -> 304 [label="void setbuf(FILE *__stream, char *__buf);"]
304 -> 305 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
305 -> 306 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
306 -> 307 [label="void setlinebuf(FILE *__stream);"]
307 -> 308 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
308 -> 309 [label="int printf(const char *__format, ...);"]
309 -> 310 [label="int sprintf(char *__s, const char *__format, ...);"]
310 -> 311 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
311 -> 312 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
312 -> 313 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
313 -> 314 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
314 -> 315 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
315 -> 316 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
316 -> 317 [label="int dprintf(int __fd, const char *__fmt, ...);"]
317 -> 318 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
318 -> 319 [label="int scanf(const char *__format, ...);"]
319 -> 320 [label="int sscanf(const char *__s, const char *__format, ...);"]
320 -> 321 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
321 -> 322 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
322 -> 323 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
323 -> 324 [label="int fgetc(FILE *__stream);"]
324 -> 325 [label="int getc(FILE *__stream);"]
325 -> 326 [label="int getchar();"]
326 -> 327 [label="int getc_unlocked(FILE *__stream);"]
327 -> 328 [label="int getchar_unlocked();"]
328 -> 329 [label="int fgetc_unlocked(FILE *__stream);"]
329 -> 330 [label="int fputc(int __c, FILE *__stream);"]
330 -> 331 [label="int putc(int __c, FILE *__stream);"]
331 -> 332 [label="int putchar(int __c);"]
332 -> 333 [label="int fputc_unlocked(int __c, FILE *__stream);"]
333 -> 334 [label="int putc_unlocked(int __c, FILE *__stream);"]
334 -> 335 [label="int putchar_unlocked(int __c);"]
335 -> 336 [label="int getw(FILE *__stream);"]
336 -> 337 [label="int putw(int __w, FILE *__stream);"]
337 -> 338 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
338 -> 339 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
339 -> 340 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
340 -> 341 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
341 -> 342 [label="int fputs(const char *__s, FILE *__stream);"]
342 -> 343 [label="int puts(const char *__s);"]
343 -> 344 [label="int ungetc(int __c, FILE *__stream);"]
344 -> 345 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
345 -> 346 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
346 -> 347 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
347 -> 348 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
348 -> 349 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
349 -> 350 [label="long int ftell(FILE *__stream);"]
350 -> 351 [label="void rewind(FILE *__stream);"]
351 -> 352 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
352 -> 353 [label="__off_t  ftello(FILE *__stream);"]
353 -> 354 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
354 -> 355 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
355 -> 356 [label="void clearerr(FILE *__stream);"]
356 -> 357 [label="int feof(FILE *__stream);"]
357 -> 358 [label="int ferror(FILE *__stream);"]
358 -> 359 [label="void clearerr_unlocked(FILE *__stream);"]
359 -> 360 [label="int feof_unlocked(FILE *__stream);"]
360 -> 361 [label="int ferror_unlocked(FILE *__stream);"]
361 -> 362 [label="void perror(const char *__s);"]
362 -> 363 [label="extern int sys_nerr;"]
363 -> 364 [label="extern const const char *sys_errlist[];"]
364 -> 365 [label="int fileno(FILE *__stream);"]
365 -> 366 [label="int fileno_unlocked(FILE *__stream);"]
366 -> 367 [label="FILE * popen(const char *__command, const char *__modes);"]
367 -> 368 [label="int pclose(FILE *__stream);"]
368 -> 369 [label="char * ctermid(char *__s);"]
369 -> 370 [label="void flockfile(FILE *__stream);"]
370 -> 371 [label="int ftrylockfile(FILE *__stream);"]
371 -> 372 [label="void funlockfile(FILE *__stream);"]
372 -> 373 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
373 -> 374 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
374 -> 375 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
375 -> 376 [label="unsigned char nondet_char();"]
376 -> 377 [label="struct state_elements_control {   unsigned char prev;   _Bool Lcmd;   _Bool Ucmd;   _Bool Ncmd;   _Bool Ccmd; } ;"]
377 -> 378 [label="struct state_elements_control scontrol = {  };"]
378 -> 379 [label="void initial_control();"]
379 -> 380 [label="void control(_Bool clock, _Bool reset, unsigned char in, _Bool *Lcmd, _Bool *Ucmd, _Bool *Ncmd, _Bool *Ccmd);"]
380 -> 381 [label="_Bool isUpper(unsigned char in);"]
381 -> 382 [label="unsigned char toLower(unsigned char in);"]
382 -> 383 [label="unsigned char toUpper(unsigned char in);"]
383 -> 384 [label="unsigned char changeCase(unsigned char in);"]
384 -> 385 [label="void transform(unsigned char in, _Bool Lcmd, _Bool Ucmd, _Bool Ncmd, _Bool Ccmd, unsigned char *out);"]
385 -> 386 [label="struct state_elements_main {   unsigned char regIn;   unsigned char dataOut; } ;"]
386 -> 387 [label="struct state_elements_main smain = {  };"]
387 -> 388 [label="void initial();"]
388 -> 389 [label="void vlunc(_Bool clock, _Bool reset, unsigned char dataIn, unsigned char *dataOut);"]
389 -> 390 [label="void main();"]
390 -> 172 [label="Function start dummy edge"]
172 -> 173 [label="_Bool clock;"]
173 -> 174 [label="_Bool reset;"]
174 -> 175 [label="unsigned char dataIn;"]
175 -> 176 [label="unsigned char dataOut;"]
176 -> 177 [label="initial();" style="dotted" arrowhead="empty"]
177 -> 178 [label="initial_control();" style="dotted" arrowhead="empty"]
178 -> 179 [label="while"]
179 -> 180 [label=""]
180 -> 182 [label="dataIn = nondet_char();"]
182 -> 183 [label="vlunc(clock, reset, dataIn, &dataOut);" style="dotted" arrowhead="empty"]
183 -> 179 [label=""]}
subgraph cluster_toLower {
label="toLower()"
75 -> 76 [label="Function start dummy edge"]
76 -> 77 [label="unsigned char tolower;"]
77 -> 81 [label="_Bool __CPAchecker_TMP_0;"]
81 -> 82 [label="__CPAchecker_TMP_0 = isUpper(in);" style="dotted" arrowhead="empty"]
82 -> 80 [label="[__CPAchecker_TMP_0 == 0]"]
82 -> 79 [label="[!(__CPAchecker_TMP_0 == 0)]"]
79 -> 83 [label="tolower = in + 32;"]
83 -> 78 [label=""]
78 -> 74 [label="return tolower;"]
80 -> 84 [label="tolower = in;"]
84 -> 78 [label=""]}
subgraph cluster_toUpper {
label="toUpper()"
94 -> 91 [label="[__CPAchecker_TMP_0 == 0]"]
94 -> 92 [label="[!(__CPAchecker_TMP_0 == 0)]"]
92 -> 96 [label="toupper = in;"]
96 -> 90 [label=""]
90 -> 86 [label="return toupper;"]
91 -> 95 [label="toupper = in - 32;"]
95 -> 90 [label=""]
87 -> 88 [label="Function start dummy edge"]
88 -> 89 [label="unsigned char toupper;"]
89 -> 93 [label="_Bool __CPAchecker_TMP_0;"]
93 -> 94 [label="__CPAchecker_TMP_0 = isUpper(in);" style="dotted" arrowhead="empty"]}
subgraph cluster_transform {
label="transform()"
112 -> 113 [label="Function start dummy edge"]
113 -> 114 [label="int __CPAchecker_TMP_0;"]
114 -> 116 [label="[Lcmd == 0]"]
114 -> 115 [label="[!(Lcmd == 0)]"]
115 -> 117 [label="__CPAchecker_TMP_0 = toLower(in);" style="dotted" arrowhead="empty"]
121 -> 117 [label="__CPAchecker_TMP_0 = __CPAchecker_TMP_1;"]
117 -> 130 [label="*out = __CPAchecker_TMP_0;"]
130 -> 111 [label="default return"]
116 -> 118 [label="int __CPAchecker_TMP_1;"]
118 -> 120 [label="[Ucmd == 0]"]
118 -> 119 [label="[!(Ucmd == 0)]"]
119 -> 121 [label="__CPAchecker_TMP_1 = toUpper(in);" style="dotted" arrowhead="empty"]
120 -> 122 [label="int __CPAchecker_TMP_2;"]
122 -> 124 [label="[Ncmd == 0]"]
122 -> 123 [label="[!(Ncmd == 0)]"]
123 -> 125 [label="__CPAchecker_TMP_2 = in;"]
125 -> 121 [label="__CPAchecker_TMP_1 = __CPAchecker_TMP_2;"]
124 -> 126 [label="int __CPAchecker_TMP_3;"]
126 -> 128 [label="[Ccmd == 0]"]
126 -> 127 [label="[!(Ccmd == 0)]"]
127 -> 129 [label="__CPAchecker_TMP_3 = changeCase(in);" style="dotted" arrowhead="empty"]
129 -> 125 [label="__CPAchecker_TMP_2 = __CPAchecker_TMP_3;"]
128 -> 129 [label="__CPAchecker_TMP_3 = 0;"]}
subgraph cluster_vlunc {
label="vlunc()"
137 -> 138 [label="Function start dummy edge"]
138 -> 139 [label="unsigned char transformed;"]
139 -> 140 [label="_Bool Lcmd;"]
140 -> 141 [label="_Bool Ucmd;"]
141 -> 142 [label="_Bool Ncmd;"]
142 -> 143 [label="_Bool Ccmd;"]
143 -> 144 [label="control(clock, reset, smain.regIn, &Lcmd, &Ucmd, &Ncmd, &Ccmd);" style="dotted" arrowhead="empty"]
144 -> 145 [label="transform(smain.regIn, Lcmd, Ucmd, Ncmd, Ccmd, &transformed);" style="dotted" arrowhead="empty"]
145 -> 148 [label="[reset == 0]"]
145 -> 147 [label="[!(reset == 0)]"]
147 -> 149 [label="smain.dataOut = 0;"]
149 -> 150 [label="smain.regIn = 0;"]
150 -> 146 [label=""]
146 -> 153 [label="*dataOut = smain.dataOut;"]
153 -> 154 [label="void __CPAchecker_TMP_1;"]
154 -> 162 [label="[Lcmd == 1]"]
154 -> 161 [label="[!(Lcmd == 1)]"]
161 -> 163 [label="[Lcmd == 1]"]
161 -> 160 [label="[!(Lcmd == 1)]"]
160 -> 164 [label="[Lcmd == 1]"]
160 -> 159 [label="[!(Lcmd == 1)]"]
159 -> 165 [label="[Ucmd == 1]"]
159 -> 158 [label="[!(Ucmd == 1)]"]
158 -> 166 [label="[Ucmd == 1]"]
158 -> 157 [label="[!(Ucmd == 1)]"]
157 -> 167 [label="[Ccmd == 1]"]
157 -> 155 [label="[!(Ccmd == 1)]"]
155 -> 168 [label="0;"]
168 -> 169 [label="0;"]
169 -> 136 [label="default return"]
167 -> 156 [label="[Ncmd == 1]"]
167 -> 155 [label="[!(Ncmd == 1)]"]
156 -> 168 [label="__assert_fail(\"!(Lcmd==1 && Ucmd==1 || Lcmd==1 && Ccmd==1 || Lcmd==1 && Ncmd==1 || Ucmd==1 && Ccmd==1 || Ucmd==1 && Ncmd==1 || Ccmd==1 && Ncmd==1)\", \"main.c\", 172, \"__PRETTY_FUNCTION__\");"]
166 -> 156 [label="[Ncmd == 1]"]
166 -> 157 [label="[!(Ncmd == 1)]"]
165 -> 156 [label="[Ccmd == 1]"]
165 -> 158 [label="[!(Ccmd == 1)]"]
164 -> 156 [label="[Ncmd == 1]"]
164 -> 159 [label="[!(Ncmd == 1)]"]
163 -> 156 [label="[Ccmd == 1]"]
163 -> 160 [label="[!(Ccmd == 1)]"]
162 -> 156 [label="[Ucmd == 1]"]
162 -> 161 [label="[!(Ucmd == 1)]"]
148 -> 151 [label="smain.dataOut = transformed;"]
151 -> 152 [label="smain.regIn = dataIn;"]
152 -> 146 [label=""]}
176 -> 132 [label="initial()"]
131 -> 177 [label="Return edge from initial to main"]
177 -> 1 [label="initial_control()"]
0 -> 178 [label="Return edge from initial_control to main"]
182 -> 137 [label="vlunc(clock, reset, dataIn, &dataOut)"]
143 -> 9 [label="control(clock, reset, smain.regIn, &Lcmd, &Ucmd, &Ncmd, &Ccmd)"]
8 -> 144 [label="Return edge from control to vlunc"]
144 -> 112 [label="transform(smain.regIn, Lcmd, Ucmd, Ncmd, Ccmd, &transformed)"]
115 -> 75 [label="toLower(in)"]
81 -> 69 [label="isUpper(in)"]
68 -> 82 [label="Return edge from isUpper to toLower"]
68 -> 94 [label="Return edge from isUpper to toUpper"]
86 -> 121 [label="Return edge from toUpper to transform"]
111 -> 145 [label="Return edge from transform to vlunc"]
136 -> 183 [label="Return edge from vlunc to main"]
74 -> 117 [label="Return edge from toLower to transform"]
119 -> 87 [label="toUpper(in)"]
93 -> 69 [label="isUpper(in)"]
127 -> 99 [label="changeCase(in)"]
98 -> 129 [label="Return edge from changeCase to transform"]}