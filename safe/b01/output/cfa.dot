digraph CFA {
95 [shape="circle" label="N95\n227"]
118 [shape="circle" label="N118\n226"]
119 [shape="circle" label="N119\n225"]
120 [shape="circle" label="N120\n224"]
121 [shape="circle" label="N121\n223"]
122 [shape="circle" label="N122\n222"]
123 [shape="circle" label="N123\n221"]
124 [shape="circle" label="N124\n220"]
125 [shape="circle" label="N125\n219"]
126 [shape="circle" label="N126\n218"]
127 [shape="circle" label="N127\n217"]
128 [shape="circle" label="N128\n216"]
129 [shape="circle" label="N129\n215"]
130 [shape="circle" label="N130\n214"]
131 [shape="circle" label="N131\n213"]
132 [shape="circle" label="N132\n212"]
133 [shape="circle" label="N133\n211"]
134 [shape="circle" label="N134\n210"]
135 [shape="circle" label="N135\n209"]
136 [shape="circle" label="N136\n208"]
137 [shape="circle" label="N137\n207"]
138 [shape="circle" label="N138\n206"]
139 [shape="circle" label="N139\n205"]
140 [shape="circle" label="N140\n204"]
141 [shape="circle" label="N141\n203"]
142 [shape="circle" label="N142\n202"]
143 [shape="circle" label="N143\n201"]
144 [shape="circle" label="N144\n200"]
145 [shape="circle" label="N145\n199"]
146 [shape="circle" label="N146\n198"]
147 [shape="circle" label="N147\n197"]
148 [shape="circle" label="N148\n196"]
149 [shape="circle" label="N149\n195"]
150 [shape="circle" label="N150\n194"]
151 [shape="circle" label="N151\n193"]
152 [shape="circle" label="N152\n192"]
153 [shape="circle" label="N153\n191"]
154 [shape="circle" label="N154\n190"]
155 [shape="circle" label="N155\n189"]
156 [shape="circle" label="N156\n188"]
157 [shape="circle" label="N157\n187"]
158 [shape="circle" label="N158\n186"]
159 [shape="circle" label="N159\n185"]
160 [shape="circle" label="N160\n184"]
161 [shape="circle" label="N161\n183"]
162 [shape="circle" label="N162\n182"]
163 [shape="circle" label="N163\n181"]
164 [shape="circle" label="N164\n180"]
165 [shape="circle" label="N165\n179"]
166 [shape="circle" label="N166\n178"]
167 [shape="circle" label="N167\n177"]
168 [shape="circle" label="N168\n176"]
169 [shape="circle" label="N169\n175"]
170 [shape="circle" label="N170\n174"]
171 [shape="circle" label="N171\n173"]
172 [shape="circle" label="N172\n172"]
173 [shape="circle" label="N173\n171"]
174 [shape="circle" label="N174\n170"]
175 [shape="circle" label="N175\n169"]
176 [shape="circle" label="N176\n168"]
177 [shape="circle" label="N177\n167"]
178 [shape="circle" label="N178\n166"]
179 [shape="circle" label="N179\n165"]
180 [shape="circle" label="N180\n164"]
181 [shape="circle" label="N181\n163"]
182 [shape="circle" label="N182\n162"]
183 [shape="circle" label="N183\n161"]
184 [shape="circle" label="N184\n160"]
185 [shape="circle" label="N185\n159"]
186 [shape="circle" label="N186\n158"]
187 [shape="circle" label="N187\n157"]
188 [shape="circle" label="N188\n156"]
189 [shape="circle" label="N189\n155"]
190 [shape="circle" label="N190\n154"]
191 [shape="circle" label="N191\n153"]
192 [shape="circle" label="N192\n152"]
193 [shape="circle" label="N193\n151"]
194 [shape="circle" label="N194\n150"]
195 [shape="circle" label="N195\n149"]
196 [shape="circle" label="N196\n148"]
197 [shape="circle" label="N197\n147"]
198 [shape="circle" label="N198\n146"]
199 [shape="circle" label="N199\n145"]
200 [shape="circle" label="N200\n144"]
201 [shape="circle" label="N201\n143"]
202 [shape="circle" label="N202\n142"]
203 [shape="circle" label="N203\n141"]
204 [shape="circle" label="N204\n140"]
205 [shape="circle" label="N205\n139"]
206 [shape="circle" label="N206\n138"]
207 [shape="circle" label="N207\n137"]
208 [shape="circle" label="N208\n136"]
209 [shape="circle" label="N209\n135"]
210 [shape="circle" label="N210\n134"]
211 [shape="circle" label="N211\n133"]
212 [shape="circle" label="N212\n132"]
213 [shape="circle" label="N213\n131"]
214 [shape="circle" label="N214\n130"]
215 [shape="circle" label="N215\n129"]
216 [shape="circle" label="N216\n128"]
217 [shape="circle" label="N217\n127"]
218 [shape="circle" label="N218\n126"]
219 [shape="circle" label="N219\n125"]
220 [shape="circle" label="N220\n124"]
221 [shape="circle" label="N221\n123"]
222 [shape="circle" label="N222\n122"]
223 [shape="circle" label="N223\n121"]
224 [shape="circle" label="N224\n120"]
225 [shape="circle" label="N225\n119"]
226 [shape="circle" label="N226\n118"]
227 [shape="circle" label="N227\n117"]
228 [shape="circle" label="N228\n116"]
229 [shape="circle" label="N229\n115"]
230 [shape="circle" label="N230\n114"]
231 [shape="circle" label="N231\n113"]
232 [shape="circle" label="N232\n112"]
233 [shape="circle" label="N233\n111"]
234 [shape="circle" label="N234\n110"]
235 [shape="circle" label="N235\n109"]
236 [shape="circle" label="N236\n108"]
237 [shape="circle" label="N237\n107"]
238 [shape="circle" label="N238\n106"]
239 [shape="circle" label="N239\n105"]
240 [shape="circle" label="N240\n104"]
241 [shape="circle" label="N241\n103"]
242 [shape="circle" label="N242\n102"]
243 [shape="circle" label="N243\n101"]
244 [shape="circle" label="N244\n100"]
245 [shape="circle" label="N245\n99"]
246 [shape="circle" label="N246\n98"]
247 [shape="circle" label="N247\n97"]
248 [shape="circle" label="N248\n96"]
249 [shape="circle" label="N249\n95"]
250 [shape="circle" label="N250\n94"]
251 [shape="circle" label="N251\n93"]
252 [shape="circle" label="N252\n92"]
253 [shape="circle" label="N253\n91"]
254 [shape="circle" label="N254\n90"]
255 [shape="circle" label="N255\n89"]
256 [shape="circle" label="N256\n88"]
257 [shape="circle" label="N257\n87"]
258 [shape="circle" label="N258\n86"]
259 [shape="circle" label="N259\n85"]
260 [shape="circle" label="N260\n84"]
261 [shape="circle" label="N261\n83"]
262 [shape="circle" label="N262\n82"]
263 [shape="circle" label="N263\n81"]
264 [shape="circle" label="N264\n80"]
265 [shape="circle" label="N265\n79"]
266 [shape="circle" label="N266\n78"]
267 [shape="circle" label="N267\n77"]
268 [shape="circle" label="N268\n76"]
269 [shape="circle" label="N269\n75"]
270 [shape="circle" label="N270\n74"]
271 [shape="circle" label="N271\n73"]
272 [shape="circle" label="N272\n72"]
273 [shape="circle" label="N273\n71"]
274 [shape="circle" label="N274\n70"]
275 [shape="circle" label="N275\n69"]
276 [shape="circle" label="N276\n68"]
277 [shape="circle" label="N277\n67"]
278 [shape="circle" label="N278\n66"]
279 [shape="circle" label="N279\n65"]
280 [shape="circle" label="N280\n64"]
281 [shape="circle" label="N281\n63"]
282 [shape="circle" label="N282\n62"]
283 [shape="circle" label="N283\n61"]
284 [shape="circle" label="N284\n60"]
285 [shape="circle" label="N285\n59"]
286 [shape="circle" label="N286\n58"]
287 [shape="circle" label="N287\n57"]
288 [shape="circle" label="N288\n56"]
289 [shape="circle" label="N289\n55"]
290 [shape="circle" label="N290\n54"]
291 [shape="circle" label="N291\n53"]
292 [shape="circle" label="N292\n52"]
293 [shape="circle" label="N293\n51"]
294 [shape="circle" label="N294\n50"]
295 [shape="circle" label="N295\n49"]
296 [shape="circle" label="N296\n48"]
297 [shape="circle" label="N297\n47"]
298 [shape="circle" label="N298\n46"]
299 [shape="circle" label="N299\n45"]
300 [shape="circle" label="N300\n44"]
301 [shape="circle" label="N301\n43"]
302 [shape="circle" label="N302\n42"]
303 [shape="circle" label="N303\n41"]
304 [shape="circle" label="N304\n40"]
305 [shape="circle" label="N305\n39"]
306 [shape="circle" label="N306\n38"]
307 [shape="circle" label="N307\n37"]
308 [shape="circle" label="N308\n36"]
309 [shape="circle" label="N309\n35"]
310 [shape="circle" label="N310\n34"]
311 [shape="circle" label="N311\n33"]
312 [shape="circle" label="N312\n32"]
313 [shape="circle" label="N313\n31"]
314 [shape="circle" label="N314\n30"]
315 [shape="circle" label="N315\n29"]
316 [shape="circle" label="N316\n28"]
317 [shape="circle" label="N317\n27"]
318 [shape="circle" label="N318\n26"]
319 [shape="circle" label="N319\n25"]
320 [shape="circle" label="N320\n24"]
321 [shape="circle" label="N321\n23"]
322 [shape="circle" label="N322\n22"]
323 [shape="circle" label="N323\n21"]
96 [shape="circle" label="N96\n20"]
97 [shape="circle" label="N97\n19"]
98 [shape="circle" label="N98\n18"]
99 [shape="circle" label="N99\n17"]
100 [shape="circle" label="N100\n16"]
101 [shape="circle" label="N101\n15"]
1 [shape="circle" label="N1\n5"]
2 [shape="circle" label="N2\n4"]
3 [shape="circle" label="N3\n3"]
4 [shape="circle" label="N4\n2"]
5 [shape="circle" label="N5\n1"]
0 [shape="circle" label="N0\n0"]
102 [shape="circle" label="N102\n14"]
103 [shape="doublecircle" label="N103\n13"]
104 [shape="circle" label="N104\n12"]
106 [shape="circle" label="N106\n11"]
107 [shape="circle" label="N107\n10"]
7 [shape="circle" label="N7\n78"]
8 [shape="circle" label="N8\n77"]
9 [shape="diamond" label="N9\n76"]
13 [shape="diamond" label="N13\n75"]
23 [shape="diamond" label="N23\n74"]
33 [shape="diamond" label="N33\n73"]
43 [shape="diamond" label="N43\n72"]
53 [shape="diamond" label="N53\n71"]
63 [shape="diamond" label="N63\n70"]
73 [shape="diamond" label="N73\n69"]
83 [shape="circle" label="N83\n68"]
10 [shape="circle" label="N10\n3"]
92 [shape="circle" label="N92\n2"]
93 [shape="circle" label="N93\n1"]
6 [shape="circle" label="N6\n0"]
112 [shape="circle" label="N112\n6"]
113 [shape="diamond" label="N113\n5"]
115 [shape="circle" label="N115\n4"]
116 [shape="circle" label="N116\n2"]
117 [shape="circle" label="N117\n1"]
109 [shape="circle" label="N109\n0"]
114 [shape="circle" label="N114\n3"]
111 [shape="circle" label="N111\n7"]
108 [shape="diamond" label="N108\n9"]
110 [shape="circle" label="N110\n8"]
82 [shape="diamond" label="N82\n67"]
85 [shape="circle" label="N85\n66"]
87 [shape="circle" label="N87\n65"]
84 [shape="circle" label="N84\n62"]
89 [shape="circle" label="N89\n61"]
90 [shape="circle" label="N90\n60"]
86 [shape="circle" label="N86\n64"]
88 [shape="circle" label="N88\n63"]
72 [shape="diamond" label="N72\n59"]
75 [shape="circle" label="N75\n58"]
77 [shape="circle" label="N77\n57"]
74 [shape="circle" label="N74\n54"]
79 [shape="circle" label="N79\n53"]
80 [shape="circle" label="N80\n52"]
76 [shape="circle" label="N76\n56"]
78 [shape="circle" label="N78\n55"]
62 [shape="diamond" label="N62\n51"]
65 [shape="circle" label="N65\n50"]
67 [shape="circle" label="N67\n49"]
64 [shape="circle" label="N64\n46"]
69 [shape="circle" label="N69\n45"]
70 [shape="circle" label="N70\n44"]
66 [shape="circle" label="N66\n48"]
68 [shape="circle" label="N68\n47"]
52 [shape="diamond" label="N52\n43"]
55 [shape="circle" label="N55\n42"]
57 [shape="circle" label="N57\n41"]
54 [shape="circle" label="N54\n38"]
59 [shape="circle" label="N59\n37"]
60 [shape="circle" label="N60\n36"]
56 [shape="circle" label="N56\n40"]
58 [shape="circle" label="N58\n39"]
42 [shape="diamond" label="N42\n35"]
45 [shape="circle" label="N45\n34"]
47 [shape="circle" label="N47\n33"]
44 [shape="circle" label="N44\n30"]
49 [shape="circle" label="N49\n29"]
50 [shape="circle" label="N50\n28"]
46 [shape="circle" label="N46\n32"]
48 [shape="circle" label="N48\n31"]
32 [shape="diamond" label="N32\n27"]
35 [shape="circle" label="N35\n26"]
37 [shape="circle" label="N37\n25"]
34 [shape="circle" label="N34\n22"]
39 [shape="circle" label="N39\n21"]
40 [shape="circle" label="N40\n20"]
36 [shape="circle" label="N36\n24"]
38 [shape="circle" label="N38\n23"]
22 [shape="diamond" label="N22\n19"]
25 [shape="circle" label="N25\n18"]
27 [shape="circle" label="N27\n17"]
24 [shape="circle" label="N24\n14"]
29 [shape="circle" label="N29\n13"]
30 [shape="circle" label="N30\n12"]
26 [shape="circle" label="N26\n16"]
28 [shape="circle" label="N28\n15"]
12 [shape="diamond" label="N12\n11"]
15 [shape="circle" label="N15\n10"]
17 [shape="circle" label="N17\n9"]
14 [shape="circle" label="N14\n6"]
19 [shape="circle" label="N19\n5"]
20 [shape="circle" label="N20\n4"]
16 [shape="circle" label="N16\n8"]
18 [shape="circle" label="N18\n7"]
node [shape="circle"]
subgraph cluster_b01 {
label="b01()"
7 -> 8 [label="Function start dummy edge"]
8 -> 9 [label="switch (smain.stato)"]
9 -> 12 [label="[(smain.stato) == 0]"]
9 -> 13 [label="[!((smain.stato) == 0)]"]
13 -> 22 [label="[(smain.stato) == 3]"]
13 -> 23 [label="[!((smain.stato) == 3)]"]
23 -> 32 [label="[(smain.stato) == 1]"]
23 -> 33 [label="[!((smain.stato) == 1)]"]
33 -> 42 [label="[(smain.stato) == 4]"]
33 -> 43 [label="[!((smain.stato) == 4)]"]
43 -> 52 [label="[(smain.stato) == 2]"]
43 -> 53 [label="[!((smain.stato) == 2)]"]
53 -> 62 [label="[(smain.stato) == 5]"]
53 -> 63 [label="[!((smain.stato) == 5)]"]
63 -> 72 [label="[(smain.stato) == 6]"]
63 -> 73 [label="[!((smain.stato) == 6)]"]
73 -> 82 [label="[(smain.stato) == 7]"]
73 -> 83 [label="[!((smain.stato) == 7)]"]
83 -> 10 [label=""]
10 -> 92 [label="*OUTP = smain.OUTP;"]
92 -> 93 [label="*OVERFLW = smain.OVERFLW;"]
93 -> 6 [label="default return"]
82 -> 86 [label="[(LINE1 | LINE2) == 0]"]
82 -> 85 [label="[!((LINE1 | LINE2) == 0)]"]
85 -> 87 [label="smain.stato = e;"]
87 -> 84 [label=""]
84 -> 89 [label="smain.OUTP = ~(LINE1 ^ LINE2);"]
89 -> 90 [label="smain.OVERFLW = 0;"]
90 -> 10 [label="break"]
86 -> 88 [label="smain.stato = a;"]
88 -> 84 [label=""]
72 -> 76 [label="[(LINE1 & LINE2) == 0]"]
72 -> 75 [label="[!((LINE1 & LINE2) == 0)]"]
75 -> 77 [label="smain.stato = e;"]
77 -> 74 [label=""]
74 -> 79 [label="smain.OUTP = LINE1 ^ LINE2;"]
79 -> 80 [label="smain.OVERFLW = 0;"]
80 -> 10 [label="break"]
76 -> 78 [label="smain.stato = a;"]
78 -> 74 [label=""]
62 -> 66 [label="[(LINE1 | LINE2) == 0]"]
62 -> 65 [label="[!((LINE1 | LINE2) == 0)]"]
65 -> 67 [label="smain.stato = wf1;"]
67 -> 64 [label=""]
64 -> 69 [label="smain.OUTP = ~(LINE1 ^ LINE2);"]
69 -> 70 [label="smain.OVERFLW = 0;"]
70 -> 10 [label="break"]
66 -> 68 [label="smain.stato = wf0;"]
68 -> 64 [label=""]
52 -> 56 [label="[(LINE1 & LINE2) == 0]"]
52 -> 55 [label="[!((LINE1 & LINE2) == 0)]"]
55 -> 57 [label="smain.stato = wf1;"]
57 -> 54 [label=""]
54 -> 59 [label="smain.OUTP = LINE1 ^ LINE2;"]
59 -> 60 [label="smain.OVERFLW = 0;"]
60 -> 10 [label="break"]
56 -> 58 [label="smain.stato = wf0;"]
58 -> 54 [label=""]
42 -> 46 [label="[(LINE1 | LINE2) == 0]"]
42 -> 45 [label="[!((LINE1 | LINE2) == 0)]"]
45 -> 47 [label="smain.stato = g;"]
47 -> 44 [label=""]
44 -> 49 [label="smain.OUTP = ~(LINE1 ^ LINE2);"]
49 -> 50 [label="smain.OVERFLW = 0;"]
50 -> 10 [label="break"]
46 -> 48 [label="smain.stato = c;"]
48 -> 44 [label=""]
32 -> 36 [label="[(LINE1 & LINE2) == 0]"]
32 -> 35 [label="[!((LINE1 & LINE2) == 0)]"]
35 -> 37 [label="smain.stato = g;"]
37 -> 34 [label=""]
34 -> 39 [label="smain.OUTP = LINE1 ^ LINE2;"]
39 -> 40 [label="smain.OVERFLW = 0;"]
40 -> 10 [label="break"]
36 -> 38 [label="smain.stato = c;"]
38 -> 34 [label=""]
22 -> 26 [label="[(LINE1 & LINE2) == 0]"]
22 -> 25 [label="[!((LINE1 & LINE2) == 0)]"]
25 -> 27 [label="smain.stato = f;"]
27 -> 24 [label=""]
24 -> 29 [label="smain.OUTP = LINE1 ^ LINE2;"]
29 -> 30 [label="smain.OVERFLW = 1;"]
30 -> 10 [label="break"]
26 -> 28 [label="smain.stato = b;"]
28 -> 24 [label=""]
12 -> 16 [label="[(LINE1 & LINE2) == 0]"]
12 -> 15 [label="[!((LINE1 & LINE2) == 0)]"]
15 -> 17 [label="smain.stato = f;"]
17 -> 14 [label=""]
14 -> 19 [label="smain.OUTP = LINE1 ^ LINE2;"]
19 -> 20 [label="smain.OVERFLW = 0;"]
20 -> 10 [label="break"]
16 -> 18 [label="smain.stato = b;"]
18 -> 14 [label=""]}
subgraph cluster_initial {
label="initial()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="smain.stato = a;"]
3 -> 4 [label="smain.OUTP = 0;"]
4 -> 5 [label="smain.OVERFLW = 0;"]
5 -> 0 [label="default return"]}
subgraph cluster_main {
label="main()"
95 -> 118 [label="INIT GLOBAL VARS"]
118 -> 119 [label="typedef unsigned long int size_t;"]
119 -> 120 [label="typedef unsigned char __u_char;"]
120 -> 121 [label="typedef unsigned short int __u_short;"]
121 -> 122 [label="typedef unsigned int __u_int;"]
122 -> 123 [label="typedef unsigned long int __u_long;"]
123 -> 124 [label="typedef signed char __int8_t;"]
124 -> 125 [label="typedef unsigned char __uint8_t;"]
125 -> 126 [label="typedef signed short int __int16_t;"]
126 -> 127 [label="typedef unsigned short int __uint16_t;"]
127 -> 128 [label="typedef signed int __int32_t;"]
128 -> 129 [label="typedef unsigned int __uint32_t;"]
129 -> 130 [label="typedef signed long int __int64_t;"]
130 -> 131 [label="typedef unsigned long int __uint64_t;"]
131 -> 132 [label="typedef long int __quad_t;"]
132 -> 133 [label="typedef unsigned long int __u_quad_t;"]
133 -> 134 [label="typedef unsigned long int __dev_t;"]
134 -> 135 [label="typedef unsigned int __uid_t;"]
135 -> 136 [label="typedef unsigned int __gid_t;"]
136 -> 137 [label="typedef unsigned long int __ino_t;"]
137 -> 138 [label="typedef unsigned long int __ino64_t;"]
138 -> 139 [label="typedef unsigned int __mode_t;"]
139 -> 140 [label="typedef unsigned long int __nlink_t;"]
140 -> 141 [label="typedef long int __off_t;"]
141 -> 142 [label="typedef long int __off64_t;"]
142 -> 143 [label="typedef int __pid_t;"]
143 -> 144 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
144 -> 145 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
145 -> 146 [label="typedef long int __clock_t;"]
146 -> 147 [label="typedef unsigned long int __rlim_t;"]
147 -> 148 [label="typedef unsigned long int __rlim64_t;"]
148 -> 149 [label="typedef unsigned int __id_t;"]
149 -> 150 [label="typedef long int __time_t;"]
150 -> 151 [label="typedef unsigned int __useconds_t;"]
151 -> 152 [label="typedef long int __suseconds_t;"]
152 -> 153 [label="typedef int __daddr_t;"]
153 -> 154 [label="typedef int __key_t;"]
154 -> 155 [label="typedef int __clockid_t;"]
155 -> 156 [label="typedef void *__timer_t;"]
156 -> 157 [label="typedef long int __blksize_t;"]
157 -> 158 [label="typedef long int __blkcnt_t;"]
158 -> 159 [label="typedef long int __blkcnt64_t;"]
159 -> 160 [label="typedef unsigned long int __fsblkcnt_t;"]
160 -> 161 [label="typedef unsigned long int __fsblkcnt64_t;"]
161 -> 162 [label="typedef unsigned long int __fsfilcnt_t;"]
162 -> 163 [label="typedef unsigned long int __fsfilcnt64_t;"]
163 -> 164 [label="typedef long int __fsword_t;"]
164 -> 165 [label="typedef long int __ssize_t;"]
165 -> 166 [label="typedef long int __syscall_slong_t;"]
166 -> 167 [label="typedef unsigned long int __syscall_ulong_t;"]
167 -> 168 [label="typedef __off64_t __loff_t;"]
168 -> 169 [label="typedef __quad_t *__qaddr_t;"]
169 -> 170 [label="typedef char *__caddr_t;"]
170 -> 171 [label="typedef long int __intptr_t;"]
171 -> 172 [label="typedef unsigned int __socklen_t;"]
172 -> 173 [label="struct _IO_FILE ;"]
173 -> 174 [label="typedef struct _IO_FILE FILE;"]
174 -> 175 [label="typedef struct _IO_FILE __FILE;"]
175 -> 176 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
176 -> 177 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
177 -> 178 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
178 -> 179 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
179 -> 180 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
180 -> 181 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
181 -> 182 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
182 -> 183 [label="typedef __builtin_va_list __gnuc_va_list;"]
183 -> 184 [label="struct _IO_jump_t ;"]
184 -> 185 [label="typedef void _IO_lock_t;"]
185 -> 186 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
186 -> 187 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
187 -> 188 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
188 -> 189 [label="typedef struct _IO_FILE _IO_FILE;"]
189 -> 190 [label="struct _IO_FILE_plus ;"]
190 -> 191 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
191 -> 192 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
192 -> 193 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
193 -> 194 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
194 -> 195 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
195 -> 196 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
196 -> 197 [label="typedef int __io_close_fn(void *__cookie);"]
197 -> 198 [label="int __underflow(_IO_FILE *);"]
198 -> 199 [label="int __uflow(_IO_FILE *);"]
199 -> 200 [label="int __overflow(_IO_FILE *, int);"]
200 -> 201 [label="int _IO_getc(_IO_FILE *__fp);"]
201 -> 202 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
202 -> 203 [label="int _IO_feof(_IO_FILE *__fp);"]
203 -> 204 [label="int _IO_ferror(_IO_FILE *__fp);"]
204 -> 205 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
205 -> 206 [label="void _IO_flockfile(_IO_FILE *);"]
206 -> 207 [label="void _IO_funlockfile(_IO_FILE *);"]
207 -> 208 [label="int _IO_ftrylockfile(_IO_FILE *);"]
208 -> 209 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
209 -> 210 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
210 -> 211 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
211 -> 212 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
212 -> 213 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
213 -> 214 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
214 -> 215 [label="void _IO_free_backup_area(_IO_FILE *);"]
215 -> 216 [label="typedef __gnuc_va_list va_list;"]
216 -> 217 [label="typedef __off_t off_t;"]
217 -> 218 [label="typedef __ssize_t ssize_t;"]
218 -> 219 [label="typedef _G_fpos_t fpos_t;"]
219 -> 220 [label="extern struct _IO_FILE *stdin;"]
220 -> 221 [label="extern struct _IO_FILE *stdout;"]
221 -> 222 [label="extern struct _IO_FILE *stderr;"]
222 -> 223 [label="int remove(const char *__filename);"]
223 -> 224 [label="int rename(const char *__old, const char *__new);"]
224 -> 225 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
225 -> 226 [label="FILE * tmpfile();"]
226 -> 227 [label="char * tmpnam(char *__s);"]
227 -> 228 [label="char * tmpnam_r(char *__s);"]
228 -> 229 [label="char * tempnam(const char *__dir, const char *__pfx);"]
229 -> 230 [label="int fclose(FILE *__stream);"]
230 -> 231 [label="int fflush(FILE *__stream);"]
231 -> 232 [label="int fflush_unlocked(FILE *__stream);"]
232 -> 233 [label="FILE * fopen(const char *__filename, const char *__modes);"]
233 -> 234 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
234 -> 235 [label="FILE * fdopen(int __fd, const char *__modes);"]
235 -> 236 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
236 -> 237 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
237 -> 238 [label="void setbuf(FILE *__stream, char *__buf);"]
238 -> 239 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
239 -> 240 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
240 -> 241 [label="void setlinebuf(FILE *__stream);"]
241 -> 242 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
242 -> 243 [label="int printf(const char *__format, ...);"]
243 -> 244 [label="int sprintf(char *__s, const char *__format, ...);"]
244 -> 245 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
245 -> 246 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
246 -> 247 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
247 -> 248 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
248 -> 249 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
249 -> 250 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
250 -> 251 [label="int dprintf(int __fd, const char *__fmt, ...);"]
251 -> 252 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
252 -> 253 [label="int scanf(const char *__format, ...);"]
253 -> 254 [label="int sscanf(const char *__s, const char *__format, ...);"]
254 -> 255 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
255 -> 256 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
256 -> 257 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
257 -> 258 [label="int fgetc(FILE *__stream);"]
258 -> 259 [label="int getc(FILE *__stream);"]
259 -> 260 [label="int getchar();"]
260 -> 261 [label="int getc_unlocked(FILE *__stream);"]
261 -> 262 [label="int getchar_unlocked();"]
262 -> 263 [label="int fgetc_unlocked(FILE *__stream);"]
263 -> 264 [label="int fputc(int __c, FILE *__stream);"]
264 -> 265 [label="int putc(int __c, FILE *__stream);"]
265 -> 266 [label="int putchar(int __c);"]
266 -> 267 [label="int fputc_unlocked(int __c, FILE *__stream);"]
267 -> 268 [label="int putc_unlocked(int __c, FILE *__stream);"]
268 -> 269 [label="int putchar_unlocked(int __c);"]
269 -> 270 [label="int getw(FILE *__stream);"]
270 -> 271 [label="int putw(int __w, FILE *__stream);"]
271 -> 272 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
272 -> 273 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
273 -> 274 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
274 -> 275 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
275 -> 276 [label="int fputs(const char *__s, FILE *__stream);"]
276 -> 277 [label="int puts(const char *__s);"]
277 -> 278 [label="int ungetc(int __c, FILE *__stream);"]
278 -> 279 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
279 -> 280 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
280 -> 281 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
281 -> 282 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
282 -> 283 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
283 -> 284 [label="long int ftell(FILE *__stream);"]
284 -> 285 [label="void rewind(FILE *__stream);"]
285 -> 286 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
286 -> 287 [label="__off_t  ftello(FILE *__stream);"]
287 -> 288 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
288 -> 289 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
289 -> 290 [label="void clearerr(FILE *__stream);"]
290 -> 291 [label="int feof(FILE *__stream);"]
291 -> 292 [label="int ferror(FILE *__stream);"]
292 -> 293 [label="void clearerr_unlocked(FILE *__stream);"]
293 -> 294 [label="int feof_unlocked(FILE *__stream);"]
294 -> 295 [label="int ferror_unlocked(FILE *__stream);"]
295 -> 296 [label="void perror(const char *__s);"]
296 -> 297 [label="extern int sys_nerr;"]
297 -> 298 [label="extern const const char *sys_errlist[];"]
298 -> 299 [label="int fileno(FILE *__stream);"]
299 -> 300 [label="int fileno_unlocked(FILE *__stream);"]
300 -> 301 [label="FILE * popen(const char *__command, const char *__modes);"]
301 -> 302 [label="int pclose(FILE *__stream);"]
302 -> 303 [label="char * ctermid(char *__s);"]
303 -> 304 [label="void flockfile(FILE *__stream);"]
304 -> 305 [label="int ftrylockfile(FILE *__stream);"]
305 -> 306 [label="void funlockfile(FILE *__stream);"]
306 -> 307 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
307 -> 308 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
308 -> 309 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
309 -> 310 [label="_Bool nondet_bool();"]
310 -> 311 [label="int a = 0;"]
311 -> 312 [label="int b = 1;"]
312 -> 313 [label="int c = 2;"]
313 -> 314 [label="int e = 3;"]
314 -> 315 [label="int f = 4;"]
315 -> 316 [label="int g = 5;"]
316 -> 317 [label="int wf0 = 6;"]
317 -> 318 [label="int wf1 = 7;"]
318 -> 319 [label="struct state_elements_main {   _Bool OUTP;   _Bool OVERFLW;   unsigned char stato; } ;"]
319 -> 320 [label="struct state_elements_main smain = {  };"]
320 -> 321 [label="void initial();"]
321 -> 322 [label="void b01(_Bool LINE1, _Bool LINE2, _Bool *OUTP, _Bool *OVERFLW, _Bool clock);"]
322 -> 323 [label="void main();"]
323 -> 96 [label="Function start dummy edge"]
96 -> 97 [label="_Bool LINE1;"]
97 -> 98 [label="_Bool LINE2;"]
98 -> 99 [label="_Bool OUTP;"]
99 -> 100 [label="_Bool OVERFLW;"]
100 -> 101 [label="_Bool clock;"]
101 -> 102 [label="initial();" style="dotted" arrowhead="empty"]
102 -> 103 [label="while"]
103 -> 104 [label=""]
104 -> 106 [label="LINE1 = nondet_bool();"]
106 -> 107 [label="LINE2 = nondet_bool();"]
107 -> 108 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock);" style="dotted" arrowhead="empty"]
112 -> 113 [label="void __CPAchecker_TMP_0;"]
113 -> 114 [label="[(smain.OVERFLW) == 0]"]
113 -> 115 [label="[!((smain.OVERFLW) == 0)]"]
115 -> 116 [label="__assert_fail(\"smain.OVERFLW==0\", \"main.c\", 125, \"__PRETTY_FUNCTION__\");"]
116 -> 117 [label="0;"]
117 -> 109 [label=""]
109 -> 103 [label=""]
114 -> 116 [label="0;"]
111 -> 112 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock);" style="dotted" arrowhead="empty"]
108 -> 110 [label="[(smain.OVERFLW) == 1]"]
108 -> 109 [label="[!((smain.OVERFLW) == 1)]"]
110 -> 111 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock);" style="dotted" arrowhead="empty"]}
101 -> 1 [label="initial()"]
0 -> 102 [label="Return edge from initial to main"]
107 -> 7 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock)"]
6 -> 108 [label="Return edge from b01 to main"]
6 -> 111 [label="Return edge from b01 to main"]
6 -> 112 [label="Return edge from b01 to main"]
111 -> 7 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock)"]
110 -> 7 [label="b01(LINE1, LINE2, &OUTP, &OVERFLW, clock)"]}