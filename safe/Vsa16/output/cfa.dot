digraph CFA {
151 [shape="circle" label="N151\n229"]
167 [shape="circle" label="N167\n228"]
168 [shape="circle" label="N168\n227"]
169 [shape="circle" label="N169\n226"]
170 [shape="circle" label="N170\n225"]
171 [shape="circle" label="N171\n224"]
172 [shape="circle" label="N172\n223"]
173 [shape="circle" label="N173\n222"]
174 [shape="circle" label="N174\n221"]
175 [shape="circle" label="N175\n220"]
176 [shape="circle" label="N176\n219"]
177 [shape="circle" label="N177\n218"]
178 [shape="circle" label="N178\n217"]
179 [shape="circle" label="N179\n216"]
180 [shape="circle" label="N180\n215"]
181 [shape="circle" label="N181\n214"]
182 [shape="circle" label="N182\n213"]
183 [shape="circle" label="N183\n212"]
184 [shape="circle" label="N184\n211"]
185 [shape="circle" label="N185\n210"]
186 [shape="circle" label="N186\n209"]
187 [shape="circle" label="N187\n208"]
188 [shape="circle" label="N188\n207"]
189 [shape="circle" label="N189\n206"]
190 [shape="circle" label="N190\n205"]
191 [shape="circle" label="N191\n204"]
192 [shape="circle" label="N192\n203"]
193 [shape="circle" label="N193\n202"]
194 [shape="circle" label="N194\n201"]
195 [shape="circle" label="N195\n200"]
196 [shape="circle" label="N196\n199"]
197 [shape="circle" label="N197\n198"]
198 [shape="circle" label="N198\n197"]
199 [shape="circle" label="N199\n196"]
200 [shape="circle" label="N200\n195"]
201 [shape="circle" label="N201\n194"]
202 [shape="circle" label="N202\n193"]
203 [shape="circle" label="N203\n192"]
204 [shape="circle" label="N204\n191"]
205 [shape="circle" label="N205\n190"]
206 [shape="circle" label="N206\n189"]
207 [shape="circle" label="N207\n188"]
208 [shape="circle" label="N208\n187"]
209 [shape="circle" label="N209\n186"]
210 [shape="circle" label="N210\n185"]
211 [shape="circle" label="N211\n184"]
212 [shape="circle" label="N212\n183"]
213 [shape="circle" label="N213\n182"]
214 [shape="circle" label="N214\n181"]
215 [shape="circle" label="N215\n180"]
216 [shape="circle" label="N216\n179"]
217 [shape="circle" label="N217\n178"]
218 [shape="circle" label="N218\n177"]
219 [shape="circle" label="N219\n176"]
220 [shape="circle" label="N220\n175"]
221 [shape="circle" label="N221\n174"]
222 [shape="circle" label="N222\n173"]
223 [shape="circle" label="N223\n172"]
224 [shape="circle" label="N224\n171"]
225 [shape="circle" label="N225\n170"]
226 [shape="circle" label="N226\n169"]
227 [shape="circle" label="N227\n168"]
228 [shape="circle" label="N228\n167"]
229 [shape="circle" label="N229\n166"]
230 [shape="circle" label="N230\n165"]
231 [shape="circle" label="N231\n164"]
232 [shape="circle" label="N232\n163"]
233 [shape="circle" label="N233\n162"]
234 [shape="circle" label="N234\n161"]
235 [shape="circle" label="N235\n160"]
236 [shape="circle" label="N236\n159"]
237 [shape="circle" label="N237\n158"]
238 [shape="circle" label="N238\n157"]
239 [shape="circle" label="N239\n156"]
240 [shape="circle" label="N240\n155"]
241 [shape="circle" label="N241\n154"]
242 [shape="circle" label="N242\n153"]
243 [shape="circle" label="N243\n152"]
244 [shape="circle" label="N244\n151"]
245 [shape="circle" label="N245\n150"]
246 [shape="circle" label="N246\n149"]
247 [shape="circle" label="N247\n148"]
248 [shape="circle" label="N248\n147"]
249 [shape="circle" label="N249\n146"]
250 [shape="circle" label="N250\n145"]
251 [shape="circle" label="N251\n144"]
252 [shape="circle" label="N252\n143"]
253 [shape="circle" label="N253\n142"]
254 [shape="circle" label="N254\n141"]
255 [shape="circle" label="N255\n140"]
256 [shape="circle" label="N256\n139"]
257 [shape="circle" label="N257\n138"]
258 [shape="circle" label="N258\n137"]
259 [shape="circle" label="N259\n136"]
260 [shape="circle" label="N260\n135"]
261 [shape="circle" label="N261\n134"]
262 [shape="circle" label="N262\n133"]
263 [shape="circle" label="N263\n132"]
264 [shape="circle" label="N264\n131"]
265 [shape="circle" label="N265\n130"]
266 [shape="circle" label="N266\n129"]
267 [shape="circle" label="N267\n128"]
268 [shape="circle" label="N268\n127"]
269 [shape="circle" label="N269\n126"]
270 [shape="circle" label="N270\n125"]
271 [shape="circle" label="N271\n124"]
272 [shape="circle" label="N272\n123"]
273 [shape="circle" label="N273\n122"]
274 [shape="circle" label="N274\n121"]
275 [shape="circle" label="N275\n120"]
276 [shape="circle" label="N276\n119"]
277 [shape="circle" label="N277\n118"]
278 [shape="circle" label="N278\n117"]
279 [shape="circle" label="N279\n116"]
280 [shape="circle" label="N280\n115"]
281 [shape="circle" label="N281\n114"]
282 [shape="circle" label="N282\n113"]
283 [shape="circle" label="N283\n112"]
284 [shape="circle" label="N284\n111"]
285 [shape="circle" label="N285\n110"]
286 [shape="circle" label="N286\n109"]
287 [shape="circle" label="N287\n108"]
288 [shape="circle" label="N288\n107"]
289 [shape="circle" label="N289\n106"]
290 [shape="circle" label="N290\n105"]
291 [shape="circle" label="N291\n104"]
292 [shape="circle" label="N292\n103"]
293 [shape="circle" label="N293\n102"]
294 [shape="circle" label="N294\n101"]
295 [shape="circle" label="N295\n100"]
296 [shape="circle" label="N296\n99"]
297 [shape="circle" label="N297\n98"]
298 [shape="circle" label="N298\n97"]
299 [shape="circle" label="N299\n96"]
300 [shape="circle" label="N300\n95"]
301 [shape="circle" label="N301\n94"]
302 [shape="circle" label="N302\n93"]
303 [shape="circle" label="N303\n92"]
304 [shape="circle" label="N304\n91"]
305 [shape="circle" label="N305\n90"]
306 [shape="circle" label="N306\n89"]
307 [shape="circle" label="N307\n88"]
308 [shape="circle" label="N308\n87"]
309 [shape="circle" label="N309\n86"]
310 [shape="circle" label="N310\n85"]
311 [shape="circle" label="N311\n84"]
312 [shape="circle" label="N312\n83"]
313 [shape="circle" label="N313\n82"]
314 [shape="circle" label="N314\n81"]
315 [shape="circle" label="N315\n80"]
316 [shape="circle" label="N316\n79"]
317 [shape="circle" label="N317\n78"]
318 [shape="circle" label="N318\n77"]
319 [shape="circle" label="N319\n76"]
320 [shape="circle" label="N320\n75"]
321 [shape="circle" label="N321\n74"]
322 [shape="circle" label="N322\n73"]
323 [shape="circle" label="N323\n72"]
324 [shape="circle" label="N324\n71"]
325 [shape="circle" label="N325\n70"]
326 [shape="circle" label="N326\n69"]
327 [shape="circle" label="N327\n68"]
328 [shape="circle" label="N328\n67"]
329 [shape="circle" label="N329\n66"]
330 [shape="circle" label="N330\n65"]
331 [shape="circle" label="N331\n64"]
332 [shape="circle" label="N332\n63"]
333 [shape="circle" label="N333\n62"]
334 [shape="circle" label="N334\n61"]
335 [shape="circle" label="N335\n60"]
336 [shape="circle" label="N336\n59"]
337 [shape="circle" label="N337\n58"]
338 [shape="circle" label="N338\n57"]
339 [shape="circle" label="N339\n56"]
340 [shape="circle" label="N340\n55"]
341 [shape="circle" label="N341\n54"]
342 [shape="circle" label="N342\n53"]
343 [shape="circle" label="N343\n52"]
344 [shape="circle" label="N344\n51"]
345 [shape="circle" label="N345\n50"]
346 [shape="circle" label="N346\n49"]
347 [shape="circle" label="N347\n48"]
348 [shape="circle" label="N348\n47"]
349 [shape="circle" label="N349\n46"]
350 [shape="circle" label="N350\n45"]
351 [shape="circle" label="N351\n44"]
352 [shape="circle" label="N352\n43"]
353 [shape="circle" label="N353\n42"]
354 [shape="circle" label="N354\n41"]
355 [shape="circle" label="N355\n40"]
356 [shape="circle" label="N356\n39"]
357 [shape="circle" label="N357\n38"]
358 [shape="circle" label="N358\n37"]
359 [shape="circle" label="N359\n36"]
360 [shape="circle" label="N360\n35"]
361 [shape="circle" label="N361\n34"]
362 [shape="circle" label="N362\n33"]
363 [shape="circle" label="N363\n32"]
364 [shape="circle" label="N364\n31"]
365 [shape="circle" label="N365\n30"]
366 [shape="circle" label="N366\n29"]
367 [shape="circle" label="N367\n28"]
368 [shape="circle" label="N368\n27"]
369 [shape="circle" label="N369\n26"]
370 [shape="circle" label="N370\n25"]
371 [shape="circle" label="N371\n24"]
372 [shape="circle" label="N372\n23"]
373 [shape="circle" label="N373\n22"]
374 [shape="circle" label="N374\n21"]
375 [shape="circle" label="N375\n20"]
376 [shape="circle" label="N376\n19"]
377 [shape="circle" label="N377\n18"]
378 [shape="circle" label="N378\n17"]
379 [shape="circle" label="N379\n16"]
380 [shape="circle" label="N380\n15"]
381 [shape="circle" label="N381\n14"]
152 [shape="circle" label="N152\n13"]
153 [shape="circle" label="N153\n12"]
154 [shape="circle" label="N154\n11"]
155 [shape="circle" label="N155\n10"]
156 [shape="circle" label="N156\n9"]
157 [shape="circle" label="N157\n8"]
158 [shape="circle" label="N158\n7"]
159 [shape="circle" label="N159\n6"]
1 [shape="circle" label="N1\n17"]
2 [shape="circle" label="N2\n16"]
3 [shape="circle" label="N3\n15"]
4 [shape="doublecircle" label="N4\n14"]
7 [shape="circle" label="N7\n13"]
9 [shape="circle" label="N9\n12"]
10 [shape="circle" label="N10\n11"]
11 [shape="circle" label="N11\n10"]
12 [shape="circle" label="N12\n9"]
13 [shape="circle" label="N13\n8"]
14 [shape="circle" label="N14\n7"]
15 [shape="circle" label="N15\n6"]
16 [shape="circle" label="N16\n5"]
17 [shape="circle" label="N17\n4"]
0 [shape="circle" label="N0\n3"]
160 [shape="circle" label="N160\n5"]
161 [shape="doublecircle" label="N161\n4"]
162 [shape="circle" label="N162\n3"]
164 [shape="circle" label="N164\n2"]
165 [shape="circle" label="N165\n1"]
19 [shape="circle" label="N19\n120"]
20 [shape="circle" label="N20\n119"]
21 [shape="circle" label="N21\n118"]
22 [shape="circle" label="N22\n117"]
23 [shape="circle" label="N23\n116"]
24 [shape="circle" label="N24\n115"]
25 [shape="circle" label="N25\n114"]
26 [shape="circle" label="N26\n113"]
27 [shape="diamond" label="N27\n112"]
28 [shape="diamond" label="N28\n111"]
30 [shape="circle" label="N30\n110"]
31 [shape="circle" label="N31\n108"]
32 [shape="circle" label="N32\n107"]
33 [shape="circle" label="N33\n106"]
34 [shape="diamond" label="N34\n105"]
35 [shape="diamond" label="N35\n104"]
37 [shape="circle" label="N37\n103"]
38 [shape="circle" label="N38\n101"]
39 [shape="circle" label="N39\n100"]
40 [shape="circle" label="N40\n99"]
41 [shape="circle" label="N41\n98"]
42 [shape="diamond" label="N42\n97"]
46 [shape="diamond" label="N46\n96"]
51 [shape="diamond" label="N51\n95"]
56 [shape="diamond" label="N56\n94"]
103 [shape="diamond" label="N103\n93"]
119 [shape="circle" label="N119\n92"]
43 [shape="diamond" label="N43\n14"]
139 [shape="circle" label="N139\n13"]
141 [shape="circle" label="N141\n12"]
137 [shape="circle" label="N137\n9"]
142 [shape="circle" label="N142\n8"]
143 [shape="circle" label="N143\n7"]
144 [shape="circle" label="N144\n6"]
145 [shape="diamond" label="N145\n5"]
147 [shape="circle" label="N147\n4"]
148 [shape="circle" label="N148\n2"]
149 [shape="circle" label="N149\n1"]
18 [shape="circle" label="N18\n0"]
166 [shape="circle" label="N166\n0"]
146 [shape="circle" label="N146\n3"]
138 [shape="circle" label="N138\n11"]
140 [shape="circle" label="N140\n10"]
118 [shape="diamond" label="N118\n76"]
121 [shape="diamond" label="N121\n75"]
123 [shape="circle" label="N123\n72"]
120 [shape="circle" label="N120\n60"]
124 [shape="circle" label="N124\n74"]
125 [shape="circle" label="N125\n73"]
122 [shape="diamond" label="N122\n71"]
127 [shape="diamond" label="N127\n70"]
129 [shape="circle" label="N129\n67"]
130 [shape="circle" label="N130\n69"]
131 [shape="circle" label="N131\n68"]
128 [shape="diamond" label="N128\n66"]
132 [shape="circle" label="N132\n65"]
133 [shape="diamond" label="N133\n64"]
134 [shape="circle" label="N134\n63"]
135 [shape="circle" label="N135\n62"]
136 [shape="circle" label="N136\n61"]
102 [shape="diamond" label="N102\n91"]
105 [shape="diamond" label="N105\n90"]
106 [shape="circle" label="N106\n89"]
104 [shape="diamond" label="N104\n86"]
110 [shape="diamond" label="N110\n85"]
113 [shape="circle" label="N113\n84"]
115 [shape="circle" label="N115\n83"]
112 [shape="circle" label="N112\n80"]
109 [shape="circle" label="N109\n77"]
114 [shape="circle" label="N114\n82"]
116 [shape="circle" label="N116\n81"]
111 [shape="circle" label="N111\n79"]
117 [shape="circle" label="N117\n78"]
107 [shape="circle" label="N107\n88"]
108 [shape="circle" label="N108\n87"]
55 [shape="diamond" label="N55\n59"]
58 [shape="circle" label="N58\n58"]
60 [shape="circle" label="N60\n57"]
57 [shape="circle" label="N57\n21"]
59 [shape="diamond" label="N59\n56"]
62 [shape="diamond" label="N62\n55"]
66 [shape="diamond" label="N66\n54"]
70 [shape="diamond" label="N70\n53"]
74 [shape="diamond" label="N74\n52"]
78 [shape="diamond" label="N78\n51"]
82 [shape="diamond" label="N82\n50"]
84 [shape="circle" label="N84\n49"]
64 [shape="circle" label="N64\n36"]
85 [shape="circle" label="N85\n48"]
86 [shape="circle" label="N86\n47"]
81 [shape="circle" label="N81\n46"]
83 [shape="circle" label="N83\n45"]
77 [shape="circle" label="N77\n44"]
79 [shape="circle" label="N79\n43"]
73 [shape="circle" label="N73\n42"]
75 [shape="circle" label="N75\n41"]
69 [shape="circle" label="N69\n40"]
71 [shape="circle" label="N71\n39"]
65 [shape="circle" label="N65\n38"]
67 [shape="circle" label="N67\n37"]
63 [shape="diamond" label="N63\n35"]
88 [shape="diamond" label="N88\n34"]
92 [shape="diamond" label="N92\n33"]
94 [shape="circle" label="N94\n32"]
90 [shape="circle" label="N90\n27"]
95 [shape="circle" label="N95\n31"]
96 [shape="circle" label="N96\n30"]
91 [shape="circle" label="N91\n29"]
93 [shape="circle" label="N93\n28"]
89 [shape="diamond" label="N89\n26"]
98 [shape="circle" label="N98\n25"]
99 [shape="circle" label="N99\n24"]
100 [shape="circle" label="N100\n23"]
97 [shape="circle" label="N97\n22"]
50 [shape="circle" label="N50\n20"]
52 [shape="circle" label="N52\n19"]
53 [shape="circle" label="N53\n18"]
45 [shape="circle" label="N45\n17"]
47 [shape="circle" label="N47\n16"]
48 [shape="circle" label="N48\n15"]
36 [shape="circle" label="N36\n102"]
29 [shape="circle" label="N29\n109"]
6 [shape="circle" label="N6\n2"]
8 [shape="circle" label="N8\n1"]
5 [shape="circle" label="N5\n0"]
node [shape="circle"]
subgraph cluster_alu16 {
label="alu16()"
19 -> 20 [label="Function start dummy edge"]
20 -> 21 [label="unsigned char opcode = (sa.IR) & 7;"]
21 -> 22 [label="unsigned char adFld1 = ((sa.IR) >> 3) & 3;"]
22 -> 23 [label="unsigned char adFld2 = ((sa.IR) >> 3) & 3;"]
23 -> 24 [label="unsigned char adFld3 = ((sa.IR) >> 7) & 3;"]
24 -> 25 [label="unsigned short int immFld = ((sa.IR) >> 7) & 511;"]
25 -> 26 [label="unsigned char funFld = ((sa.IR) >> 9) & 127;"]
26 -> 27 [label="int __CPAchecker_TMP_0;"]
27 -> 29 [label="[opcode == LW]"]
27 -> 28 [label="[!(opcode == LW)]"]
28 -> 29 [label="[opcode == SW]"]
28 -> 30 [label="[!(opcode == SW)]"]
30 -> 31 [label="__CPAchecker_TMP_0 = 0;"]
31 -> 32 [label="_Bool memRef = __CPAchecker_TMP_0;"]
32 -> 33 [label="_Bool regRegALU = opcode == ALUop;"]
33 -> 34 [label="int __CPAchecker_TMP_1;"]
34 -> 36 [label="[opcode == ADDI]"]
34 -> 35 [label="[!(opcode == ADDI)]"]
35 -> 36 [label="[opcode == SUBI]"]
35 -> 37 [label="[!(opcode == SUBI)]"]
37 -> 38 [label="__CPAchecker_TMP_1 = 0;"]
38 -> 39 [label="_Bool regImmALU = __CPAchecker_TMP_1;"]
39 -> 40 [label="_Bool branch = opcode == BEQZ;"]
40 -> 41 [label="unsigned short int Imm = ((((immFld >> 8) & 1) & 255) << 7) | (immFld & 255);"]
41 -> 42 [label="switch (sa.State)"]
42 -> 45 [label="[(sa.State) == IF]"]
42 -> 46 [label="[!((sa.State) == IF)]"]
46 -> 50 [label="[(sa.State) == ID]"]
46 -> 51 [label="[!((sa.State) == ID)]"]
51 -> 55 [label="[(sa.State) == EX]"]
51 -> 56 [label="[!((sa.State) == EX)]"]
56 -> 102 [label="[(sa.State) == MEM]"]
56 -> 103 [label="[!((sa.State) == MEM)]"]
103 -> 118 [label="[(sa.State) == WB]"]
103 -> 119 [label="[!((sa.State) == WB)]"]
119 -> 43 [label=""]
43 -> 138 [label="[(sa.State) == 4]"]
43 -> 139 [label="[!((sa.State) == 4)]"]
139 -> 141 [label="sa.State = (sa.State) + 1;"]
141 -> 137 [label=""]
137 -> 142 [label="*dataout = sa.B;"]
142 -> 143 [label="*wr = ((sa.State) == MEM) & (opcode == SW);"]
143 -> 144 [label="*PC = sa.PC;"]
144 -> 145 [label="void __CPAchecker_TMP_2;"]
145 -> 146 [label="[((sa.Registers)[0]) == 0]"]
145 -> 147 [label="[!(((sa.Registers)[0]) == 0)]"]
147 -> 148 [label="__assert_fail(\"sa.Registers[0]==0\", \"main.c\", 174, \"__PRETTY_FUNCTION__\");"]
148 -> 149 [label="0;"]
149 -> 18 [label="default return"]
146 -> 148 [label="0;"]
138 -> 140 [label="sa.State = 0;"]
140 -> 137 [label=""]
118 -> 122 [label="[regRegALU == 0]"]
118 -> 121 [label="[!(regRegALU == 0)]"]
121 -> 124 [label="[adFld3 != 0]"]
121 -> 123 [label="[!(adFld3 != 0)]"]
123 -> 120 [label=""]
120 -> 43 [label=""]
124 -> 125 [label="(sa.Registers)[adFld3] = *ALUOutput;"]
125 -> 123 [label=""]
122 -> 128 [label="[regImmALU == 0]"]
122 -> 127 [label="[!(regImmALU == 0)]"]
127 -> 130 [label="[adFld2 != 0]"]
127 -> 129 [label="[!(adFld2 != 0)]"]
129 -> 120 [label=""]
130 -> 131 [label="(sa.Registers)[adFld2] = *ALUOutput;"]
131 -> 129 [label=""]
128 -> 133 [label="[opcode == LW]"]
128 -> 132 [label="[!(opcode == LW)]"]
132 -> 120 [label=""]
133 -> 135 [label="[adFld2 != 0]"]
133 -> 134 [label="[!(adFld2 != 0)]"]
134 -> 120 [label=""]
135 -> 136 [label="(sa.Registers)[adFld2] = sa.LMD;"]
136 -> 120 [label=""]
102 -> 104 [label="[memRef == 0]"]
102 -> 105 [label="[!(memRef == 0)]"]
105 -> 107 [label="[opcode == LW]"]
105 -> 106 [label="[!(opcode == LW)]"]
106 -> 104 [label=""]
104 -> 111 [label="[branch == 0]"]
104 -> 110 [label="[!(branch == 0)]"]
110 -> 114 [label="[(sa.Cond) == 0]"]
110 -> 113 [label="[!((sa.Cond) == 0)]"]
113 -> 115 [label="sa.PC = (*ALUOutput) & 4095;"]
115 -> 112 [label=""]
112 -> 109 [label=""]
109 -> 118 [label="fall through"]
114 -> 116 [label="sa.PC = sa.NPC;"]
116 -> 112 [label=""]
111 -> 117 [label="sa.PC = sa.NPC;"]
117 -> 109 [label=""]
107 -> 108 [label="sa.LMD = datain;"]
108 -> 104 [label=""]
55 -> 59 [label="[memRef == 0]"]
55 -> 58 [label="[!(memRef == 0)]"]
58 -> 60 [label="*ALUOutput = (sa.A) + Imm;"]
60 -> 57 [label=""]
57 -> 43 [label="break"]
59 -> 63 [label="[regRegALU == 0]"]
59 -> 62 [label="[!(regRegALU == 0)]"]
62 -> 65 [label="[funFld == ADD]"]
62 -> 66 [label="[!(funFld == ADD)]"]
66 -> 69 [label="[funFld == SUB]"]
66 -> 70 [label="[!(funFld == SUB)]"]
70 -> 73 [label="[funFld == AND]"]
70 -> 74 [label="[!(funFld == AND)]"]
74 -> 77 [label="[funFld == OR]"]
74 -> 78 [label="[!(funFld == OR)]"]
78 -> 81 [label="[funFld == XOR]"]
78 -> 82 [label="[!(funFld == XOR)]"]
82 -> 85 [label="[funFld == SRL]"]
82 -> 84 [label="[!(funFld == SRL)]"]
84 -> 64 [label=""]
64 -> 57 [label=""]
85 -> 86 [label="*ALUOutput = 0 | (((sa.A) >> 1) & 32767);"]
86 -> 64 [label=""]
81 -> 83 [label="*ALUOutput = (sa.A) ^ (sa.B);"]
83 -> 64 [label=""]
77 -> 79 [label="*ALUOutput = (sa.A) | (sa.B);"]
79 -> 64 [label=""]
73 -> 75 [label="*ALUOutput = (sa.A) & (sa.B);"]
75 -> 64 [label=""]
69 -> 71 [label="*ALUOutput = (sa.A) - (sa.B);"]
71 -> 64 [label=""]
65 -> 67 [label="*ALUOutput = (sa.A) + (sa.B);"]
67 -> 64 [label=""]
63 -> 89 [label="[regImmALU == 0]"]
63 -> 88 [label="[!(regImmALU == 0)]"]
88 -> 91 [label="[opcode == ADDI]"]
88 -> 92 [label="[!(opcode == ADDI)]"]
92 -> 95 [label="[opcode == SUBI]"]
92 -> 94 [label="[!(opcode == SUBI)]"]
94 -> 90 [label=""]
90 -> 57 [label=""]
95 -> 96 [label="*ALUOutput = (sa.A) - Imm;"]
96 -> 90 [label=""]
91 -> 93 [label="*ALUOutput = (sa.A) + Imm;"]
93 -> 90 [label=""]
89 -> 97 [label="[branch == 0]"]
89 -> 98 [label="[!(branch == 0)]"]
98 -> 99 [label="*ALUOutput = (0 | ((sa.NPC) & 4095)) + ((Imm << 1) | 0);"]
99 -> 100 [label="sa.Cond = (sa.A) == 0;"]
100 -> 57 [label=""]
97 -> 57 [label=""]
50 -> 52 [label="sa.A = (sa.Registers)[adFld1];"]
52 -> 53 [label="sa.B = (sa.Registers)[adFld2];"]
53 -> 43 [label="break"]
45 -> 47 [label="sa.NPC = (sa.PC) + 2;"]
47 -> 48 [label="sa.IR = instruction;"]
48 -> 43 [label="break"]
36 -> 38 [label="__CPAchecker_TMP_1 = 1;"]
29 -> 31 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_initial_alu16 {
label="initial_alu16()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="for"]
3 -> 4 [label="unsigned i = 0;"]
4 -> 6 [label="[i < 4]"]
4 -> 7 [label="[!(i < 4)]"]
7 -> 9 [label="sa.PC = 0;"]
9 -> 10 [label="sa.NPC = 0;"]
10 -> 11 [label="sa.IR = 0;"]
11 -> 12 [label="sa.A = 0;"]
12 -> 13 [label="sa.B = 0;"]
13 -> 14 [label="sa.ALUOutput = 0;"]
14 -> 15 [label="sa.Cond = 0;"]
15 -> 16 [label="sa.LMD = 0;"]
16 -> 17 [label="sa.State = IF;"]
17 -> 0 [label="default return"]
6 -> 8 [label="(sa.Registers)[i] = 0;"]
8 -> 5 [label=""]
5 -> 4 [label="i = i + 1;"]}
subgraph cluster_main {
label="main()"
151 -> 167 [label="INIT GLOBAL VARS"]
167 -> 168 [label="typedef unsigned long int size_t;"]
168 -> 169 [label="typedef unsigned char __u_char;"]
169 -> 170 [label="typedef unsigned short int __u_short;"]
170 -> 171 [label="typedef unsigned int __u_int;"]
171 -> 172 [label="typedef unsigned long int __u_long;"]
172 -> 173 [label="typedef signed char __int8_t;"]
173 -> 174 [label="typedef unsigned char __uint8_t;"]
174 -> 175 [label="typedef signed short int __int16_t;"]
175 -> 176 [label="typedef unsigned short int __uint16_t;"]
176 -> 177 [label="typedef signed int __int32_t;"]
177 -> 178 [label="typedef unsigned int __uint32_t;"]
178 -> 179 [label="typedef signed long int __int64_t;"]
179 -> 180 [label="typedef unsigned long int __uint64_t;"]
180 -> 181 [label="typedef long int __quad_t;"]
181 -> 182 [label="typedef unsigned long int __u_quad_t;"]
182 -> 183 [label="typedef unsigned long int __dev_t;"]
183 -> 184 [label="typedef unsigned int __uid_t;"]
184 -> 185 [label="typedef unsigned int __gid_t;"]
185 -> 186 [label="typedef unsigned long int __ino_t;"]
186 -> 187 [label="typedef unsigned long int __ino64_t;"]
187 -> 188 [label="typedef unsigned int __mode_t;"]
188 -> 189 [label="typedef unsigned long int __nlink_t;"]
189 -> 190 [label="typedef long int __off_t;"]
190 -> 191 [label="typedef long int __off64_t;"]
191 -> 192 [label="typedef int __pid_t;"]
192 -> 193 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
193 -> 194 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
194 -> 195 [label="typedef long int __clock_t;"]
195 -> 196 [label="typedef unsigned long int __rlim_t;"]
196 -> 197 [label="typedef unsigned long int __rlim64_t;"]
197 -> 198 [label="typedef unsigned int __id_t;"]
198 -> 199 [label="typedef long int __time_t;"]
199 -> 200 [label="typedef unsigned int __useconds_t;"]
200 -> 201 [label="typedef long int __suseconds_t;"]
201 -> 202 [label="typedef int __daddr_t;"]
202 -> 203 [label="typedef int __key_t;"]
203 -> 204 [label="typedef int __clockid_t;"]
204 -> 205 [label="typedef void *__timer_t;"]
205 -> 206 [label="typedef long int __blksize_t;"]
206 -> 207 [label="typedef long int __blkcnt_t;"]
207 -> 208 [label="typedef long int __blkcnt64_t;"]
208 -> 209 [label="typedef unsigned long int __fsblkcnt_t;"]
209 -> 210 [label="typedef unsigned long int __fsblkcnt64_t;"]
210 -> 211 [label="typedef unsigned long int __fsfilcnt_t;"]
211 -> 212 [label="typedef unsigned long int __fsfilcnt64_t;"]
212 -> 213 [label="typedef long int __fsword_t;"]
213 -> 214 [label="typedef long int __ssize_t;"]
214 -> 215 [label="typedef long int __syscall_slong_t;"]
215 -> 216 [label="typedef unsigned long int __syscall_ulong_t;"]
216 -> 217 [label="typedef __off64_t __loff_t;"]
217 -> 218 [label="typedef __quad_t *__qaddr_t;"]
218 -> 219 [label="typedef char *__caddr_t;"]
219 -> 220 [label="typedef long int __intptr_t;"]
220 -> 221 [label="typedef unsigned int __socklen_t;"]
221 -> 222 [label="struct _IO_FILE ;"]
222 -> 223 [label="typedef struct _IO_FILE FILE;"]
223 -> 224 [label="typedef struct _IO_FILE __FILE;"]
224 -> 225 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
225 -> 226 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
226 -> 227 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
227 -> 228 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
228 -> 229 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
229 -> 230 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
230 -> 231 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
231 -> 232 [label="typedef __builtin_va_list __gnuc_va_list;"]
232 -> 233 [label="struct _IO_jump_t ;"]
233 -> 234 [label="typedef void _IO_lock_t;"]
234 -> 235 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
235 -> 236 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
236 -> 237 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
237 -> 238 [label="typedef struct _IO_FILE _IO_FILE;"]
238 -> 239 [label="struct _IO_FILE_plus ;"]
239 -> 240 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
240 -> 241 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
241 -> 242 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
242 -> 243 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
243 -> 244 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
244 -> 245 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
245 -> 246 [label="typedef int __io_close_fn(void *__cookie);"]
246 -> 247 [label="int __underflow(_IO_FILE *);"]
247 -> 248 [label="int __uflow(_IO_FILE *);"]
248 -> 249 [label="int __overflow(_IO_FILE *, int);"]
249 -> 250 [label="int _IO_getc(_IO_FILE *__fp);"]
250 -> 251 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
251 -> 252 [label="int _IO_feof(_IO_FILE *__fp);"]
252 -> 253 [label="int _IO_ferror(_IO_FILE *__fp);"]
253 -> 254 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
254 -> 255 [label="void _IO_flockfile(_IO_FILE *);"]
255 -> 256 [label="void _IO_funlockfile(_IO_FILE *);"]
256 -> 257 [label="int _IO_ftrylockfile(_IO_FILE *);"]
257 -> 258 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
258 -> 259 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
259 -> 260 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
260 -> 261 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
261 -> 262 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
262 -> 263 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
263 -> 264 [label="void _IO_free_backup_area(_IO_FILE *);"]
264 -> 265 [label="typedef __gnuc_va_list va_list;"]
265 -> 266 [label="typedef __off_t off_t;"]
266 -> 267 [label="typedef __ssize_t ssize_t;"]
267 -> 268 [label="typedef _G_fpos_t fpos_t;"]
268 -> 269 [label="extern struct _IO_FILE *stdin;"]
269 -> 270 [label="extern struct _IO_FILE *stdout;"]
270 -> 271 [label="extern struct _IO_FILE *stderr;"]
271 -> 272 [label="int remove(const char *__filename);"]
272 -> 273 [label="int rename(const char *__old, const char *__new);"]
273 -> 274 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
274 -> 275 [label="FILE * tmpfile();"]
275 -> 276 [label="char * tmpnam(char *__s);"]
276 -> 277 [label="char * tmpnam_r(char *__s);"]
277 -> 278 [label="char * tempnam(const char *__dir, const char *__pfx);"]
278 -> 279 [label="int fclose(FILE *__stream);"]
279 -> 280 [label="int fflush(FILE *__stream);"]
280 -> 281 [label="int fflush_unlocked(FILE *__stream);"]
281 -> 282 [label="FILE * fopen(const char *__filename, const char *__modes);"]
282 -> 283 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
283 -> 284 [label="FILE * fdopen(int __fd, const char *__modes);"]
284 -> 285 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
285 -> 286 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
286 -> 287 [label="void setbuf(FILE *__stream, char *__buf);"]
287 -> 288 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
288 -> 289 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
289 -> 290 [label="void setlinebuf(FILE *__stream);"]
290 -> 291 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
291 -> 292 [label="int printf(const char *__format, ...);"]
292 -> 293 [label="int sprintf(char *__s, const char *__format, ...);"]
293 -> 294 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
294 -> 295 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
295 -> 296 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
296 -> 297 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
297 -> 298 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
298 -> 299 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
299 -> 300 [label="int dprintf(int __fd, const char *__fmt, ...);"]
300 -> 301 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
301 -> 302 [label="int scanf(const char *__format, ...);"]
302 -> 303 [label="int sscanf(const char *__s, const char *__format, ...);"]
303 -> 304 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
304 -> 305 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
305 -> 306 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
306 -> 307 [label="int fgetc(FILE *__stream);"]
307 -> 308 [label="int getc(FILE *__stream);"]
308 -> 309 [label="int getchar();"]
309 -> 310 [label="int getc_unlocked(FILE *__stream);"]
310 -> 311 [label="int getchar_unlocked();"]
311 -> 312 [label="int fgetc_unlocked(FILE *__stream);"]
312 -> 313 [label="int fputc(int __c, FILE *__stream);"]
313 -> 314 [label="int putc(int __c, FILE *__stream);"]
314 -> 315 [label="int putchar(int __c);"]
315 -> 316 [label="int fputc_unlocked(int __c, FILE *__stream);"]
316 -> 317 [label="int putc_unlocked(int __c, FILE *__stream);"]
317 -> 318 [label="int putchar_unlocked(int __c);"]
318 -> 319 [label="int getw(FILE *__stream);"]
319 -> 320 [label="int putw(int __w, FILE *__stream);"]
320 -> 321 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
321 -> 322 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
322 -> 323 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
323 -> 324 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
324 -> 325 [label="int fputs(const char *__s, FILE *__stream);"]
325 -> 326 [label="int puts(const char *__s);"]
326 -> 327 [label="int ungetc(int __c, FILE *__stream);"]
327 -> 328 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
328 -> 329 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
329 -> 330 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
330 -> 331 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
331 -> 332 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
332 -> 333 [label="long int ftell(FILE *__stream);"]
333 -> 334 [label="void rewind(FILE *__stream);"]
334 -> 335 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
335 -> 336 [label="__off_t  ftello(FILE *__stream);"]
336 -> 337 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
337 -> 338 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
338 -> 339 [label="void clearerr(FILE *__stream);"]
339 -> 340 [label="int feof(FILE *__stream);"]
340 -> 341 [label="int ferror(FILE *__stream);"]
341 -> 342 [label="void clearerr_unlocked(FILE *__stream);"]
342 -> 343 [label="int feof_unlocked(FILE *__stream);"]
343 -> 344 [label="int ferror_unlocked(FILE *__stream);"]
344 -> 345 [label="void perror(const char *__s);"]
345 -> 346 [label="extern int sys_nerr;"]
346 -> 347 [label="extern const const char *sys_errlist[];"]
347 -> 348 [label="int fileno(FILE *__stream);"]
348 -> 349 [label="int fileno_unlocked(FILE *__stream);"]
349 -> 350 [label="FILE * popen(const char *__command, const char *__modes);"]
350 -> 351 [label="int pclose(FILE *__stream);"]
351 -> 352 [label="char * ctermid(char *__s);"]
352 -> 353 [label="void flockfile(FILE *__stream);"]
353 -> 354 [label="int ftrylockfile(FILE *__stream);"]
354 -> 355 [label="void funlockfile(FILE *__stream);"]
355 -> 356 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
356 -> 357 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
357 -> 358 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
358 -> 359 [label="unsigned short int nondet_sint();"]
359 -> 360 [label="int IF = 0;"]
360 -> 361 [label="int ID = 1;"]
361 -> 362 [label="int EX = 2;"]
362 -> 363 [label="int MEM = 3;"]
363 -> 364 [label="int WB = 4;"]
364 -> 365 [label="int LW = 0;"]
365 -> 366 [label="int SW = 1;"]
366 -> 367 [label="int BEQZ = 2;"]
367 -> 368 [label="int ALUop = 3;"]
368 -> 369 [label="int ADDI = 4;"]
369 -> 370 [label="int SUBI = 5;"]
370 -> 371 [label="int ADD = 0;"]
371 -> 372 [label="int SUB = 1;"]
372 -> 373 [label="int AND = 2;"]
373 -> 374 [label="int OR = 3;"]
374 -> 375 [label="int XOR = 4;"]
375 -> 376 [label="int SRL = 5;"]
376 -> 377 [label="struct state_elements_alu16 {   unsigned short int Registers[4];   unsigned short int PC;   unsigned short int NPC;   unsigned short int IR;   unsigned short int A;   unsigned short int B;   unsigned short int ALUOutput;   _Bool Cond;   unsigned short int LMD;   unsigned char State; } ;"]
377 -> 378 [label="struct state_elements_alu16 sa = {  };"]
378 -> 379 [label="void initial_alu16();"]
379 -> 380 [label="void alu16(_Bool clk, unsigned short int *PC, unsigned short int instruction, unsigned short int *ALUOutput, unsigned short int datain, unsigned short int *dataout, _Bool *wr);"]
380 -> 381 [label="int main();"]
381 -> 152 [label="Function start dummy edge"]
152 -> 153 [label="_Bool clk;"]
153 -> 154 [label="unsigned short int PC;"]
154 -> 155 [label="unsigned short int instruction;"]
155 -> 156 [label="unsigned short int ALUOutput;"]
156 -> 157 [label="unsigned short int datain;"]
157 -> 158 [label="unsigned short int dataout;"]
158 -> 159 [label="_Bool wr;"]
159 -> 160 [label="initial_alu16();" style="dotted" arrowhead="empty"]
160 -> 161 [label="while"]
161 -> 162 [label=""]
162 -> 164 [label="instruction = nondet_sint();"]
164 -> 165 [label="datain = nondet_sint();"]
165 -> 166 [label="alu16(clk, &PC, instruction, &ALUOutput, datain, &dataout, &wr);" style="dotted" arrowhead="empty"]
166 -> 161 [label=""]}
159 -> 1 [label="initial_alu16()"]
0 -> 160 [label="Return edge from initial_alu16 to main"]
165 -> 19 [label="alu16(clk, &PC, instruction, &ALUOutput, datain, &dataout, &wr)"]
18 -> 166 [label="Return edge from alu16 to main"]}