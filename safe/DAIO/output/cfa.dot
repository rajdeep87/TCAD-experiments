digraph CFA {
230 [shape="circle" label="N230\n255"]
277 [shape="circle" label="N277\n254"]
278 [shape="circle" label="N278\n253"]
279 [shape="circle" label="N279\n252"]
280 [shape="circle" label="N280\n251"]
281 [shape="circle" label="N281\n250"]
282 [shape="circle" label="N282\n249"]
283 [shape="circle" label="N283\n248"]
284 [shape="circle" label="N284\n247"]
285 [shape="circle" label="N285\n246"]
286 [shape="circle" label="N286\n245"]
287 [shape="circle" label="N287\n244"]
288 [shape="circle" label="N288\n243"]
289 [shape="circle" label="N289\n242"]
290 [shape="circle" label="N290\n241"]
291 [shape="circle" label="N291\n240"]
292 [shape="circle" label="N292\n239"]
293 [shape="circle" label="N293\n238"]
294 [shape="circle" label="N294\n237"]
295 [shape="circle" label="N295\n236"]
296 [shape="circle" label="N296\n235"]
297 [shape="circle" label="N297\n234"]
298 [shape="circle" label="N298\n233"]
299 [shape="circle" label="N299\n232"]
300 [shape="circle" label="N300\n231"]
301 [shape="circle" label="N301\n230"]
302 [shape="circle" label="N302\n229"]
303 [shape="circle" label="N303\n228"]
304 [shape="circle" label="N304\n227"]
305 [shape="circle" label="N305\n226"]
306 [shape="circle" label="N306\n225"]
307 [shape="circle" label="N307\n224"]
308 [shape="circle" label="N308\n223"]
309 [shape="circle" label="N309\n222"]
310 [shape="circle" label="N310\n221"]
311 [shape="circle" label="N311\n220"]
312 [shape="circle" label="N312\n219"]
313 [shape="circle" label="N313\n218"]
314 [shape="circle" label="N314\n217"]
315 [shape="circle" label="N315\n216"]
316 [shape="circle" label="N316\n215"]
317 [shape="circle" label="N317\n214"]
318 [shape="circle" label="N318\n213"]
319 [shape="circle" label="N319\n212"]
320 [shape="circle" label="N320\n211"]
321 [shape="circle" label="N321\n210"]
322 [shape="circle" label="N322\n209"]
323 [shape="circle" label="N323\n208"]
324 [shape="circle" label="N324\n207"]
325 [shape="circle" label="N325\n206"]
326 [shape="circle" label="N326\n205"]
327 [shape="circle" label="N327\n204"]
328 [shape="circle" label="N328\n203"]
329 [shape="circle" label="N329\n202"]
330 [shape="circle" label="N330\n201"]
331 [shape="circle" label="N331\n200"]
332 [shape="circle" label="N332\n199"]
333 [shape="circle" label="N333\n198"]
334 [shape="circle" label="N334\n197"]
335 [shape="circle" label="N335\n196"]
336 [shape="circle" label="N336\n195"]
337 [shape="circle" label="N337\n194"]
338 [shape="circle" label="N338\n193"]
339 [shape="circle" label="N339\n192"]
340 [shape="circle" label="N340\n191"]
341 [shape="circle" label="N341\n190"]
342 [shape="circle" label="N342\n189"]
343 [shape="circle" label="N343\n188"]
344 [shape="circle" label="N344\n187"]
345 [shape="circle" label="N345\n186"]
346 [shape="circle" label="N346\n185"]
347 [shape="circle" label="N347\n184"]
348 [shape="circle" label="N348\n183"]
349 [shape="circle" label="N349\n182"]
350 [shape="circle" label="N350\n181"]
351 [shape="circle" label="N351\n180"]
352 [shape="circle" label="N352\n179"]
353 [shape="circle" label="N353\n178"]
354 [shape="circle" label="N354\n177"]
355 [shape="circle" label="N355\n176"]
356 [shape="circle" label="N356\n175"]
357 [shape="circle" label="N357\n174"]
358 [shape="circle" label="N358\n173"]
359 [shape="circle" label="N359\n172"]
360 [shape="circle" label="N360\n171"]
361 [shape="circle" label="N361\n170"]
362 [shape="circle" label="N362\n169"]
363 [shape="circle" label="N363\n168"]
364 [shape="circle" label="N364\n167"]
365 [shape="circle" label="N365\n166"]
366 [shape="circle" label="N366\n165"]
367 [shape="circle" label="N367\n164"]
368 [shape="circle" label="N368\n163"]
369 [shape="circle" label="N369\n162"]
370 [shape="circle" label="N370\n161"]
371 [shape="circle" label="N371\n160"]
372 [shape="circle" label="N372\n159"]
373 [shape="circle" label="N373\n158"]
374 [shape="circle" label="N374\n157"]
375 [shape="circle" label="N375\n156"]
376 [shape="circle" label="N376\n155"]
377 [shape="circle" label="N377\n154"]
378 [shape="circle" label="N378\n153"]
379 [shape="circle" label="N379\n152"]
380 [shape="circle" label="N380\n151"]
381 [shape="circle" label="N381\n150"]
382 [shape="circle" label="N382\n149"]
383 [shape="circle" label="N383\n148"]
384 [shape="circle" label="N384\n147"]
385 [shape="circle" label="N385\n146"]
386 [shape="circle" label="N386\n145"]
387 [shape="circle" label="N387\n144"]
388 [shape="circle" label="N388\n143"]
389 [shape="circle" label="N389\n142"]
390 [shape="circle" label="N390\n141"]
391 [shape="circle" label="N391\n140"]
392 [shape="circle" label="N392\n139"]
393 [shape="circle" label="N393\n138"]
394 [shape="circle" label="N394\n137"]
395 [shape="circle" label="N395\n136"]
396 [shape="circle" label="N396\n135"]
397 [shape="circle" label="N397\n134"]
398 [shape="circle" label="N398\n133"]
399 [shape="circle" label="N399\n132"]
400 [shape="circle" label="N400\n131"]
401 [shape="circle" label="N401\n130"]
402 [shape="circle" label="N402\n129"]
403 [shape="circle" label="N403\n128"]
404 [shape="circle" label="N404\n127"]
405 [shape="circle" label="N405\n126"]
406 [shape="circle" label="N406\n125"]
407 [shape="circle" label="N407\n124"]
408 [shape="circle" label="N408\n123"]
409 [shape="circle" label="N409\n122"]
410 [shape="circle" label="N410\n121"]
411 [shape="circle" label="N411\n120"]
412 [shape="circle" label="N412\n119"]
413 [shape="circle" label="N413\n118"]
414 [shape="circle" label="N414\n117"]
415 [shape="circle" label="N415\n116"]
416 [shape="circle" label="N416\n115"]
417 [shape="circle" label="N417\n114"]
418 [shape="circle" label="N418\n113"]
419 [shape="circle" label="N419\n112"]
420 [shape="circle" label="N420\n111"]
421 [shape="circle" label="N421\n110"]
422 [shape="circle" label="N422\n109"]
423 [shape="circle" label="N423\n108"]
424 [shape="circle" label="N424\n107"]
425 [shape="circle" label="N425\n106"]
426 [shape="circle" label="N426\n105"]
427 [shape="circle" label="N427\n104"]
428 [shape="circle" label="N428\n103"]
429 [shape="circle" label="N429\n102"]
430 [shape="circle" label="N430\n101"]
431 [shape="circle" label="N431\n100"]
432 [shape="circle" label="N432\n99"]
433 [shape="circle" label="N433\n98"]
434 [shape="circle" label="N434\n97"]
435 [shape="circle" label="N435\n96"]
436 [shape="circle" label="N436\n95"]
437 [shape="circle" label="N437\n94"]
438 [shape="circle" label="N438\n93"]
439 [shape="circle" label="N439\n92"]
440 [shape="circle" label="N440\n91"]
441 [shape="circle" label="N441\n90"]
442 [shape="circle" label="N442\n89"]
443 [shape="circle" label="N443\n88"]
444 [shape="circle" label="N444\n87"]
445 [shape="circle" label="N445\n86"]
446 [shape="circle" label="N446\n85"]
447 [shape="circle" label="N447\n84"]
448 [shape="circle" label="N448\n83"]
449 [shape="circle" label="N449\n82"]
450 [shape="circle" label="N450\n81"]
451 [shape="circle" label="N451\n80"]
452 [shape="circle" label="N452\n79"]
453 [shape="circle" label="N453\n78"]
454 [shape="circle" label="N454\n77"]
455 [shape="circle" label="N455\n76"]
456 [shape="circle" label="N456\n75"]
457 [shape="circle" label="N457\n74"]
458 [shape="circle" label="N458\n73"]
459 [shape="circle" label="N459\n72"]
460 [shape="circle" label="N460\n71"]
461 [shape="circle" label="N461\n70"]
462 [shape="circle" label="N462\n69"]
463 [shape="circle" label="N463\n68"]
464 [shape="circle" label="N464\n67"]
465 [shape="circle" label="N465\n66"]
466 [shape="circle" label="N466\n65"]
467 [shape="circle" label="N467\n64"]
468 [shape="circle" label="N468\n63"]
469 [shape="circle" label="N469\n62"]
470 [shape="circle" label="N470\n61"]
471 [shape="circle" label="N471\n60"]
472 [shape="circle" label="N472\n59"]
473 [shape="circle" label="N473\n58"]
474 [shape="circle" label="N474\n57"]
475 [shape="circle" label="N475\n56"]
476 [shape="circle" label="N476\n55"]
477 [shape="circle" label="N477\n54"]
478 [shape="circle" label="N478\n53"]
479 [shape="circle" label="N479\n52"]
480 [shape="circle" label="N480\n51"]
481 [shape="circle" label="N481\n50"]
482 [shape="circle" label="N482\n49"]
483 [shape="circle" label="N483\n48"]
484 [shape="circle" label="N484\n47"]
485 [shape="circle" label="N485\n46"]
486 [shape="circle" label="N486\n45"]
231 [shape="circle" label="N231\n44"]
232 [shape="circle" label="N232\n43"]
233 [shape="circle" label="N233\n42"]
234 [shape="circle" label="N234\n41"]
235 [shape="circle" label="N235\n40"]
236 [shape="circle" label="N236\n39"]
237 [shape="circle" label="N237\n38"]
238 [shape="circle" label="N238\n37"]
239 [shape="circle" label="N239\n36"]
240 [shape="circle" label="N240\n35"]
241 [shape="circle" label="N241\n34"]
242 [shape="circle" label="N242\n33"]
243 [shape="circle" label="N243\n32"]
244 [shape="circle" label="N244\n31"]
245 [shape="circle" label="N245\n30"]
246 [shape="circle" label="N246\n29"]
247 [shape="circle" label="N247\n28"]
248 [shape="circle" label="N248\n27"]
249 [shape="circle" label="N249\n26"]
1 [shape="circle" label="N1\n22"]
2 [shape="circle" label="N2\n21"]
3 [shape="circle" label="N3\n20"]
4 [shape="circle" label="N4\n19"]
5 [shape="circle" label="N5\n18"]
6 [shape="circle" label="N6\n17"]
7 [shape="circle" label="N7\n16"]
8 [shape="circle" label="N8\n15"]
9 [shape="circle" label="N9\n14"]
10 [shape="circle" label="N10\n13"]
11 [shape="circle" label="N11\n12"]
12 [shape="circle" label="N12\n11"]
13 [shape="circle" label="N13\n10"]
14 [shape="circle" label="N14\n9"]
15 [shape="circle" label="N15\n8"]
16 [shape="circle" label="N16\n7"]
17 [shape="circle" label="N17\n6"]
18 [shape="circle" label="N18\n5"]
19 [shape="circle" label="N19\n4"]
20 [shape="circle" label="N20\n3"]
21 [shape="circle" label="N21\n2"]
22 [shape="circle" label="N22\n1"]
0 [shape="circle" label="N0\n0"]
250 [shape="circle" label="N250\n25"]
251 [shape="circle" label="N251\n24"]
24 [shape="circle" label="N24\n193"]
25 [shape="diamond" label="N25\n192"]
27 [shape="circle" label="N27\n191"]
29 [shape="circle" label="N29\n190"]
30 [shape="circle" label="N30\n189"]
31 [shape="circle" label="N31\n188"]
32 [shape="circle" label="N32\n187"]
33 [shape="circle" label="N33\n186"]
34 [shape="circle" label="N34\n185"]
35 [shape="circle" label="N35\n184"]
36 [shape="circle" label="N36\n183"]
37 [shape="circle" label="N37\n182"]
38 [shape="circle" label="N38\n181"]
39 [shape="circle" label="N39\n180"]
40 [shape="circle" label="N40\n179"]
26 [shape="diamond" label="N26\n35"]
196 [shape="circle" label="N196\n34"]
198 [shape="circle" label="N198\n33"]
199 [shape="circle" label="N199\n32"]
200 [shape="circle" label="N200\n31"]
201 [shape="circle" label="N201\n30"]
195 [shape="diamond" label="N195\n17"]
214 [shape="circle" label="N214\n6"]
220 [shape="circle" label="N220\n5"]
221 [shape="circle" label="N221\n4"]
213 [shape="circle" label="N213\n3"]
227 [shape="circle" label="N227\n2"]
228 [shape="circle" label="N228\n1"]
23 [shape="circle" label="N23\n0"]
265 [shape="circle" label="N265\n11"]
266 [shape="diamond" label="N266\n10"]
268 [shape="circle" label="N268\n9"]
269 [shape="circle" label="N269\n7"]
270 [shape="circle" label="N270\n6"]
271 [shape="diamond" label="N271\n5"]
274 [shape="diamond" label="N274\n4"]
273 [shape="circle" label="N273\n3"]
275 [shape="circle" label="N275\n1"]
276 [shape="circle" label="N276\n0"]
254 [shape="doublecircle" label="N254\n21"]
255 [shape="circle" label="N255\n20"]
257 [shape="circle" label="N257\n19"]
258 [shape="circle" label="N258\n18"]
259 [shape="circle" label="N259\n17"]
260 [shape="circle" label="N260\n16"]
261 [shape="circle" label="N261\n15"]
262 [shape="circle" label="N262\n14"]
263 [shape="circle" label="N263\n13"]
264 [shape="circle" label="N264\n12"]
272 [shape="circle" label="N272\n2"]
267 [shape="circle" label="N267\n8"]
252 [shape="circle" label="N252\n23"]
253 [shape="circle" label="N253\n22"]
219 [shape="diamond" label="N219\n16"]
218 [shape="diamond" label="N218\n15"]
217 [shape="diamond" label="N217\n14"]
216 [shape="diamond" label="N216\n13"]
215 [shape="diamond" label="N215\n12"]
222 [shape="circle" label="N222\n10"]
224 [shape="diamond" label="N224\n11"]
223 [shape="circle" label="N223\n9"]
225 [shape="circle" label="N225\n8"]
226 [shape="circle" label="N226\n7"]
197 [shape="diamond" label="N197\n29"]
202 [shape="circle" label="N202\n27"]
204 [shape="diamond" label="N204\n28"]
203 [shape="circle" label="N203\n26"]
205 [shape="circle" label="N205\n25"]
206 [shape="diamond" label="N206\n24"]
208 [shape="circle" label="N208\n23"]
209 [shape="circle" label="N209\n22"]
207 [shape="diamond" label="N207\n21"]
211 [shape="circle" label="N211\n20"]
212 [shape="circle" label="N212\n19"]
210 [shape="circle" label="N210\n18"]
28 [shape="diamond" label="N28\n178"]
43 [shape="diamond" label="N43\n177"]
49 [shape="diamond" label="N49\n176"]
72 [shape="diamond" label="N72\n175"]
79 [shape="diamond" label="N79\n174"]
103 [shape="diamond" label="N103\n173"]
109 [shape="diamond" label="N109\n172"]
129 [shape="diamond" label="N129\n171"]
138 [shape="diamond" label="N138\n170"]
168 [shape="diamond" label="N168\n169"]
173 [shape="diamond" label="N173\n168"]
191 [shape="circle" label="N191\n167"]
192 [shape="circle" label="N192\n166"]
193 [shape="circle" label="N193\n165"]
194 [shape="circle" label="N194\n164"]
172 [shape="diamond" label="N172\n163"]
176 [shape="circle" label="N176\n162"]
190 [shape="circle" label="N190\n161"]
174 [shape="circle" label="N174\n146"]
175 [shape="diamond" label="N175\n160"]
177 [shape="diamond" label="N177\n156"]
181 [shape="diamond" label="N181\n152"]
185 [shape="circle" label="N185\n148"]
189 [shape="circle" label="N189\n147"]
186 [shape="circle" label="N186\n151"]
187 [shape="circle" label="N187\n150"]
188 [shape="circle" label="N188\n149"]
182 [shape="circle" label="N182\n155"]
183 [shape="circle" label="N183\n154"]
184 [shape="circle" label="N184\n153"]
179 [shape="diamond" label="N179\n159"]
178 [shape="circle" label="N178\n158"]
180 [shape="circle" label="N180\n157"]
167 [shape="circle" label="N167\n145"]
169 [shape="circle" label="N169\n144"]
170 [shape="circle" label="N170\n143"]
137 [shape="diamond" label="N137\n142"]
141 [shape="circle" label="N141\n141"]
165 [shape="circle" label="N165\n140"]
139 [shape="circle" label="N139\n115"]
140 [shape="diamond" label="N140\n139"]
142 [shape="diamond" label="N142\n135"]
146 [shape="diamond" label="N146\n131"]
150 [shape="diamond" label="N150\n127"]
154 [shape="diamond" label="N154\n121"]
160 [shape="circle" label="N160\n117"]
164 [shape="circle" label="N164\n116"]
161 [shape="circle" label="N161\n120"]
162 [shape="circle" label="N162\n119"]
163 [shape="circle" label="N163\n118"]
155 [shape="diamond" label="N155\n126"]
156 [shape="circle" label="N156\n125"]
157 [shape="circle" label="N157\n124"]
158 [shape="circle" label="N158\n123"]
159 [shape="circle" label="N159\n122"]
151 [shape="circle" label="N151\n130"]
152 [shape="circle" label="N152\n129"]
153 [shape="circle" label="N153\n128"]
147 [shape="circle" label="N147\n134"]
148 [shape="circle" label="N148\n133"]
149 [shape="circle" label="N149\n132"]
144 [shape="diamond" label="N144\n138"]
143 [shape="circle" label="N143\n137"]
145 [shape="circle" label="N145\n136"]
128 [shape="diamond" label="N128\n114"]
132 [shape="circle" label="N132\n113"]
135 [shape="circle" label="N135\n112"]
130 [shape="circle" label="N130\n108"]
131 [shape="circle" label="N131\n111"]
133 [shape="circle" label="N133\n110"]
134 [shape="circle" label="N134\n109"]
108 [shape="diamond" label="N108\n107"]
112 [shape="circle" label="N112\n106"]
126 [shape="circle" label="N126\n105"]
110 [shape="circle" label="N110\n90"]
111 [shape="diamond" label="N111\n104"]
113 [shape="diamond" label="N113\n100"]
117 [shape="diamond" label="N117\n96"]
121 [shape="circle" label="N121\n92"]
125 [shape="circle" label="N125\n91"]
122 [shape="circle" label="N122\n95"]
123 [shape="circle" label="N123\n94"]
124 [shape="circle" label="N124\n93"]
118 [shape="circle" label="N118\n99"]
119 [shape="circle" label="N119\n98"]
120 [shape="circle" label="N120\n97"]
115 [shape="diamond" label="N115\n103"]
114 [shape="circle" label="N114\n102"]
116 [shape="circle" label="N116\n101"]
102 [shape="circle" label="N102\n89"]
104 [shape="circle" label="N104\n88"]
105 [shape="circle" label="N105\n87"]
106 [shape="circle" label="N106\n86"]
78 [shape="diamond" label="N78\n85"]
82 [shape="circle" label="N82\n84"]
100 [shape="circle" label="N100\n83"]
80 [shape="circle" label="N80\n64"]
81 [shape="diamond" label="N81\n82"]
83 [shape="diamond" label="N83\n78"]
87 [shape="diamond" label="N87\n74"]
91 [shape="diamond" label="N91\n70"]
95 [shape="circle" label="N95\n66"]
99 [shape="circle" label="N99\n65"]
96 [shape="circle" label="N96\n69"]
97 [shape="circle" label="N97\n68"]
98 [shape="circle" label="N98\n67"]
92 [shape="circle" label="N92\n73"]
93 [shape="circle" label="N93\n72"]
94 [shape="circle" label="N94\n71"]
88 [shape="circle" label="N88\n77"]
89 [shape="circle" label="N89\n76"]
90 [shape="circle" label="N90\n75"]
84 [shape="circle" label="N84\n81"]
85 [shape="circle" label="N85\n80"]
86 [shape="circle" label="N86\n79"]
71 [shape="diamond" label="N71\n63"]
74 [shape="circle" label="N74\n62"]
75 [shape="circle" label="N75\n61"]
76 [shape="circle" label="N76\n60"]
73 [shape="circle" label="N73\n59"]
48 [shape="diamond" label="N48\n58"]
52 [shape="diamond" label="N52\n57"]
57 [shape="diamond" label="N57\n56"]
62 [shape="diamond" label="N62\n55"]
65 [shape="circle" label="N65\n54"]
50 [shape="circle" label="N50\n41"]
69 [shape="circle" label="N69\n40"]
66 [shape="circle" label="N66\n53"]
67 [shape="circle" label="N67\n52"]
68 [shape="circle" label="N68\n51"]
61 [shape="circle" label="N61\n50"]
63 [shape="circle" label="N63\n49"]
64 [shape="circle" label="N64\n48"]
56 [shape="circle" label="N56\n47"]
58 [shape="circle" label="N58\n46"]
59 [shape="circle" label="N59\n45"]
51 [shape="circle" label="N51\n44"]
53 [shape="circle" label="N53\n43"]
54 [shape="circle" label="N54\n42"]
42 [shape="diamond" label="N42\n39"]
45 [shape="circle" label="N45\n38"]
46 [shape="circle" label="N46\n37"]
44 [shape="circle" label="N44\n36"]
node [shape="circle"]
subgraph cluster_daio {
label="daio()"
24 -> 25 [label="Function start dummy edge"]
25 -> 28 [label="[reset == 0]"]
25 -> 27 [label="[!(reset == 0)]"]
27 -> 29 [label="smain.rx_status_3 = 0;"]
29 -> 30 [label="smain.rx_status_2 = 0;"]
30 -> 31 [label="smain.load_A = 0;"]
31 -> 32 [label="*load_A = 0;"]
32 -> 33 [label="smain.load_B = 0;"]
33 -> 34 [label="*load_B = 0;"]
34 -> 35 [label="smain.load_buff = 0;"]
35 -> 36 [label="*load_buff = 0;"]
36 -> 37 [label="smain.bit_count_A = 0;"]
37 -> 38 [label="smain.bit_count_B = 0;"]
38 -> 39 [label="smain.frame_counter = 0;"]
39 -> 40 [label="smain.pc = L0;"]
40 -> 26 [label=""]
26 -> 197 [label="[reset == 0]"]
26 -> 196 [label="[!(reset == 0)]"]
196 -> 198 [label="smain.shift_reg = 0;"]
198 -> 199 [label="*shift_reg = 0;"]
199 -> 200 [label="smain.rx_status_1 = 0;"]
200 -> 201 [label="smain.rx_status_0 = 0;"]
201 -> 195 [label=""]
195 -> 219 [label="[reset == 0]"]
195 -> 214 [label="[!(reset == 0)]"]
214 -> 220 [label="smain.parity = 0;"]
220 -> 221 [label="*parity = 0;"]
221 -> 213 [label=""]
213 -> 227 [label="*rx_status = ((((smain.rx_status_3) << 3) | ((smain.rx_status_2) << 2)) | ((smain.rx_status_1) << 1)) | (smain.rx_status_0);"]
227 -> 228 [label="*frame_ofs = ((*frame_ofs) & 12) | ((smain.frame_counter) & 3);"]
228 -> 23 [label="default return"]
219 -> 214 [label="[(smain.pc) == L2]"]
219 -> 218 [label="[!((smain.pc) == L2)]"]
218 -> 214 [label="[(smain.pc) == L4]"]
218 -> 217 [label="[!((smain.pc) == L4)]"]
217 -> 214 [label="[(smain.pc) == L6]"]
217 -> 216 [label="[!((smain.pc) == L6)]"]
216 -> 214 [label="[(smain.pc) == L8]"]
216 -> 215 [label="[!((smain.pc) == L8)]"]
215 -> 224 [label="[(smain.pc) != L0]"]
215 -> 222 [label="[!((smain.pc) != L0)]"]
222 -> 213 [label=""]
224 -> 223 [label="[(smain.pc) != L1]"]
224 -> 222 [label="[!((smain.pc) != L1)]"]
223 -> 225 [label="smain.parity = (smain.parity) ^ bit_in;"]
225 -> 226 [label="*parity = (smain.parity) ^ bit_in;"]
226 -> 213 [label=""]
197 -> 204 [label="[(smain.pc) != L0]"]
197 -> 202 [label="[!((smain.pc) != L0)]"]
202 -> 195 [label=""]
204 -> 203 [label="[(smain.pc) != L1]"]
204 -> 202 [label="[!((smain.pc) != L1)]"]
203 -> 205 [label="smain.shift_reg = ((((smain.shift_reg) & 524287) << 1) | bit_in) & 1048575;"]
205 -> 206 [label="*shift_reg = (((((smain.shift_reg) >> 0) & 524287) << 1) | bit_in) & 1048575;"]
206 -> 207 [label="[carrier_loss == 0]"]
206 -> 208 [label="[!(carrier_loss == 0)]"]
208 -> 209 [label="smain.rx_status_0 = 1;"]
209 -> 207 [label=""]
207 -> 210 [label="[biphase_violation == 0]"]
207 -> 211 [label="[!(biphase_violation == 0)]"]
211 -> 212 [label="smain.rx_status_1 = 1;"]
212 -> 195 [label=""]
210 -> 195 [label=""]
28 -> 42 [label="[(smain.pc) == L0]"]
28 -> 43 [label="[!((smain.pc) == L0)]"]
43 -> 48 [label="[(smain.pc) == L1]"]
43 -> 49 [label="[!((smain.pc) == L1)]"]
49 -> 71 [label="[(smain.pc) == L2]"]
49 -> 72 [label="[!((smain.pc) == L2)]"]
72 -> 78 [label="[(smain.pc) == L3]"]
72 -> 79 [label="[!((smain.pc) == L3)]"]
79 -> 102 [label="[(smain.pc) == L4]"]
79 -> 103 [label="[!((smain.pc) == L4)]"]
103 -> 108 [label="[(smain.pc) == L5]"]
103 -> 109 [label="[!((smain.pc) == L5)]"]
109 -> 128 [label="[(smain.pc) == L6]"]
109 -> 129 [label="[!((smain.pc) == L6)]"]
129 -> 137 [label="[(smain.pc) == L7]"]
129 -> 138 [label="[!((smain.pc) == L7)]"]
138 -> 167 [label="[(smain.pc) == L8]"]
138 -> 168 [label="[!((smain.pc) == L8)]"]
168 -> 172 [label="[(smain.pc) == L9]"]
168 -> 173 [label="[!((smain.pc) == L9)]"]
173 -> 192 [label="[(smain.pc) == L10]"]
173 -> 191 [label="[!((smain.pc) == L10)]"]
191 -> 26 [label=""]
192 -> 193 [label="smain.frame_counter = (((smain.frame_counter) & 511) + 1) & 511;"]
193 -> 194 [label="smain.pc = L6;"]
194 -> 26 [label=""]
172 -> 175 [label="[((smain.bit_count_B) & 127) < 32]"]
172 -> 176 [label="[!(((smain.bit_count_B) & 127) < 32)]"]
176 -> 190 [label="smain.pc = L10;"]
190 -> 174 [label=""]
174 -> 26 [label=""]
175 -> 179 [label="[((smain.bit_count_B) & 127) == 4]"]
175 -> 177 [label="[!(((smain.bit_count_B) & 127) == 4)]"]
177 -> 182 [label="[((smain.bit_count_B) & 127) == 31]"]
177 -> 181 [label="[!(((smain.bit_count_B) & 127) == 31)]"]
181 -> 186 [label="[((smain.bit_count_B) & 127) == 2]"]
181 -> 185 [label="[!(((smain.bit_count_B) & 127) == 2)]"]
185 -> 189 [label="smain.bit_count_B = (((smain.bit_count_B) & 127) + 1) & 127;"]
189 -> 174 [label=""]
186 -> 187 [label="smain.load_A = 0;"]
187 -> 188 [label="*load_A = 0;"]
188 -> 185 [label=""]
182 -> 183 [label="smain.load_B = 1;"]
183 -> 184 [label="*load_B = 1;"]
184 -> 181 [label=""]
179 -> 178 [label="[preamble_3 == 0]"]
179 -> 177 [label="[!(preamble_3 == 0)]"]
178 -> 180 [label="smain.rx_status_2 = 1;"]
180 -> 177 [label=""]
167 -> 169 [label="smain.bit_count_B = 1;"]
169 -> 170 [label="smain.pc = L9;"]
170 -> 26 [label=""]
137 -> 140 [label="[(smain.bit_count_A) < 32]"]
137 -> 141 [label="[!((smain.bit_count_A) < 32)]"]
141 -> 165 [label="smain.pc = L8;"]
165 -> 139 [label=""]
139 -> 26 [label=""]
140 -> 144 [label="[((smain.bit_count_A) & 127) == 4]"]
140 -> 142 [label="[!(((smain.bit_count_A) & 127) == 4)]"]
142 -> 147 [label="[((smain.bit_count_A) & 127) == 31]"]
142 -> 146 [label="[!(((smain.bit_count_A) & 127) == 31)]"]
146 -> 151 [label="[((smain.bit_count_A) & 127) == 2]"]
146 -> 150 [label="[!(((smain.bit_count_A) & 127) == 2)]"]
150 -> 155 [label="[((smain.bit_count_A) & 127) == 3]"]
150 -> 154 [label="[!(((smain.bit_count_A) & 127) == 3)]"]
154 -> 161 [label="[((smain.bit_count_A) & 127) == 5]"]
154 -> 160 [label="[!(((smain.bit_count_A) & 127) == 5)]"]
160 -> 164 [label="smain.bit_count_A = (((smain.bit_count_A) & 127) + 1) & 127;"]
164 -> 139 [label=""]
161 -> 162 [label="smain.load_buff = 0;"]
162 -> 163 [label="*load_buff = 0;"]
163 -> 160 [label=""]
155 -> 157 [label="[((smain.frame_counter) & 3) == 0]"]
155 -> 156 [label="[!(((smain.frame_counter) & 3) == 0)]"]
156 -> 154 [label=""]
157 -> 158 [label="smain.load_buff = 1;"]
158 -> 159 [label="*load_buff = 1;"]
159 -> 154 [label=""]
151 -> 152 [label="smain.load_B = 0;"]
152 -> 153 [label="*load_B = 0;"]
153 -> 150 [label=""]
147 -> 148 [label="smain.load_A = 1;"]
148 -> 149 [label="*load_A = 1;"]
149 -> 146 [label=""]
144 -> 143 [label="[preamble_2 == 0]"]
144 -> 142 [label="[!(preamble_2 == 0)]"]
143 -> 145 [label="smain.rx_status_2 = 1;"]
145 -> 142 [label=""]
128 -> 131 [label="[((smain.frame_counter) & 511) < 191]"]
128 -> 132 [label="[!(((smain.frame_counter) & 511) < 191)]"]
132 -> 135 [label="smain.pc = L0;"]
135 -> 130 [label=""]
130 -> 26 [label=""]
131 -> 133 [label="smain.bit_count_A = 1;"]
133 -> 134 [label="smain.pc = L7;"]
134 -> 130 [label=""]
108 -> 111 [label="[((smain.bit_count_B) & 127) < 32]"]
108 -> 112 [label="[!(((smain.bit_count_B) & 127) < 32)]"]
112 -> 126 [label="smain.pc = L6;"]
126 -> 110 [label=""]
110 -> 26 [label=""]
111 -> 115 [label="[((smain.bit_count_B) & 127) == 4]"]
111 -> 113 [label="[!(((smain.bit_count_B) & 127) == 4)]"]
113 -> 118 [label="[((smain.bit_count_B) & 127) == 31]"]
113 -> 117 [label="[!(((smain.bit_count_B) & 127) == 31)]"]
117 -> 122 [label="[((smain.bit_count_B) & 127) == 2]"]
117 -> 121 [label="[!(((smain.bit_count_B) & 127) == 2)]"]
121 -> 125 [label="smain.bit_count_B = (((smain.bit_count_B) & 127) + 1) & 127;"]
125 -> 110 [label=""]
122 -> 123 [label="smain.load_A = 0;"]
123 -> 124 [label="*load_A = 0;"]
124 -> 121 [label=""]
118 -> 119 [label="smain.load_B = 1;"]
119 -> 120 [label="*load_B = 1;"]
120 -> 117 [label=""]
115 -> 114 [label="[preamble_3 == 0]"]
115 -> 113 [label="[!(preamble_3 == 0)]"]
114 -> 116 [label="smain.rx_status_2 = 1;"]
116 -> 113 [label=""]
102 -> 104 [label="smain.bit_count_B = 1;"]
104 -> 105 [label="smain.frame_counter = 1;"]
105 -> 106 [label="smain.pc = L5;"]
106 -> 26 [label=""]
78 -> 81 [label="[((smain.bit_count_A) & 127) < 32]"]
78 -> 82 [label="[!(((smain.bit_count_A) & 127) < 32)]"]
82 -> 100 [label="smain.pc = L4;"]
100 -> 80 [label=""]
80 -> 26 [label=""]
81 -> 84 [label="[((smain.bit_count_A) & 127) == 31]"]
81 -> 83 [label="[!(((smain.bit_count_A) & 127) == 31)]"]
83 -> 88 [label="[((smain.bit_count_A) & 127) == 2]"]
83 -> 87 [label="[!(((smain.bit_count_A) & 127) == 2)]"]
87 -> 92 [label="[((smain.bit_count_A) & 127) == 3]"]
87 -> 91 [label="[!(((smain.bit_count_A) & 127) == 3)]"]
91 -> 96 [label="[((smain.bit_count_A) & 127) == 5]"]
91 -> 95 [label="[!(((smain.bit_count_A) & 127) == 5)]"]
95 -> 99 [label="smain.bit_count_A = (((smain.bit_count_A) & 127) + 1) & 127;"]
99 -> 80 [label=""]
96 -> 97 [label="smain.load_buff = 0;"]
97 -> 98 [label="*load_buff = 0;"]
98 -> 95 [label=""]
92 -> 93 [label="smain.load_buff = 1;"]
93 -> 94 [label="*load_buff = 1;"]
94 -> 91 [label=""]
88 -> 89 [label="smain.load_B = 0;"]
89 -> 90 [label="*load_B = 0;"]
90 -> 87 [label=""]
84 -> 85 [label="smain.load_A = 1;"]
85 -> 86 [label="*load_A = 1;"]
86 -> 83 [label=""]
71 -> 73 [label="[preamble_1 == 0]"]
71 -> 74 [label="[!(preamble_1 == 0)]"]
74 -> 75 [label="smain.bit_count_A = 4;"]
75 -> 76 [label="smain.pc = L3;"]
76 -> 73 [label=""]
73 -> 26 [label=""]
48 -> 51 [label="[(rx_control & 3) == 0]"]
48 -> 52 [label="[!((rx_control & 3) == 0)]"]
52 -> 56 [label="[(rx_control & 3) == 1]"]
52 -> 57 [label="[!((rx_control & 3) == 1)]"]
57 -> 61 [label="[(rx_control & 3) == 2]"]
57 -> 62 [label="[!((rx_control & 3) == 2)]"]
62 -> 66 [label="[(rx_control & 3) == 3]"]
62 -> 65 [label="[!((rx_control & 3) == 3)]"]
65 -> 50 [label=""]
50 -> 69 [label="smain.pc = L2;"]
69 -> 26 [label=""]
66 -> 67 [label="smain.clock_out = (xtal >> 3) & 1;"]
67 -> 68 [label="*clock_out = (xtal >> 3) & 1;"]
68 -> 50 [label=""]
61 -> 63 [label="smain.clock_out = (xtal >> 2) & 1;"]
63 -> 64 [label="*clock_out = (xtal >> 2) & 1;"]
64 -> 50 [label=""]
56 -> 58 [label="smain.clock_out = (xtal >> 1) & 1;"]
58 -> 59 [label="*clock_out = (xtal >> 1) & 1;"]
59 -> 50 [label=""]
51 -> 53 [label="smain.clock_out = (xtal >> 0) & 1;"]
53 -> 54 [label="*clock_out = (xtal >> 0) & 1;"]
54 -> 50 [label=""]
42 -> 44 [label="[((rx_control >> 2) & 1) == 0]"]
42 -> 45 [label="[!(((rx_control >> 2) & 1) == 0)]"]
45 -> 46 [label="smain.pc = L1;"]
46 -> 44 [label=""]
44 -> 26 [label=""]}
subgraph cluster_initial {
label="initial()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="smain.bit_count_A = 0;"]
3 -> 4 [label="smain.bit_count_B = 0;"]
4 -> 5 [label="smain.frame_counter = 0;"]
5 -> 6 [label="smain.clock_out = 0;"]
6 -> 7 [label="*clock_out = 0;"]
7 -> 8 [label="smain.rx_status_3 = 0;"]
8 -> 9 [label="smain.rx_status_2 = 0;"]
9 -> 10 [label="smain.rx_status_1 = 0;"]
10 -> 11 [label="smain.rx_status_0 = 0;"]
11 -> 12 [label="smain.parity = 0;"]
12 -> 13 [label="*parity = 0;"]
13 -> 14 [label="smain.load_A = 0;"]
14 -> 15 [label="*load_A = 0;"]
15 -> 16 [label="smain.load_B = 0;"]
16 -> 17 [label="*load_B = 0;"]
17 -> 18 [label="smain.load_buff = 0;"]
18 -> 19 [label="*load_buff = 0;"]
19 -> 20 [label="smain.shift_reg = 0;"]
20 -> 21 [label="*shift_reg = 0;"]
21 -> 22 [label="smain.pc = L0;"]
22 -> 0 [label="default return"]}
subgraph cluster_main {
label="main()"
230 -> 277 [label="INIT GLOBAL VARS"]
277 -> 278 [label="typedef unsigned long int size_t;"]
278 -> 279 [label="typedef unsigned char __u_char;"]
279 -> 280 [label="typedef unsigned short int __u_short;"]
280 -> 281 [label="typedef unsigned int __u_int;"]
281 -> 282 [label="typedef unsigned long int __u_long;"]
282 -> 283 [label="typedef signed char __int8_t;"]
283 -> 284 [label="typedef unsigned char __uint8_t;"]
284 -> 285 [label="typedef signed short int __int16_t;"]
285 -> 286 [label="typedef unsigned short int __uint16_t;"]
286 -> 287 [label="typedef signed int __int32_t;"]
287 -> 288 [label="typedef unsigned int __uint32_t;"]
288 -> 289 [label="typedef signed long int __int64_t;"]
289 -> 290 [label="typedef unsigned long int __uint64_t;"]
290 -> 291 [label="typedef long int __quad_t;"]
291 -> 292 [label="typedef unsigned long int __u_quad_t;"]
292 -> 293 [label="typedef unsigned long int __dev_t;"]
293 -> 294 [label="typedef unsigned int __uid_t;"]
294 -> 295 [label="typedef unsigned int __gid_t;"]
295 -> 296 [label="typedef unsigned long int __ino_t;"]
296 -> 297 [label="typedef unsigned long int __ino64_t;"]
297 -> 298 [label="typedef unsigned int __mode_t;"]
298 -> 299 [label="typedef unsigned long int __nlink_t;"]
299 -> 300 [label="typedef long int __off_t;"]
300 -> 301 [label="typedef long int __off64_t;"]
301 -> 302 [label="typedef int __pid_t;"]
302 -> 303 [label="struct __anon_type___fsid_t {   int __val[2]; } ;"]
303 -> 304 [label="typedef struct __anon_type___fsid_t __fsid_t;"]
304 -> 305 [label="typedef long int __clock_t;"]
305 -> 306 [label="typedef unsigned long int __rlim_t;"]
306 -> 307 [label="typedef unsigned long int __rlim64_t;"]
307 -> 308 [label="typedef unsigned int __id_t;"]
308 -> 309 [label="typedef long int __time_t;"]
309 -> 310 [label="typedef unsigned int __useconds_t;"]
310 -> 311 [label="typedef long int __suseconds_t;"]
311 -> 312 [label="typedef int __daddr_t;"]
312 -> 313 [label="typedef int __key_t;"]
313 -> 314 [label="typedef int __clockid_t;"]
314 -> 315 [label="typedef void *__timer_t;"]
315 -> 316 [label="typedef long int __blksize_t;"]
316 -> 317 [label="typedef long int __blkcnt_t;"]
317 -> 318 [label="typedef long int __blkcnt64_t;"]
318 -> 319 [label="typedef unsigned long int __fsblkcnt_t;"]
319 -> 320 [label="typedef unsigned long int __fsblkcnt64_t;"]
320 -> 321 [label="typedef unsigned long int __fsfilcnt_t;"]
321 -> 322 [label="typedef unsigned long int __fsfilcnt64_t;"]
322 -> 323 [label="typedef long int __fsword_t;"]
323 -> 324 [label="typedef long int __ssize_t;"]
324 -> 325 [label="typedef long int __syscall_slong_t;"]
325 -> 326 [label="typedef unsigned long int __syscall_ulong_t;"]
326 -> 327 [label="typedef __off64_t __loff_t;"]
327 -> 328 [label="typedef __quad_t *__qaddr_t;"]
328 -> 329 [label="typedef char *__caddr_t;"]
329 -> 330 [label="typedef long int __intptr_t;"]
330 -> 331 [label="typedef unsigned int __socklen_t;"]
331 -> 332 [label="struct _IO_FILE ;"]
332 -> 333 [label="typedef struct _IO_FILE FILE;"]
333 -> 334 [label="typedef struct _IO_FILE __FILE;"]
334 -> 335 [label="union __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;"]
335 -> 336 [label="struct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;"]
336 -> 337 [label="typedef struct __anon_type___mbstate_t __mbstate_t;"]
337 -> 338 [label="struct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;"]
338 -> 339 [label="typedef struct __anon_type__G_fpos_t _G_fpos_t;"]
339 -> 340 [label="struct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;"]
340 -> 341 [label="typedef struct __anon_type__G_fpos_t _G_fpos64_t;"]
341 -> 342 [label="typedef __builtin_va_list __gnuc_va_list;"]
342 -> 343 [label="struct _IO_jump_t ;"]
343 -> 344 [label="typedef void _IO_lock_t;"]
344 -> 345 [label="struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;"]
345 -> 346 [label="enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;"]
346 -> 347 [label="struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;"]
347 -> 348 [label="typedef struct _IO_FILE _IO_FILE;"]
348 -> 349 [label="struct _IO_FILE_plus ;"]
349 -> 350 [label="extern struct _IO_FILE_plus _IO_2_1_stdin_;"]
350 -> 351 [label="extern struct _IO_FILE_plus _IO_2_1_stdout_;"]
351 -> 352 [label="extern struct _IO_FILE_plus _IO_2_1_stderr_;"]
352 -> 353 [label="typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);"]
353 -> 354 [label="typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);"]
354 -> 355 [label="typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);"]
355 -> 356 [label="typedef int __io_close_fn(void *__cookie);"]
356 -> 357 [label="int __underflow(_IO_FILE *);"]
357 -> 358 [label="int __uflow(_IO_FILE *);"]
358 -> 359 [label="int __overflow(_IO_FILE *, int);"]
359 -> 360 [label="int _IO_getc(_IO_FILE *__fp);"]
360 -> 361 [label="int _IO_putc(int __c, _IO_FILE *__fp);"]
361 -> 362 [label="int _IO_feof(_IO_FILE *__fp);"]
362 -> 363 [label="int _IO_ferror(_IO_FILE *__fp);"]
363 -> 364 [label="int _IO_peekc_locked(_IO_FILE *__fp);"]
364 -> 365 [label="void _IO_flockfile(_IO_FILE *);"]
365 -> 366 [label="void _IO_funlockfile(_IO_FILE *);"]
366 -> 367 [label="int _IO_ftrylockfile(_IO_FILE *);"]
367 -> 368 [label="int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);"]
368 -> 369 [label="int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );"]
369 -> 370 [label="__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );"]
370 -> 371 [label="size_t  _IO_sgetn(_IO_FILE *, void *, size_t );"]
371 -> 372 [label="__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);"]
372 -> 373 [label="__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);"]
373 -> 374 [label="void _IO_free_backup_area(_IO_FILE *);"]
374 -> 375 [label="typedef __gnuc_va_list va_list;"]
375 -> 376 [label="typedef __off_t off_t;"]
376 -> 377 [label="typedef __ssize_t ssize_t;"]
377 -> 378 [label="typedef _G_fpos_t fpos_t;"]
378 -> 379 [label="extern struct _IO_FILE *stdin;"]
379 -> 380 [label="extern struct _IO_FILE *stdout;"]
380 -> 381 [label="extern struct _IO_FILE *stderr;"]
381 -> 382 [label="int remove(const char *__filename);"]
382 -> 383 [label="int rename(const char *__old, const char *__new);"]
383 -> 384 [label="int renameat(int __oldfd, const char *__old, int __newfd, const char *__new);"]
384 -> 385 [label="FILE * tmpfile();"]
385 -> 386 [label="char * tmpnam(char *__s);"]
386 -> 387 [label="char * tmpnam_r(char *__s);"]
387 -> 388 [label="char * tempnam(const char *__dir, const char *__pfx);"]
388 -> 389 [label="int fclose(FILE *__stream);"]
389 -> 390 [label="int fflush(FILE *__stream);"]
390 -> 391 [label="int fflush_unlocked(FILE *__stream);"]
391 -> 392 [label="FILE * fopen(const char *__filename, const char *__modes);"]
392 -> 393 [label="FILE * freopen(const char *__filename, const char *__modes, FILE *__stream);"]
393 -> 394 [label="FILE * fdopen(int __fd, const char *__modes);"]
394 -> 395 [label="FILE * fmemopen(void *__s, size_t __len, const char *__modes);"]
395 -> 396 [label="FILE * open_memstream(char **__bufloc, size_t *__sizeloc);"]
396 -> 397 [label="void setbuf(FILE *__stream, char *__buf);"]
397 -> 398 [label="int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);"]
398 -> 399 [label="void setbuffer(FILE *__stream, char *__buf, size_t __size);"]
399 -> 400 [label="void setlinebuf(FILE *__stream);"]
400 -> 401 [label="int fprintf(FILE *__stream, const char *__format, ...);"]
401 -> 402 [label="int printf(const char *__format, ...);"]
402 -> 403 [label="int sprintf(char *__s, const char *__format, ...);"]
403 -> 404 [label="int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
404 -> 405 [label="int vprintf(const char *__format, __gnuc_va_list __arg);"]
405 -> 406 [label="int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);"]
406 -> 407 [label="int snprintf(char *__s, size_t __maxlen, const char *__format, ...);"]
407 -> 408 [label="int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);"]
408 -> 409 [label="int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);"]
409 -> 410 [label="int dprintf(int __fd, const char *__fmt, ...);"]
410 -> 411 [label="int fscanf(FILE *__stream, const char *__format, ...);"]
411 -> 412 [label="int scanf(const char *__format, ...);"]
412 -> 413 [label="int sscanf(const char *__s, const char *__format, ...);"]
413 -> 414 [label="int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);"]
414 -> 415 [label="int vscanf(const char *__format, __gnuc_va_list __arg);"]
415 -> 416 [label="int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);"]
416 -> 417 [label="int fgetc(FILE *__stream);"]
417 -> 418 [label="int getc(FILE *__stream);"]
418 -> 419 [label="int getchar();"]
419 -> 420 [label="int getc_unlocked(FILE *__stream);"]
420 -> 421 [label="int getchar_unlocked();"]
421 -> 422 [label="int fgetc_unlocked(FILE *__stream);"]
422 -> 423 [label="int fputc(int __c, FILE *__stream);"]
423 -> 424 [label="int putc(int __c, FILE *__stream);"]
424 -> 425 [label="int putchar(int __c);"]
425 -> 426 [label="int fputc_unlocked(int __c, FILE *__stream);"]
426 -> 427 [label="int putc_unlocked(int __c, FILE *__stream);"]
427 -> 428 [label="int putchar_unlocked(int __c);"]
428 -> 429 [label="int getw(FILE *__stream);"]
429 -> 430 [label="int putw(int __w, FILE *__stream);"]
430 -> 431 [label="char * fgets(char *__s, int __n, FILE *__stream);"]
431 -> 432 [label="__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
432 -> 433 [label="__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);"]
433 -> 434 [label="__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);"]
434 -> 435 [label="int fputs(const char *__s, FILE *__stream);"]
435 -> 436 [label="int puts(const char *__s);"]
436 -> 437 [label="int ungetc(int __c, FILE *__stream);"]
437 -> 438 [label="size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
438 -> 439 [label="size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);"]
439 -> 440 [label="size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
440 -> 441 [label="size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);"]
441 -> 442 [label="int fseek(FILE *__stream, long int __off, int __whence);"]
442 -> 443 [label="long int ftell(FILE *__stream);"]
443 -> 444 [label="void rewind(FILE *__stream);"]
444 -> 445 [label="int fseeko(FILE *__stream, __off_t __off, int __whence);"]
445 -> 446 [label="__off_t  ftello(FILE *__stream);"]
446 -> 447 [label="int fgetpos(FILE *__stream, fpos_t *__pos);"]
447 -> 448 [label="int fsetpos(FILE *__stream, fpos_t *__pos);"]
448 -> 449 [label="void clearerr(FILE *__stream);"]
449 -> 450 [label="int feof(FILE *__stream);"]
450 -> 451 [label="int ferror(FILE *__stream);"]
451 -> 452 [label="void clearerr_unlocked(FILE *__stream);"]
452 -> 453 [label="int feof_unlocked(FILE *__stream);"]
453 -> 454 [label="int ferror_unlocked(FILE *__stream);"]
454 -> 455 [label="void perror(const char *__s);"]
455 -> 456 [label="extern int sys_nerr;"]
456 -> 457 [label="extern const const char *sys_errlist[];"]
457 -> 458 [label="int fileno(FILE *__stream);"]
458 -> 459 [label="int fileno_unlocked(FILE *__stream);"]
459 -> 460 [label="FILE * popen(const char *__command, const char *__modes);"]
460 -> 461 [label="int pclose(FILE *__stream);"]
461 -> 462 [label="char * ctermid(char *__s);"]
462 -> 463 [label="void flockfile(FILE *__stream);"]
463 -> 464 [label="int ftrylockfile(FILE *__stream);"]
464 -> 465 [label="void funlockfile(FILE *__stream);"]
465 -> 466 [label="void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);"]
466 -> 467 [label="void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);"]
467 -> 468 [label="void __assert(const char *__assertion, const char *__file, int __line);"]
468 -> 469 [label="unsigned char nondet_uchar();"]
469 -> 470 [label="_Bool nondet_bool();"]
470 -> 471 [label="struct state_elements_main {   _Bool rx_status_3;   _Bool rx_status_2;   _Bool rx_status_1;   _Bool rx_status_0;   unsigned char pc;   _Bool clock_out;   _Bool parity;   _Bool load_A;   _Bool load_B;   _Bool load_buff;   unsigned int shift_reg;   unsigned char bit_count_A;   unsigned char bit_count_B;   unsigned short int frame_counter; } ;"]
471 -> 472 [label="struct state_elements_main smain = {  };"]
472 -> 473 [label="int L0 = 0;"]
473 -> 474 [label="int L1 = 1;"]
474 -> 475 [label="int L2 = 2;"]
475 -> 476 [label="int L3 = 3;"]
476 -> 477 [label="int L4 = 4;"]
477 -> 478 [label="int L5 = 5;"]
478 -> 479 [label="int L6 = 6;"]
479 -> 480 [label="int L7 = 7;"]
480 -> 481 [label="int L8 = 8;"]
481 -> 482 [label="int L9 = 9;"]
482 -> 483 [label="int L10 = 10;"]
483 -> 484 [label="void initial(unsigned char xtal, unsigned char rx_control, _Bool reset, _Bool bit_in, _Bool preamble_1, _Bool preamble_2, _Bool preamble_3, _Bool carrier_loss, _Bool biphase_violation, _Bool *clock_out, unsigned char *rx_status, _Bool *parity, _Bool *load_A, _Bool *load_B, _Bool *load_buff, unsigned int *shift_reg, unsigned char *frame_ofs);"]
484 -> 485 [label="void daio(unsigned char xtal, unsigned char rx_control, _Bool reset, _Bool bit_in, _Bool preamble_1, _Bool preamble_2, _Bool preamble_3, _Bool carrier_loss, _Bool biphase_violation, _Bool *clock_out, unsigned char *rx_status, _Bool *parity, _Bool *load_A, _Bool *load_B, _Bool *load_buff, unsigned int *shift_reg, unsigned char *frame_ofs);"]
485 -> 486 [label="void main();"]
486 -> 231 [label="Function start dummy edge"]
231 -> 232 [label="unsigned char xtal;"]
232 -> 233 [label="unsigned char rx_control;"]
233 -> 234 [label="_Bool reset;"]
234 -> 235 [label="_Bool bit_in;"]
235 -> 236 [label="_Bool preamble_1;"]
236 -> 237 [label="_Bool preamble_2;"]
237 -> 238 [label="_Bool preamble_3;"]
238 -> 239 [label="_Bool carrier_loss;"]
239 -> 240 [label="_Bool biphase_violation;"]
240 -> 241 [label="_Bool clock_out;"]
241 -> 242 [label="unsigned char rx_status;"]
242 -> 243 [label="_Bool parity;"]
243 -> 244 [label="_Bool load_A;"]
244 -> 245 [label="_Bool load_B;"]
245 -> 246 [label="_Bool load_buff;"]
246 -> 247 [label="unsigned int shift_reg;"]
247 -> 248 [label="unsigned char frame_ofs;"]
248 -> 249 [label="unsigned int i = 0;"]
249 -> 250 [label="initial(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs);" style="dotted" arrowhead="empty"]
250 -> 251 [label="reset = 1;"]
251 -> 252 [label="daio(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs);" style="dotted" arrowhead="empty"]
265 -> 266 [label="void __CPAchecker_TMP_0;"]
266 -> 267 [label="[((rx_status >> 3) & 1) == 0]"]
266 -> 268 [label="[!(((rx_status >> 3) & 1) == 0)]"]
268 -> 269 [label="__assert_fail(\"((rx_status >> 3) & 1) == 0\", \"main.c\", 326, \"__PRETTY_FUNCTION__\");"]
269 -> 270 [label="0;"]
270 -> 271 [label="void __CPAchecker_TMP_2;"]
271 -> 272 [label="[load_A == 1]"]
271 -> 274 [label="[!(load_A == 1)]"]
274 -> 272 [label="[load_B == 0]"]
274 -> 273 [label="[!(load_B == 0)]"]
273 -> 275 [label="__assert_fail(\"(load_A==1 || load_B==0)\", \"main.c\", 327, \"__PRETTY_FUNCTION__\");"]
275 -> 276 [label="0;"]
276 -> 254 [label=""]
254 -> 255 [label=""]
255 -> 257 [label="xtal = nondet_uchar();"]
257 -> 258 [label="rx_control = nondet_uchar();"]
258 -> 259 [label="bit_in = nondet_bool();"]
259 -> 260 [label="preamble_1 = nondet_bool();"]
260 -> 261 [label="preamble_2 = nondet_bool();"]
261 -> 262 [label="preamble_3 = nondet_bool();"]
262 -> 263 [label="carrier_loss = nondet_bool();"]
263 -> 264 [label="biphase_violation = nondet_bool();"]
264 -> 265 [label="daio(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs);" style="dotted" arrowhead="empty"]
272 -> 275 [label="0;"]
267 -> 269 [label="0;"]
252 -> 253 [label="reset = 0;"]
253 -> 254 [label="while"]}
249 -> 1 [label="initial(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs)"]
0 -> 250 [label="Return edge from initial to main"]
251 -> 24 [label="daio(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs)"]
23 -> 252 [label="Return edge from daio to main"]
23 -> 265 [label="Return edge from daio to main"]
264 -> 24 [label="daio(xtal, rx_control, reset, bit_in, preamble_1, preamble_2, preamble_3, carrier_loss, biphase_violation, &clock_out, &rx_status, &parity, &load_A, &load_B, &load_buff, &shift_reg, &frame_ofs)"]}