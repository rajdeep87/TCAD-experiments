digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N112\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
139 [label="139 @ N135\nmain\n" id="139"]
140 [label="140 @ N120\nmain\n" id="140"]
141 [label="141 @ N1\ninitial entry\n" id="141"]
142 [label="142 @ N22\ninitial\n" id="142"]
143 [label="143 @ N0\ninitial exit\n" id="143"]
144 [label="144 @ N121\nmain\n" id="144"]
0 -> 139 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 139"]
139 -> 140 [label="Lines 39 - 963: \ltypedef unsigned long int size_t;\ltypedef unsigned char __u_char;\ltypedef unsigned short int __u_short;\ltypedef unsigned int __u_int;\ltypedef unsigned long int __u_long;\ltypedef signed char __int8_t;\ltypedef unsigned char __uint8_t;\ltypedef signed short int __int16_t;\ltypedef unsigned short int __uint16_t;\ltypedef signed int __int32_t;\ltypedef unsigned int __uint32_t;\ltypedef signed long int __int64_t;\ltypedef unsigned long int __uint64_t;\ltypedef long int __quad_t;\ltypedef unsigned long int __u_quad_t;\ltypedef unsigned long int __dev_t;\ltypedef unsigned int __uid_t;\ltypedef unsigned int __gid_t;\ltypedef unsigned long int __ino_t;\ltypedef unsigned long int __ino64_t;\ltypedef unsigned int __mode_t;\ltypedef unsigned long int __nlink_t;\ltypedef long int __off_t;\ltypedef long int __off64_t;\ltypedef int __pid_t;\lstruct __anon_type___fsid_t {   int __val[2]; } ;\ltypedef struct __anon_type___fsid_t __fsid_t;\ltypedef long int __clock_t;\ltypedef unsigned long int __rlim_t;\ltypedef unsigned long int __rlim64_t;\ltypedef unsigned int __id_t;\ltypedef long int __time_t;\ltypedef unsigned int __useconds_t;\ltypedef long int __suseconds_t;\ltypedef int __daddr_t;\ltypedef int __key_t;\ltypedef int __clockid_t;\ltypedef void *__timer_t;\ltypedef long int __blksize_t;\ltypedef long int __blkcnt_t;\ltypedef long int __blkcnt64_t;\ltypedef unsigned long int __fsblkcnt_t;\ltypedef unsigned long int __fsblkcnt64_t;\ltypedef unsigned long int __fsfilcnt_t;\ltypedef unsigned long int __fsfilcnt64_t;\ltypedef long int __fsword_t;\ltypedef long int __ssize_t;\ltypedef long int __syscall_slong_t;\ltypedef unsigned long int __syscall_ulong_t;\ltypedef __off64_t __loff_t;\ltypedef __quad_t *__qaddr_t;\ltypedef char *__caddr_t;\ltypedef long int __intptr_t;\ltypedef unsigned int __socklen_t;\lstruct _IO_FILE ;\ltypedef struct _IO_FILE FILE;\ltypedef struct _IO_FILE __FILE;\lunion __anon_type_0 {   unsigned int __wch;   char __wchb[4]; } ;\lstruct __anon_type___mbstate_t {   int __count;   union __anon_type_0 __value; } ;\ltypedef struct __anon_type___mbstate_t __mbstate_t;\lstruct __anon_type__G_fpos_t {   __off_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos_t;\lstruct __anon_type__G_fpos64_t {   __off64_t __pos;   __mbstate_t __state; } ;\ltypedef struct __anon_type__G_fpos_t _G_fpos64_t;\ltypedef __builtin_va_list __gnuc_va_list;\lstruct _IO_jump_t ;\ltypedef void _IO_lock_t;\lstruct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ;\lenum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ;\lstruct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40]; } ;\ltypedef struct _IO_FILE _IO_FILE;\lstruct _IO_FILE_plus ;\lextern struct _IO_FILE_plus _IO_2_1_stdin_;\lextern struct _IO_FILE_plus _IO_2_1_stdout_;\lextern struct _IO_FILE_plus _IO_2_1_stderr_;\ltypedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);\ltypedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n);\ltypedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w);\ltypedef int __io_close_fn(void *__cookie);\lint __underflow(_IO_FILE *);\lint __uflow(_IO_FILE *);\lint __overflow(_IO_FILE *, int);\lint _IO_getc(_IO_FILE *__fp);\lint _IO_putc(int __c, _IO_FILE *__fp);\lint _IO_feof(_IO_FILE *__fp);\lint _IO_ferror(_IO_FILE *__fp);\lint _IO_peekc_locked(_IO_FILE *__fp);\lvoid _IO_flockfile(_IO_FILE *);\lvoid _IO_funlockfile(_IO_FILE *);\lint _IO_ftrylockfile(_IO_FILE *);\lint _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *);\lint _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list );\l__ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t );\lsize_t  _IO_sgetn(_IO_FILE *, void *, size_t );\l__off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int);\l__off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int);\lvoid _IO_free_backup_area(_IO_FILE *);\ltypedef __gnuc_va_list va_list;\ltypedef __off_t off_t;\ltypedef __ssize_t ssize_t;\ltypedef _G_fpos_t fpos_t;\lextern struct _IO_FILE *stdin;\lextern struct _IO_FILE *stdout;\lextern struct _IO_FILE *stderr;\lint remove(const char *__filename);\lint rename(const char *__old, const char *__new);\lint renameat(int __oldfd, const char *__old, int __newfd, const char *__new);\lFILE * tmpfile();\lchar * tmpnam(char *__s);\lchar * tmpnam_r(char *__s);\lchar * tempnam(const char *__dir, const char *__pfx);\lint fclose(FILE *__stream);\lint fflush(FILE *__stream);\lint fflush_unlocked(FILE *__stream);\lFILE * fopen(const char *__filename, const char *__modes);\lFILE * freopen(const char *__filename, const char *__modes, FILE *__stream);\lFILE * fdopen(int __fd, const char *__modes);\lFILE * fmemopen(void *__s, size_t __len, const char *__modes);\lFILE * open_memstream(char **__bufloc, size_t *__sizeloc);\lvoid setbuf(FILE *__stream, char *__buf);\lint setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n);\lvoid setbuffer(FILE *__stream, char *__buf, size_t __size);\lvoid setlinebuf(FILE *__stream);\lint fprintf(FILE *__stream, const char *__format, ...);\lint printf(const char *__format, ...);\lint sprintf(char *__s, const char *__format, ...);\lint vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vprintf(const char *__format, __gnuc_va_list __arg);\lint vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);\lint snprintf(char *__s, size_t __maxlen, const char *__format, ...);\lint vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);\lint vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg);\lint dprintf(int __fd, const char *__fmt, ...);\lint fscanf(FILE *__stream, const char *__format, ...);\lint scanf(const char *__format, ...);\lint sscanf(const char *__s, const char *__format, ...);\lint vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg);\lint vscanf(const char *__format, __gnuc_va_list __arg);\lint vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);\lint fgetc(FILE *__stream);\lint getc(FILE *__stream);\lint getchar();\lint getc_unlocked(FILE *__stream);\lint getchar_unlocked();\lint fgetc_unlocked(FILE *__stream);\lint fputc(int __c, FILE *__stream);\lint putc(int __c, FILE *__stream);\lint putchar(int __c);\lint fputc_unlocked(int __c, FILE *__stream);\lint putc_unlocked(int __c, FILE *__stream);\lint putchar_unlocked(int __c);\lint getw(FILE *__stream);\lint putw(int __w, FILE *__stream);\lchar * fgets(char *__s, int __n, FILE *__stream);\l__ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream);\l__ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream);\lint fputs(const char *__s, FILE *__stream);\lint puts(const char *__s);\lint ungetc(int __c, FILE *__stream);\lsize_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s);\lsize_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream);\lsize_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream);\lint fseek(FILE *__stream, long int __off, int __whence);\llong int ftell(FILE *__stream);\lvoid rewind(FILE *__stream);\lint fseeko(FILE *__stream, __off_t __off, int __whence);\l__off_t  ftello(FILE *__stream);\lint fgetpos(FILE *__stream, fpos_t *__pos);\lint fsetpos(FILE *__stream, fpos_t *__pos);\lvoid clearerr(FILE *__stream);\lint feof(FILE *__stream);\lint ferror(FILE *__stream);\lvoid clearerr_unlocked(FILE *__stream);\lint feof_unlocked(FILE *__stream);\lint ferror_unlocked(FILE *__stream);\lvoid perror(const char *__s);\lextern int sys_nerr;\lextern const const char *sys_errlist[];\lint fileno(FILE *__stream);\lint fileno_unlocked(FILE *__stream);\lFILE * popen(const char *__command, const char *__modes);\lint pclose(FILE *__stream);\lchar * ctermid(char *__s);\lvoid flockfile(FILE *__stream);\lint ftrylockfile(FILE *__stream);\lvoid funlockfile(FILE *__stream);\lvoid __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function);\lvoid __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function);\lvoid __assert(const char *__assertion, const char *__file, int __line);\l_Bool nondet_bool();\lunsigned char nondet_uchar();\lstruct state_elements_main {   _Bool alloc;   _Bool free;   unsigned char free_addr;   _Bool busy[16];   unsigned char count; } ;\lstruct state_elements_main smain = {  };\lvoid initial();\lvoid design(_Bool clock, _Bool alloc_raw, _Bool *nack, unsigned char *alloc_addr, _Bool free_raw, unsigned char free_addr_raw);\lvoid main();\lFunction start dummy edge\l_Bool clock;\l_Bool alloc_raw;\l_Bool nack;\lunsigned char alloc_addr;\l_Bool free_raw;\lunsigned char free_addr_raw;\lint i = 0;\l" id="139 -> 140"]
140 -> 141 [label="Line 964: \linitial()\l" id="140 -> 141"]
141 -> 142 [label="Lines 0 - 915: \lFunction start dummy edge\l(smain.busy)[0] = 0;\l(smain.busy)[1] = 0;\l(smain.busy)[2] = 0;\l(smain.busy)[3] = 0;\l(smain.busy)[4] = 0;\l(smain.busy)[5] = 0;\l(smain.busy)[6] = 0;\l(smain.busy)[7] = 0;\l(smain.busy)[8] = 0;\l(smain.busy)[9] = 0;\l(smain.busy)[10] = 0;\l(smain.busy)[11] = 0;\l(smain.busy)[12] = 0;\l(smain.busy)[13] = 0;\l(smain.busy)[14] = 0;\l(smain.busy)[15] = 0;\lsmain.count = 0;\lsmain.alloc = 0;\lsmain.free = 0;\lsmain.free_addr = 0;\l" id="141 -> 142"]
142 -> 143 [label="Line 0: \ldefault return\l" id="142 -> 143"]
143 -> 144 [label="Line 964: \lReturn edge from initial to main\l" id="143 -> 144"]
}
